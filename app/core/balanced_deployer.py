from typing import List, Dict, Any
from app.core.proxmox_manager import ProxmoxManager
from app.core.vm_deployer import VMDeployer
from app.core.template_manager import TemplateManager
from app.utils.logger import logger
from app.utils.console import emphasize

class BalancedDeployer:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö –º–∞—à–∏–Ω —Å —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω—ã–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º –ø–æ –Ω–æ–¥–∞–º –∫–ª–∞—Å—Ç–µ—Ä–∞"""

    def __init__(self, proxmox_manager: ProxmoxManager, vm_deployer: VMDeployer = None):
        self.proxmox = proxmox_manager
        self.vm_deployer = vm_deployer if vm_deployer is not None else VMDeployer(proxmox_manager)
        self.template_manager = TemplateManager(proxmox_manager)

    def deploy_balanced(self, users: List[str], config: dict[str, Any]) -> dict[str, str]:
        """
        –†–∞–∑–≤–µ—Ä–Ω—É—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω—ã–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –Ω–æ–¥–∞–º

        Args:
            users: –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
            config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è

        Returns:
            dict: –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å -> –ø–∞—Ä–æ–ª—å)
        """
        logger.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ —Å —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω—ã–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º...")

        # –®–∞–≥ 1: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤ –¥–ª—è –≤—Å–µ—Ö –Ω–æ–¥
        templates_prepared = self._prepare_templates_for_balanced(config)
        if not templates_prepared:
            logger.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ —à–∞–±–ª–æ–Ω–æ–≤ –¥–ª—è —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è")
            return {}

        # –®–∞–≥ 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
        existing_vms_check = self.vm_deployer._check_existing_vms_in_pools(users, config)
        if not existing_vms_check:
            logger.error("‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã. –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
            return {}

        # –®–∞–≥ 3: –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –Ω–æ–¥–∞–º
        user_node_mapping = self._distribute_users_to_nodes(users)

        logger.info("üìã –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –Ω–æ–¥–∞–º:")
        for user, node in user_node_mapping.items():
            logger.info(f"   {user} ‚Üí {node}")

        # –®–∞–≥ 4: –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ VMs
        results = {}

        for user in users:
            logger.info(f"üîÑ –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user}")
            created_user, password = self.vm_deployer.user_manager.create_user_and_pool(user)
            if not created_user:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user}")
                continue
            results[user] = password

            user_node = user_node_mapping[user]
            logger.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user} —Ä–∞–∑–º–µ—â–∞–µ—Ç—Å—è –Ω–∞ –Ω–æ–¥–µ '{user_node}'")

            pool_name = user.split('@')[0]
            self.vm_deployer._create_user_vms(config, user_node, pool_name)

        # –®–∞–≥ 5: –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã
        if self.template_manager.local_templates:
            self.template_manager.save_local_templates_to_config()

        logger.success(f"‚úÖ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –¥–ª—è {len(results)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        return results

    def _distribute_users_to_nodes(self, users: List[str]) -> dict[str, str]:
        """
        –†–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –Ω–æ–¥–∞–º —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ

        Args:
            users: –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

        Returns:
            dict: –°–ª–æ–≤–∞—Ä—å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å -> –Ω–æ–¥–∞
        """
        nodes = self.proxmox.get_nodes()
        if not nodes:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –Ω–æ–¥!")
            return {}

        if len(nodes) == 1:
            # –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ –Ω–æ–¥–∞, —Ä–∞–∑–º–µ—â–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ –Ω–µ–π
            return {user: nodes[0] for user in users}

        # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ –ø–æ –≤—Å–µ–º –Ω–æ–¥–∞–º
        user_node_mapping = {}
        for i, user in enumerate(users):
            node_index = i % len(nodes)
            user_node_mapping[user] = nodes[node_index]

        return user_node_mapping

    def _prepare_templates_for_balanced(self, config: dict[str, Any]) -> bool:
        """
        –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å —à–∞–±–ª–æ–Ω—ã –¥–ª—è —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ –≤—Å–µ–º –Ω–æ–¥–∞–º

        Args:
            config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è

        Returns:
            bool: True –µ—Å–ª–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —É—Å–ø–µ—à–Ω–∞
        """
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ª–æ–∫–∞–ª—å–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            logger.debug("üìã –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ª–æ–∫–∞–ª—å–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
            self.template_manager.load_local_templates_from_config()

            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —à–∞–±–ª–æ–Ω–æ–≤ –º–µ–∂–¥—É –Ω–æ–¥–∞–º–∏
            logger.debug("üìã –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —à–∞–±–ª–æ–Ω–æ–≤ –º–µ–∂–¥—É –Ω–æ–¥–∞–º–∏...")
            self.template_manager.load_template_mapping()

            nodes = self.proxmox.get_nodes()
            if not nodes:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –Ω–æ–¥!")
                return False

            logger.debug(f"üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–æ–¥—ã –∫–ª–∞—Å—Ç–µ—Ä–∞: {nodes}")

            # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ —à–∞–±–ª–æ–Ω–æ–≤ –∏ —Ü–µ–ª–µ–≤—ã—Ö –Ω–æ–¥
            required_templates = {}  # key: "original_vmid:target_node", value: template_info

            # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –º–∞—à–∏–Ω–∞–º –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            for machine_config in config.get('machines', []):
                original_template_vmid = machine_config['template_vmid']
                template_node = machine_config.get('template_node', nodes[0])

                # –î–ª—è balanced —Ä–µ–∂–∏–º–∞ –º–∞—à–∏–Ω–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–∑–º–µ—â–µ–Ω–∞ –Ω–∞ –ª—é–±–æ–π –Ω–æ–¥–µ
                nodes_for_this_machine = nodes

                # –î–ª—è –∫–∞–∂–¥–æ–π –Ω–æ–¥—ã, –≥–¥–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–∑–º–µ—â–µ–Ω–∞ —ç—Ç–∞ –º–∞—à–∏–Ω–∞
                for node in nodes_for_this_machine:
                    # –ï—Å–ª–∏ —à–∞–±–ª–æ–Ω –Ω–µ –Ω–∞ —Ç–æ–π –∂–µ –Ω–æ–¥–µ, –≥–¥–µ –±—É–¥–µ—Ç —Ä–∞–∑–º–µ—â–µ–Ω–∞ –º–∞—à–∏–Ω–∞
                    if template_node != node:
                        template_key = f"{original_template_vmid}:{node}"

                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ª–æ–∫–∞–ª—å–Ω—ã–π —à–∞–±–ª–æ–Ω —Ñ–∏–∑–∏—á–µ—Å–∫–∏ –Ω–∞ –Ω–æ–¥–µ
                        existing_template_vmid = self.template_manager.local_templates.get(template_key)
                        if existing_template_vmid:
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —à–∞–±–ª–æ–Ω —Ñ–∏–∑–∏—á–µ—Å–∫–∏ –Ω–∞ —Ü–µ–ª–µ–≤–æ–π –Ω–æ–¥–µ
                            if self._verify_template_exists(node, existing_template_vmid):
                                logger.debug(f"‚úÖ –õ–æ–∫–∞–ª—å–Ω—ã–π —à–∞–±–ª–æ–Ω VMID {existing_template_vmid} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –Ω–∞ –Ω–æ–¥–µ '{node}'")
                                continue
                            else:
                                logger.debug(f"üîÑ –õ–æ–∫–∞–ª—å–Ω—ã–π —à–∞–±–ª–æ–Ω VMID {existing_template_vmid} –Ω–µ –Ω–∞–π–¥–µ–Ω —Ñ–∏–∑–∏—á–µ—Å–∫–∏ –Ω–∞ –Ω–æ–¥–µ '{node}', –ø–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º")

                        # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤
                        required_templates[template_key] = {
                            'original_vmid': original_template_vmid,
                            'template_node': template_node,
                            'target_node': node,
                            'machine_config': machine_config
                        }

            if not required_templates:
                logger.info("‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —à–∞–±–ª–æ–Ω—ã —É–∂–µ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã")
                return True

            logger.info(f"üìã –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å {len(required_templates)} –ª–æ–∫–∞–ª—å–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤...")

            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Ç—Ä–µ–±—É–µ–º—ã–π —à–∞–±–ª–æ–Ω
            for template_key, template_info in required_templates.items():
                logger.debug(f"üîÑ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —à–∞–±–ª–æ–Ω–∞: {template_key}")
                original_vmid = template_info['original_vmid']
                template_node = template_info['template_node']
                target_node = template_info['target_node']

                # –°–æ–∑–¥–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —à–∞–±–ª–æ–Ω –Ω–∞ —Ü–µ–ª–µ–≤–æ–π –Ω–æ–¥–µ
                local_template_vmid = self._create_local_template_for_balanced(
                    template_node, original_vmid, target_node
                )

                if local_template_vmid:
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–æ–∫–∞–ª—å–Ω–æ–º —à–∞–±–ª–æ–Ω–µ
                    self.template_manager.local_templates[template_key] = local_template_vmid
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —à–∞–±–ª–æ–Ω–æ–≤ –º–µ–∂–¥—É –Ω–æ–¥–∞–º–∏
                    self.template_manager.update_template_mapping(original_vmid, template_node, target_node, local_template_vmid)
                    logger.success(f"‚úÖ –õ–æ–∫–∞–ª—å–Ω—ã–π —à–∞–±–ª–æ–Ω VMID {local_template_vmid} –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω –Ω–∞ –Ω–æ–¥–µ '{target_node}'")
                else:
                    logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–π —à–∞–±–ª–æ–Ω –¥–ª—è {template_key}")
                    return False

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            if self.template_manager.local_templates:
                logger.debug(f"üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ {len(self.template_manager.local_templates)} –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã—Ö —à–∞–±–ª–æ–Ω–∞—Ö –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é...")
                self.template_manager.save_local_templates_to_config()

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —à–∞–±–ª–æ–Ω–æ–≤ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª
                logger.debug("üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —à–∞–±–ª–æ–Ω–æ–≤ –º–µ–∂–¥—É –Ω–æ–¥–∞–º–∏...")
                self.template_manager.save_template_mapping()

            logger.success("üéâ –§–∞–∑–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ —à–∞–±–ª–æ–Ω–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ —à–∞–±–ª–æ–Ω–æ–≤: {e}")
            return False

    def _create_local_template_for_balanced(self, template_node: str, original_template_vmid: int, target_node: str) -> int:
        """
        –°–æ–∑–¥–∞—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–π —à–∞–±–ª–æ–Ω –¥–ª—è –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏ –Ω–∞–≥—Ä—É–∑–∫–∏

        Args:
            template_node: –ù–æ–¥–∞ –≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —à–∞–±–ª–æ–Ω
            original_template_vmid: VMID –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞
            target_node: –¶–µ–ª–µ–≤–∞—è –Ω–æ–¥–∞ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞

        Returns:
            int: VMID —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞ –∏–ª–∏ 0 –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        try:
            logger.info(f"üîÑ –°–æ–∑–¥–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —à–∞–±–ª–æ–Ω –Ω–∞ –Ω–æ–¥–µ '{target_node}' –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞ VMID {original_template_vmid}...")

            # –®–∞–≥ 1: –°–æ–∑–¥–∞—Ç—å –ø–æ–ª–Ω—ã–π –∫–ª–æ–Ω –Ω–∞ –Ω–æ–¥–µ –≥–¥–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —à–∞–±–ª–æ–Ω
            logger.info(f"üìã –®–∞–≥ 1: –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—ã–π –∫–ª–æ–Ω –Ω–∞ –Ω–æ–¥–µ '{template_node}'...")
            temp_vmid = self.proxmox.get_next_vmid()
            while not self.proxmox.check_vmid_unique(temp_vmid):
                temp_vmid += 1

            template_name = f"template-{original_template_vmid}-{target_node}"

            # –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—ã–π –∫–ª–æ–Ω –Ω–∞ —Ç–æ–π –∂–µ –Ω–æ–¥–µ —Å–Ω–∞—á–∞–ª–∞
            clone_params = {
                'newid': temp_vmid,
                'name': template_name,
                'target': template_node,  # –°–æ–∑–¥–∞–µ–º –Ω–∞ —Ç–æ–π –∂–µ –Ω–æ–¥–µ —Å–Ω–∞—á–∞–ª–∞
                'full': 1  # –ü–æ–ª–Ω—ã–π –∫–ª–æ–Ω
            }

            logger.debug(f"   –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—É—é –∫–æ–ø–∏—é VMID {original_template_vmid} –Ω–∞ –Ω–æ–¥–µ '{template_node}'")
            try:
                task = self.proxmox.proxmox.nodes(template_node).qemu(original_template_vmid).clone.post(**clone_params)
                if not self._wait_for_task(task, template_node):
                    logger.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª–Ω–æ–π –∫–æ–ø–∏–∏ –Ω–∞ –∏—Å—Ö–æ–¥–Ω–æ–π –Ω–æ–¥–µ")
                    return 0
                logger.success(f"‚úÖ –ü–æ–ª–Ω—ã–π –∫–ª–æ–Ω —Å–æ–∑–¥–∞–Ω –Ω–∞ –Ω–æ–¥–µ '{template_node}' —Å VMID {temp_vmid}")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ –∫–ª–æ–Ω–∞: {e}")
                return 0

            # –®–∞–≥ 2: –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –í–ú –≤ —à–∞–±–ª–æ–Ω
            logger.info(f"üìã –®–∞–≥ 2: –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤—ã–≤–∞–µ–º –í–ú {temp_vmid} –≤ —à–∞–±–ª–æ–Ω...")
            try:
                self.proxmox.proxmox.nodes(template_node).qemu(temp_vmid).template.post()
                logger.success(f"‚úÖ –í–ú –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∞ –≤ —à–∞–±–ª–æ–Ω –Ω–∞ –Ω–æ–¥–µ '{template_node}'")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –í–ú –≤ —à–∞–±–ª–æ–Ω: {e}")
                logger.info("üí° –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –º–∏–≥—Ä–∞—Ü–∏–µ–π...")

            # –®–∞–≥ 3: –í—ã–ø–æ–ª–Ω–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é —à–∞–±–ª–æ–Ω–∞ –Ω–∞ –Ω—É–∂–Ω—É—é –Ω–æ–¥—É
            if template_node != target_node:
                logger.info(f"üìã –®–∞–≥ 3: –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é —à–∞–±–ª–æ–Ω–∞ –Ω–∞ –Ω–æ–¥—É '{target_node}'...")
                try:
                    migration_params = {
                        'target': target_node,
                        'online': 1  # –û–Ω–ª–∞–π–Ω –º–∏–≥—Ä–∞—Ü–∏—è
                    }

                    logger.debug(f"   –ú–∏–≥—Ä–∞—Ü–∏—è —à–∞–±–ª–æ–Ω–∞ VMID {temp_vmid} —Å '{template_node}' –Ω–∞ '{target_node}'...")
                    task = self.proxmox.proxmox.nodes(template_node).qemu(temp_vmid).migrate.post(**migration_params)

                    if not self._wait_for_task(task, template_node):
                        logger.error("‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ —à–∞–±–ª–æ–Ω–∞")
                        # –ü–æ–ø—Ä–æ–±—É–µ–º –æ—á–∏—Å—Ç–∏—Ç—å –Ω–µ—É–¥–∞—á–Ω–æ –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —à–∞–±–ª–æ–Ω
                        try:
                            self.proxmox.delete_vm(template_node, temp_vmid)
                        except Exception:
                            pass
                        return 0

                    logger.success(f"‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –Ω–∞ –Ω–æ–¥—É '{target_node}'")

                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
                    # –ü–æ–ø—Ä–æ–±—É–µ–º –æ—á–∏—Å—Ç–∏—Ç—å –Ω–µ—É–¥–∞—á–Ω–æ –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —à–∞–±–ª–æ–Ω
                    try:
                        self.proxmox.delete_vm(template_node, temp_vmid)
                    except Exception:
                        pass
                    return 0

            # –®–∞–≥ 4: –í–æ–∑–≤—Ä–∞—â–∞–µ–º VMID —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞
            logger.success(f"üìã –õ–æ–∫–∞–ª—å–Ω—ã–π —à–∞–±–ª–æ–Ω –≥–æ—Ç–æ–≤: VMID {temp_vmid} –Ω–∞ –Ω–æ–¥–µ '{target_node}'")
            logger.info(f"üí° –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å: –ø–æ–ª–Ω—ã–π –∫–ª–æ–Ω ‚Üí —à–∞–±–ª–æ–Ω ‚Üí –º–∏–≥—Ä–∞—Ü–∏—è")

            return temp_vmid

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞ –¥–ª—è –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏: {e}")
            return 0

    def _wait_for_task(self, task, node: str, timeout: int = 300) -> bool:
        """–û–∂–∏–¥–∞—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏"""
        import time
        start_time = time.time()
        while time.time() - start_time < timeout:
            try:
                status = self.proxmox.proxmox.nodes(node).tasks(task).status.get()
                if status['status'] == 'stopped':
                    return status['exitstatus'] == 'OK'
                time.sleep(2)
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏: {e}")
                return False
        logger.error("‚è∞ –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏")
        return False

    def _verify_template_exists(self, node: str, vmid: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ–∏–∑–∏—á–µ—Å–∫–æ–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ –Ω–∞ –Ω–æ–¥–µ"""
        try:
            # –ü–æ–ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é VM
            vm_config = self.proxmox.proxmox.nodes(node).qemu(vmid).config.get()
            if vm_config:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —à–∞–±–ª–æ–Ω
                template = vm_config.get('template', 0)
                return template == 1
            return False
        except Exception as e:
            # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é, –∑–Ω–∞—á–∏—Ç VM –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            logger.debug(f"–®–∞–±–ª–æ–Ω VMID {vmid} –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ –Ω–æ–¥–µ '{node}': {e}")
            return False
