import yaml
import os
from typing import Dict, List, Any
from app.utils.logger import logger
from app.core.proxmox_manager import ProxmoxManager

CONFIG_DIR = os.path.join(os.path.dirname(os.path.dirname(os.path.dirname(__file__))), 'data')
os.makedirs(CONFIG_DIR, exist_ok=True)
CONFIG_FILE = os.path.join(CONFIG_DIR, 'deployment_config.yml')
USERS_FILE = os.path.join(CONFIG_DIR, 'users_list.yml')
CONFIGS_DIR = os.path.join(CONFIG_DIR, 'configs')
CONNECTIONS_FILE = os.path.join(CONFIG_DIR, 'connections_config.yml')
os.makedirs(CONFIGS_DIR, exist_ok=True)

class ConfigManager:
    @staticmethod
    def create_deployment_config(nodes: list[str] | None = None, proxmox_manager: ProxmoxManager | None = None) -> Dict[str, Any]:
        config = {}
        try:
            num_machines = int(input("–°–∫–æ–ª—å–∫–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–∞—à–∏–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏? "))
            config['machines'] = []
            for i in range(num_machines):
                print(f"\n--- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–∞—à–∏–Ω—ã #{i+1} ---")
                machine_config = {}
                print("–¢–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:")
                print("1) linux")
                print("2) ecorouter")
                dtype_choice = input("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø (1/2) [1]: ").strip()
                machine_config['device_type'] = 'ecorouter' if dtype_choice == '2' else 'linux'
                machine_config['name'] = input("–ò–º—è —Å–æ–∑–¥–∞–≤–∞–µ–º–æ–π –º–∞—à–∏–Ω—ã: ")

                # –ó–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å –Ω–æ–¥—É —à–∞–±–ª–æ–Ω–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤ –∫–ª–∞—Å—Ç–µ—Ä–µ > 1 –Ω–æ–¥—ã
                nodes = nodes or []
                template_node = nodes[0] if nodes else ''

                if len(nodes) > 1:
                    print("–î–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–æ–¥—ã –¥–ª—è —à–∞–±–ª–æ–Ω–∞:")
                    for idx, n in enumerate(nodes, start=1):
                        print(f"{idx}. {n}")
                    while True:
                        sel = input("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–¥—É (–Ω–æ–º–µ—Ä): ").strip()
                        try:
                            si = int(sel)
                            if 1 <= si <= len(nodes):
                                template_node = nodes[si - 1]
                                break
                        except ValueError:
                            pass
                        print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                else:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—É—é –Ω–æ–¥—É
                    template_node = nodes[0] if nodes else ''

                # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω–æ–≤ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –Ω–æ–¥–µ
                if template_node:
                    templates = self._get_templates_for_node(proxmox_manager, template_node)
                    if templates:
                        print(f"\n–î–æ—Å—Ç—É–ø–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã –Ω–∞ –Ω–æ–¥–µ '{template_node}':")
                        for idx, template in enumerate(templates, start=1):
                            print(f"{idx}. {template['name']} (VMID: {template['vmid']})")

                        while True:
                            sel = input("–í—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω (–Ω–æ–º–µ—Ä): ").strip()
                            try:
                                si = int(sel)
                                if 1 <= si <= len(templates):
                                    selected_template = templates[si - 1]
                                    machine_config['template_vmid'] = selected_template['vmid']
                                    machine_config['template_node'] = template_node
                                    break
                            except ValueError:
                                pass
                            print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                    else:
                        print(f"‚ùå –ù–∞ –Ω–æ–¥–µ '{template_node}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤!")
                        print("üí° –°–æ–∑–¥–∞–π—Ç–µ —à–∞–±–ª–æ–Ω—ã –Ω–∞ —ç—Ç–æ–π –Ω–æ–¥–µ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –Ω–æ–¥—É")
                        return {}
                else:
                    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω–æ–¥—É –¥–ª—è —à–∞–±–ª–æ–Ω–∞!")
                    return {}
                if machine_config['device_type'] == 'ecorouter':
                    prompt = "–°–∫–æ–ª—å–∫–æ –Ω—É–∂–Ω–æ —Å–µ—Ç–µ–≤—ã—Ö –∞–¥–∞–ø—Ç–µ—Ä–æ–≤? (—É–ø—Ä–∞–≤–ª—è—é—â–∏–π –ø–æ—Ä—Ç net0 —É–∂–µ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏) "
                else:
                    prompt = "–°–∫–æ–ª—å–∫–æ –Ω—É–∂–Ω–æ —Å–µ—Ç–µ–≤—ã—Ö –∞–¥–∞–ø—Ç–µ—Ä–æ–≤? "
                num_networks = int(input(prompt))
                machine_config['networks'] = []
                for j in range(num_networks):
                    bridge_input = input(f"–ò–º—è bridge –¥–ª—è —Å–µ—Ç–µ–≤–æ–π –∫–∞—Ä—Ç—ã {j+1} (–Ω–∞–ø—Ä–∏–º–µ—Ä vmbr0 –∏–ª–∏ **vmbr100** –¥–ª—è –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ): ")
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ bridge –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–º (–∑–∞–∫–ª—é—á–µ–Ω –≤ **)
                    if bridge_input.startswith('**') and bridge_input.endswith('**'):
                        bridge = bridge_input[2:-2]  # –£–¥–∞–ª—è–µ–º **
                        reserved = True
                    else:
                        bridge = bridge_input
                        reserved = False
                    machine_config['networks'].append({'bridge': bridge, 'reserved': reserved})

                # –í—ã–±–æ—Ä —Ç–∏–ø–∞ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
                print("–¢–∏–ø –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:")
                print("1) Linked clone (–±—ã—Å—Ç—Ä–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ, —ç–∫–æ–Ω–æ–º–∏—Ç –º–µ—Å—Ç–æ)")
                print("2) Full clone (–ø–æ–ª–Ω–∞—è –∫–æ–ø–∏—è, –Ω–µ–∑–∞–≤–∏—Å–∏–º–∞—è –æ—Ç —à–∞–±–ª–æ–Ω–∞)")
                clone_choice = input("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (1/2) [1]: ").strip()
                machine_config['full_clone'] = clone_choice == '2'

                config['machines'].append(machine_config)
            with open(CONFIG_FILE, 'w') as f:
                yaml.dump(config, f, default_flow_style=False, allow_unicode=True)
            logger.success(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ —Ñ–∞–π–ª: {CONFIG_FILE}")
            return config
        except ValueError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞: {e}")
            return {}

    @staticmethod
    def load_deployment_config() -> Dict[str, Any]:
        if not os.path.exists(CONFIG_FILE):
            logger.warning("–§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return {}
        with open(CONFIG_FILE, 'r') as f:
            return yaml.safe_load(f)

    @staticmethod
    def save_users(users: List[str]) -> bool:
        try:
            users_data = {'users': users}
            with open(USERS_FILE, 'w') as f:
                yaml.dump(users_data, f, default_flow_style=False, allow_unicode=True)
            logger.success(f"–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {USERS_FILE}")
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
            return False

    @staticmethod
    def load_users() -> List[str]:
        if not os.path.exists(USERS_FILE):
            return []
        with open(USERS_FILE, 'r') as f:
            data = yaml.safe_load(f)
            return data.get('users', [])

    @staticmethod
    def create_named_config(config_name: str, nodes: list[str] | None = None, proxmox_manager: ProxmoxManager | None = None) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞—Ç—å –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è"""
        config = {}
        try:
            print(f"\n=== –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {config_name} ===")
            num_machines = int(input("–°–∫–æ–ª—å–∫–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–∞—à–∏–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏? "))
            config['machines'] = []
            for i in range(num_machines):
                print(f"\n--- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–∞—à–∏–Ω—ã #{i+1} ---")
                machine_config = {}
                print("–¢–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:")
                print("1) linux")
                print("2) ecorouter")
                dtype_choice = input("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø (1/2) [1]: ").strip()
                machine_config['device_type'] = 'ecorouter' if dtype_choice == '2' else 'linux'
                machine_config['name'] = input("–ò–º—è —Å–æ–∑–¥–∞–≤–∞–µ–º–æ–π –º–∞—à–∏–Ω—ã: ")

                # –ó–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å –Ω–æ–¥—É —à–∞–±–ª–æ–Ω–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤ –∫–ª–∞—Å—Ç–µ—Ä–µ > 1 –Ω–æ–¥—ã
                nodes = nodes or []
                template_node = nodes[0] if nodes else ''

                if len(nodes) > 1:
                    print("–î–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–æ–¥—ã –¥–ª—è —à–∞–±–ª–æ–Ω–∞:")
                    for idx, n in enumerate(nodes, start=1):
                        print(f"{idx}. {n}")
                    while True:
                        sel = input("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–¥—É (–Ω–æ–º–µ—Ä): ").strip()
                        try:
                            si = int(sel)
                            if 1 <= si <= len(nodes):
                                template_node = nodes[si - 1]
                                break
                        except ValueError:
                            pass
                        print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                else:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—É—é –Ω–æ–¥—É
                    template_node = nodes[0] if nodes else ''

                # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω–æ–≤ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –Ω–æ–¥–µ
                if template_node and proxmox_manager:
                    templates = proxmox_manager.get_templates(template_node)
                    if templates:
                        print(f"\n–î–æ—Å—Ç—É–ø–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã –Ω–∞ –Ω–æ–¥–µ '{template_node}':")
                        for idx, template in enumerate(templates, start=1):
                            print(f"{idx}. {template['name']} (VMID: {template['vmid']})")

                        while True:
                            sel = input("–í—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω (–Ω–æ–º–µ—Ä): ").strip()
                            try:
                                si = int(sel)
                                if 1 <= si <= len(templates):
                                    selected_template = templates[si - 1]
                                    machine_config['template_vmid'] = selected_template['vmid']
                                    machine_config['template_node'] = template_node
                                    break
                            except ValueError:
                                pass
                            print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                    else:
                        print(f"‚ùå –ù–∞ –Ω–æ–¥–µ '{template_node}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤!")
                        print("üí° –°–æ–∑–¥–∞–π—Ç–µ —à–∞–±–ª–æ–Ω—ã –Ω–∞ —ç—Ç–æ–π –Ω–æ–¥–µ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –Ω–æ–¥—É")
                        return {}
                else:
                    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω–æ–¥—É –¥–ª—è —à–∞–±–ª–æ–Ω–∞ –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Proxmox!")
                    return {}

                if machine_config['device_type'] == 'ecorouter':
                    prompt = "–°–∫–æ–ª—å–∫–æ –Ω—É–∂–Ω–æ —Å–µ—Ç–µ–≤—ã—Ö –∞–¥–∞–ø—Ç–µ—Ä–æ–≤? (—É–ø—Ä–∞–≤–ª—è—é—â–∏–π –ø–æ—Ä—Ç net0 —É–∂–µ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏) "
                else:
                    prompt = "–°–∫–æ–ª—å–∫–æ –Ω—É–∂–Ω–æ —Å–µ—Ç–µ–≤—ã—Ö –∞–¥–∞–ø—Ç–µ—Ä–æ–≤? "
                num_networks = int(input(prompt))
                machine_config['networks'] = []
                for j in range(num_networks):
                    bridge_input = input(f"–ò–º—è bridge –¥–ª—è —Å–µ—Ç–µ–≤–æ–π –∫–∞—Ä—Ç—ã {j+1} (–Ω–∞–ø—Ä–∏–º–µ—Ä vmbr0 –∏–ª–∏ **vmbr100** –¥–ª—è –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ): ")
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ bridge –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–º (–∑–∞–∫–ª—é—á–µ–Ω –≤ **)
                    if bridge_input.startswith('**') and bridge_input.endswith('**'):
                        bridge = bridge_input[2:-2]  # –£–¥–∞–ª—è–µ–º **
                        reserved = True
                    else:
                        bridge = bridge_input
                        reserved = False
                    machine_config['networks'].append({'bridge': bridge, 'reserved': reserved})

                # –í—ã–±–æ—Ä —Ç–∏–ø–∞ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
                print("–¢–∏–ø –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:")
                print("1) Linked clone (–±—ã—Å—Ç—Ä–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ, —ç–∫–æ–Ω–æ–º–∏—Ç –º–µ—Å—Ç–æ)")
                print("2) Full clone (–ø–æ–ª–Ω–∞—è –∫–æ–ø–∏—è, –Ω–µ–∑–∞–≤–∏—Å–∏–º–∞—è –æ—Ç —à–∞–±–ª–æ–Ω–∞)")
                clone_choice = input("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (1/2) [1]: ").strip()
                machine_config['full_clone'] = clone_choice == '2'

                config['machines'].append(machine_config)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –∏–º–µ–Ω–µ–º
            config_file = os.path.join(CONFIGS_DIR, f'{config_name}.yml')
            with open(config_file, 'w') as f:
                yaml.dump(config, f, default_flow_style=False, allow_unicode=True)
            logger.success(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è '{config_name}' —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ —Ñ–∞–π–ª: {config_file}")
            return config
        except ValueError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞: {e}")
            return {}

    @staticmethod
    def list_configs() -> List[str]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π"""
        if not os.path.exists(CONFIGS_DIR):
            return []
        config_files = [f for f in os.listdir(CONFIGS_DIR) if f.endswith('.yml')]
        return [os.path.splitext(f)[0] for f in config_files]

    @staticmethod
    def load_config(config_name: str) -> Dict[str, Any]:
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–æ –∏–º–µ–Ω–∏"""
        config_file = os.path.join(CONFIGS_DIR, f'{config_name}.yml')
        if not os.path.exists(config_file):
            logger.warning(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è '{config_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            return {}
        with open(config_file, 'r') as f:
            return yaml.safe_load(f)

    @staticmethod
    def delete_config(config_name: str) -> bool:
        """–£–¥–∞–ª–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"""
        config_file = os.path.join(CONFIGS_DIR, f'{config_name}.yml')
        if os.path.exists(config_file):
            try:
                os.remove(config_file)
                logger.success(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è '{config_name}' —É–¥–∞–ª–µ–Ω–∞")
                return True
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ '{config_name}': {e}")
                return False
        else:
            logger.warning(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è '{config_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return False

    @staticmethod
    def _get_templates_for_node(proxmox_manager: ProxmoxManager, node: str) -> List[dict]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω–æ–≤ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–π –Ω–æ–¥–µ"""
        return proxmox_manager.get_templates(node)

    @staticmethod
    def save_connection_config(name: str, host: str, user: str, use_token: bool = False,
                              token_name: str = None, token_value: str = None, password: str = None) -> bool:
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –∏–º–µ–Ω–µ–º"""
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            connections = ConfigManager.load_connections_config()

            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            connections[name] = {
                'host': host,
                'user': user,
                'use_token': use_token,
                'token_name': token_name if use_token else None,
                'token_value': token_value if use_token else None,
                'password': password if not use_token and password else None
            }

            with open(CONNECTIONS_FILE, 'w') as f:
                yaml.dump(connections, f, default_flow_style=False, allow_unicode=True)
            logger.success(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è '{name}' —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            return False

    @staticmethod
    def load_connections_config() -> Dict[str, Any]:
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å –≤—Å–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        if not os.path.exists(CONNECTIONS_FILE):
            return {}
        try:
            with open(CONNECTIONS_FILE, 'r') as f:
                return yaml.safe_load(f) or {}
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            return {}

    @staticmethod
    def delete_connection_config(name: str) -> bool:
        """–£–¥–∞–ª–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø–æ –∏–º–µ–Ω–∏"""
        try:
            connections = ConfigManager.load_connections_config()
            if name in connections:
                del connections[name]
                with open(CONNECTIONS_FILE, 'w') as f:
                    yaml.dump(connections, f, default_flow_style=False, allow_unicode=True)
                logger.success(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è '{name}' —É–¥–∞–ª–µ–Ω–∞")
                return True
            else:
                logger.warning(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è '{name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return False
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            return False

    @staticmethod
    def list_connection_configs() -> List[str]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∏–º–µ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        connections = ConfigManager.load_connections_config()
        return list(connections.keys())

    @staticmethod
    def get_connection_config(name: str) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø–æ –∏–º–µ–Ω–∏"""
        connections = ConfigManager.load_connections_config()
        return connections.get(name, {})
