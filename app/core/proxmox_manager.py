import proxmoxer
from typing import List
from app.utils.logger import logger

class ProxmoxManager:
    def __init__(self):
        self.proxmox = None
    
    def connect(self, host: str, user: str, password: str = None, 
                token_name: str = None, token_value: str = None) -> bool:
        try:
            if token_name and token_value:
                self.proxmox = proxmoxer.ProxmoxAPI(host, user=user, token_name=token_name, token_value=token_value, verify_ssl=False)
            else:
                self.proxmox = proxmoxer.ProxmoxAPI(host, user=user, password=password, verify_ssl=False)
            self.proxmox.version.get()
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Proxmox: {e}")
            return False

    def get_nodes(self) -> List[str]:
        try:
            nodes = self.proxmox.nodes.get()
            return [node['node'] for node in nodes]
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –Ω–æ–¥: {e}")
            return []

    def get_vm_node(self, vmid: int) -> str:
        try:
            for node in self.get_nodes():
                vms = self.proxmox.nodes(node).qemu.get()
                for vm in vms:
                    if int(vm.get('vmid', -1)) == vmid:
                        return node
            return ""
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–æ–¥—ã –í–ú {vmid}: {e}")
            return ""

    def list_bridges(self, node: str) -> list[str]:
        try:
            nets = self.proxmox.nodes(node).network.get()
            return [n['iface'] for n in nets if n.get('type') == 'bridge']
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Ç–µ–π –Ω–∞ –Ω–æ–¥–µ {node}: {e}")
            return []

    def ensure_bridge(self, node: str, bridge_name: str) -> bool:
        try:
            if bridge_name == 'vmbr0':
                return True
            existing = self.list_bridges(node)
            if bridge_name in existing:
                return True
            self.proxmox.nodes(node).network.post(type='bridge', iface=bridge_name, autostart=1)
            try:
                self.proxmox.nodes(node).network.reload.post()
            except Exception:
                pass
            return True
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è bridge {bridge_name} –Ω–∞ –Ω–æ–¥–µ {node}: {e}")
            return False

    def next_free_bridge_name(self, node: str, start_from: int = 1000) -> str:
        try:
            existing = set(self.list_bridges(node))
            n = max(1000, start_from)
            while True:
                candidate = f"vmbr{n}"
                if candidate not in existing:
                    return candidate
                n += 1
        except Exception:
            return f"vmbr{max(1000, start_from)}"

    def get_next_vmid(self) -> int:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –¥–æ—Å—Ç—É–ø–Ω—ã–π VMID –∏–∑ –∫–ª–∞—Å—Ç–µ—Ä–∞"""
        try:
            return int(self.proxmox.cluster.nextid.get())
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª–µ–¥—É—é—â–µ–≥–æ VMID: {e}")
            return 1000

    def get_storages(self, node: str) -> List[str]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ö—Ä–∞–Ω–∏–ª–∏—â –Ω–∞ –Ω–æ–¥–µ"""
        try:
            storages = self.proxmox.nodes(node).storage.get()
            return [storage['storage'] for storage in storages if storage.get('enabled') == 1]
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ö—Ä–∞–Ω–∏–ª–∏—â –Ω–∞ –Ω–æ–¥–µ {node}: {e}")
            return []

    def find_common_storage(self, source_node: str, target_node: str) -> str:
        """–ù–∞–π—Ç–∏ –æ–±—â–µ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –º–µ–∂–¥—É –¥–≤—É–º—è –Ω–æ–¥–∞–º–∏ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        try:
            source_storages = set(self.get_storages(source_node))
            target_storages = set(self.get_storages(target_node))

            print(f"üîç –ü–æ–∏—Å–∫ –æ–±—â–µ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –º–µ–∂–¥—É –Ω–æ–¥–∞–º–∏ {source_node} –∏ {target_node}")

            # –ù–∞–π—Ç–∏ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ —Ö—Ä–∞–Ω–∏–ª–∏—â (–æ–±—â–∏–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞)
            common = source_storages.intersection(target_storages)

            if common:
                # –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º shared —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –¥–ª—è –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ–∂–¥—É –Ω–æ–¥–∞–º–∏
                for storage in common:
                    storage_info = self.get_storage_info(source_node, storage)
                    if storage_info and storage_info.get('shared') == 1:
                        content_types = storage_info.get('content', '').split(',')
                        if 'images' in content_types:
                            print(f"   ‚úÖ –í—ã–±—Ä–∞–Ω–æ shared —Ö—Ä–∞–Ω–∏–ª–∏—â–µ '{storage}' –¥–ª—è –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ–∂–¥—É –Ω–æ–¥–∞–º–∏")
                            return storage

                # Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª—é–±–æ–µ –æ–±—â–µ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∫—Ä–æ–º–µ local-lvm
                for storage in common:
                    if storage != 'local-lvm':
                        storage_info = self.get_storage_info(source_node, storage)
                        if storage_info:
                            content_types = storage_info.get('content', '').split(',')
                            if 'images' in content_types:
                                print(f"   ‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–µ-shared —Ö—Ä–∞–Ω–∏–ª–∏—â–µ '{storage}' –¥–ª—è –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ–∂–¥—É –Ω–æ–¥–∞–º–∏")
                                return storage

            print(f"‚ùå –ü–æ–¥—Ö–æ–¥—è—â–µ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return ""
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –æ–±—â–µ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –º–µ–∂–¥—É {source_node} –∏ {target_node}: {e}")
            return ""

    def get_storage_info(self, node: str, storage: str) -> dict:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ"""
        try:
            storages = self.proxmox.nodes(node).storage.get()
            for s in storages:
                if s['storage'] == storage:
                    return s
            return {}
        except Exception:
            return {}

    def check_vmid_unique(self, vmid: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å VMID –≤–æ –≤—Å—ë–º –∫–ª–∞—Å—Ç–µ—Ä–µ"""
        try:
            for node in self.get_nodes():
                vms = self.proxmox.nodes(node).qemu.get()
                for vm in vms:
                    if int(vm.get('vmid', -1)) == int(vmid):
                        return False
            return True
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ VMID: {e}")
            return False

    def clone_vm(self, template_node: str, template_vmid: int,
                 target_node: str, new_vmid: int, name: str, pool: str | None, full_clone: bool = False) -> bool:
        try:
            # –ï—Å–ª–∏ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ–∂–¥—É —Ä–∞–∑–Ω—ã–º–∏ –Ω–æ–¥–∞–º–∏ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞
            if template_node != target_node:
                print(f"üîÑ –°–æ–∑–¥–∞–µ–º {'–ø–æ–ª–Ω—ã–π' if full_clone else 'linked'} –∫–ª–æ–Ω —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏ –º–µ–∂–¥—É –Ω–æ–¥–∞–º–∏ {template_node} -> {target_node}")
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π VMID –¥–ª—è –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞
                template_vmid_for_migration = self.get_next_vmid()
                while not self.check_vmid_unique(template_vmid_for_migration):
                    template_vmid_for_migration += 1
                return self._create_local_template_via_migration(template_node, template_vmid, target_node, template_vmid_for_migration, name, pool)
            else:
                # –î–ª—è –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ —Ç–æ–π –∂–µ –Ω–æ–¥–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π –º–µ—Ç–æ–¥
                clone_params = {'newid': new_vmid, 'name': name, 'target': target_node, 'full': 1 if full_clone else 0}
                if pool:
                    clone_params['pool'] = pool

                print(f"üîÑ –°–æ–∑–¥–∞–µ–º {'–ø–æ–ª–Ω—ã–π' if full_clone else 'linked'} –∫–ª–æ–Ω –Ω–∞ —Ç–æ–π –∂–µ –Ω–æ–¥–µ '{target_node}'")
                try:
                    task = self.proxmox.nodes(template_node).qemu(template_vmid).clone.post(**clone_params)
                    return self._wait_for_task(task, template_node)
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –í–ú: {e}")
                    return False
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –í–ú: {e}")
            return False



    def _create_local_template_via_migration(self, template_node: str, template_vmid: int,
                                           target_node: str, new_vmid: int, name: str, pool: str | None) -> bool:
        """–°–æ–∑–¥–∞—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–π —à–∞–±–ª–æ–Ω –Ω–∞ —Ü–µ–ª–µ–≤–æ–π –Ω–æ–¥–µ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏"""
        try:
            # –®–∞–≥ 1: –°–æ–∑–¥–∞—Ç—å –ø–æ–ª–Ω—ã–π –∫–ª–æ–Ω –Ω–∞ –Ω–æ–¥–µ –≥–¥–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω —à–∞–±–ª–æ–Ω
            print(f"üìã –®–∞–≥ 1: –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—ã–π –∫–ª–æ–Ω –Ω–∞ –Ω–æ–¥–µ '{template_node}'...")
            template_name = f"template-{template_vmid}-{target_node}"

            # –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—ã–π –∫–ª–æ–Ω –Ω–∞ —Ç–æ–π –∂–µ –Ω–æ–¥–µ —Å–Ω–∞—á–∞–ª–∞
            clone_params = {
                'newid': new_vmid,
                'name': template_name,
                'target': template_node,  # –°–æ–∑–¥–∞–µ–º –Ω–∞ —Ç–æ–π –∂–µ –Ω–æ–¥–µ —Å–Ω–∞—á–∞–ª–∞
                'full': 1  # –ü–æ–ª–Ω—ã–π –∫–ª–æ–Ω
            }

            print(f"   –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—É—é –∫–æ–ø–∏—é VMID {template_vmid} –Ω–∞ –Ω–æ–¥–µ '{template_node}'")
            try:
                task = self.proxmox.nodes(template_node).qemu(template_vmid).clone.post(**clone_params)
                if not self._wait_for_task(task, template_node):
                    print("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª–Ω–æ–π –∫–æ–ø–∏–∏ –Ω–∞ –∏—Å—Ö–æ–¥–Ω–æ–π –Ω–æ–¥–µ")
                    return False
                print(f"‚úÖ –ü–æ–ª–Ω—ã–π –∫–ª–æ–Ω —Å–æ–∑–¥–∞–Ω –Ω–∞ –Ω–æ–¥–µ '{template_node}' —Å VMID {new_vmid}")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ –∫–ª–æ–Ω–∞: {e}")
                return False

            # –®–∞–≥ 2: –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –í–ú –≤ —à–∞–±–ª–æ–Ω
            print(f"üìã –®–∞–≥ 2: –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤—ã–≤–∞–µ–º –í–ú {new_vmid} –≤ —à–∞–±–ª–æ–Ω...")
            try:
                self.proxmox.nodes(template_node).qemu(new_vmid).template.post()
                print(f"‚úÖ –í–ú –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∞ –≤ —à–∞–±–ª–æ–Ω –Ω–∞ –Ω–æ–¥–µ '{template_node}'")
            except Exception as e:
                print(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –í–ú –≤ —à–∞–±–ª–æ–Ω: {e}")
                print("üí° –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –º–∏–≥—Ä–∞—Ü–∏–µ–π...")

            # –®–∞–≥ 3: –í—ã–ø–æ–ª–Ω–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é —à–∞–±–ª–æ–Ω–∞ –Ω–∞ –Ω—É–∂–Ω—É—é –Ω–æ–¥—É
            print(f"üìã –®–∞–≥ 3: –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é —à–∞–±–ª–æ–Ω–∞ –Ω–∞ –Ω–æ–¥—É '{target_node}'...")
            try:
                migration_params = {
                    'target': target_node,
                    'online': 1  # –û–Ω–ª–∞–π–Ω –º–∏–≥—Ä–∞—Ü–∏—è
                }

                print(f"   –ú–∏–≥—Ä–∞—Ü–∏—è —à–∞–±–ª–æ–Ω–∞ VMID {new_vmid} —Å '{template_node}' –Ω–∞ '{target_node}'...")
                task = self.proxmox.nodes(template_node).qemu(new_vmid).migrate.post(**migration_params)

                if not self._wait_for_task(task, template_node):
                    print("‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ —à–∞–±–ª–æ–Ω–∞")
                    # –ü–æ–ø—Ä–æ–±—É–µ–º –æ—á–∏—Å—Ç–∏—Ç—å –Ω–µ—É–¥–∞—á–Ω–æ –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —à–∞–±–ª–æ–Ω
                    try:
                        self.delete_vm(template_node, new_vmid)
                    except Exception:
                        pass
                    return False

                print(f"‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –Ω–∞ –Ω–æ–¥—É '{target_node}'")

            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
                # –ü–æ–ø—Ä–æ–±—É–µ–º –æ—á–∏—Å—Ç–∏—Ç—å –Ω–µ—É–¥–∞—á–Ω–æ –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —à–∞–±–ª–æ–Ω
                try:
                    self.delete_vm(template_node, new_vmid)
                except Exception:
                    pass
                return False

            # –®–∞–≥ 4: –í–µ—Ä–Ω—É—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–æ–≤–æ–º —à–∞–±–ª–æ–Ω–µ
            print(f"üìã –õ–æ–∫–∞–ª—å–Ω—ã–π —à–∞–±–ª–æ–Ω –≥–æ—Ç–æ–≤: VMID {new_vmid} –Ω–∞ –Ω–æ–¥–µ '{target_node}'")
            print(f"üí° –®–∞–±–ª–æ–Ω —Å–æ–∑–¥–∞–Ω —Å –ø–æ–º–æ—â—å—é –º–∏–≥—Ä–∞—Ü–∏–∏ —Å –Ω–æ–¥—ã '{template_node}' –∏ —Ä–∞–∑–º–µ—â–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ –Ω–∞ –Ω–æ–¥–µ '{target_node}'")
            print(f"üí° –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å: –ø–æ–ª–Ω—ã–π –∫–ª–æ–Ω ‚Üí —à–∞–±–ª–æ–Ω ‚Üí –º–∏–≥—Ä–∞—Ü–∏—è")

            return True

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞ —á–µ—Ä–µ–∑ –º–∏–≥—Ä–∞—Ü–∏—é: {e}")
            return False

    def _wait_for_task(self, task, node: str, timeout: int = 300) -> bool:
        import time
        start_time = time.time()
        while time.time() - start_time < timeout:
            try:
                status = self.proxmox.nodes(node).tasks(task).status.get()
                if status['status'] == 'stopped':
                    return status['exitstatus'] == 'OK'
                time.sleep(2)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏: {e}")
                return False
        print("–¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏")
        return False

    def ensure_vm_in_pool(self, pool: str, vmid: int) -> bool:
        try:
            try:
                self.proxmox.pools(pool).post(vms=str(vmid))
                return True
            except Exception as e:
                try:
                    self.proxmox.pools(pool).post(vmid=str(vmid))
                    return True
                except Exception:
                    if 'not implemented' in str(e).lower():
                        return True
                    return False
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –í–ú {vmid} –≤ –ø—É–ª {pool}: {e}")
            return False

    def delete_vm(self, node: str, vmid: int) -> bool:
        try:
            try:
                self.proxmox.nodes(node).qemu(vmid).status.stop.post()
            except Exception as e:
                if 'does not exist' in str(e).lower():
                    return True

            import time
            try:
                self.proxmox.nodes(node).qemu(vmid).delete()

                # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ —á—Ç–æ–±—ã Proxmox –æ–±–Ω–æ–≤–∏–ª —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                time.sleep(3)

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ª–∏ –í–ú —É–¥–∞–ª–µ–Ω–∞ (–º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏)
                for check_attempt in range(3):
                    try:
                        self.proxmox.nodes(node).qemu(vmid).status.get()
                        time.sleep(1)
                        if check_attempt == 2:  # –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞
                            return False
                    except Exception:
                        return True

            except Exception as e:
                if 'does not exist' in str(e).lower():
                    return True
                return False

        except Exception as e:
            return False

    def force_delete_vm(self, node: str, vmid: int) -> bool:
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –í–ú —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏"""
        try:
            import time

            print(f"üóëÔ∏è –£–¥–∞–ª—è–µ—Ç—Å—è –í–ú {vmid}")

            # –ü–æ–ø—ã—Ç–∫–∞ 1: –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ
            if self.delete_vm(node, vmid):
                print(f"‚úÖ –í–ú {vmid} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞")
                return True

            print(f"   ‚ö†Ô∏è –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã")

            # –ü–æ–ø—ã—Ç–∫–∞ 2: –£–¥–∞–ª–∏—Ç—å –±–µ–∑ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–Ω–∞—á–∞–ª–∞
            try:
                self.proxmox.nodes(node).qemu(vmid).delete()
                time.sleep(3)

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–¥–∞–ª–µ–Ω–∏–µ
                try:
                    self.proxmox.nodes(node).qemu(vmid).status.get()
                    print(f"‚ùå –í–ú {vmid} –≤—Å–µ –µ—â–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ø–æ—Å–ª–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è")
                except Exception:
                    print(f"‚úÖ –í–ú {vmid} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–º –º–µ—Ç–æ–¥–æ–º")
                    return True
            except Exception as e:
                print(f"‚ùå –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Ç–∞–∫–∂–µ –Ω–µ —É–¥–∞–ª–æ—Å—å: {e}")

            # –ü–æ–ø—ã—Ç–∫–∞ 3: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –í–ú –≤–æ–æ–±—â–µ
            try:
                vm_info = self.proxmox.nodes(node).qemu(vmid).status.get()

                # –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —É–Ω–∏—á—Ç–æ–∂–∏—Ç—å (destroy) –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
                try:
                    self.proxmox.nodes(node).qemu(vmid).status.destroy.post()
                    time.sleep(2)
                except Exception:
                    pass

                # –¢–µ–ø–µ—Ä—å –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —É–¥–∞–ª–∏—Ç—å
                self.proxmox.nodes(node).qemu(vmid).delete()
                time.sleep(3)

                # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
                try:
                    self.proxmox.nodes(node).qemu(vmid).status.get()
                    print(f"‚ùå –í–ú {vmid} –≤—Å–µ –µ—â–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ø–æ—Å–ª–µ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è")
                    return False
                except Exception:
                    print(f"‚úÖ –í–ú {vmid} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–º –º–µ—Ç–æ–¥–æ–º")
                    return True

            except Exception:
                print(f"‚úÖ –í–ú {vmid} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - —É–∂–µ —É–¥–∞–ª–µ–Ω–∞")
                return True

        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –í–ú {vmid}: {e}")
            return False

    def bridge_in_use(self, node: str, bridge_name: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–∏ bridge –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–º–∏ –º–∞—à–∏–Ω–∞–º–∏"""
        try:
            vms = self.proxmox.nodes(node).qemu.get()
            for vm in vms:
                vmid = int(vm.get('vmid', -1))
                if vmid < 0:
                    continue
                cfg = self.proxmox.nodes(node).qemu(vmid).config.get()
                for key, val in cfg.items():
                    if isinstance(val, str) and key.startswith('net') and f"bridge={bridge_name}" in val:
                        return True
            return False
        except Exception:
            return True

    def delete_bridge(self, node: str, bridge_name: str) -> bool:
        """–£–¥–∞–ª–∏—Ç—å –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π bridge"""
        try:
            if bridge_name == 'vmbr0':
                return False
            self.proxmox.nodes(node).network(bridge_name).delete()
            try:
                self.proxmox.nodes(node).network.reload.post()
            except Exception:
                pass
            return True
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è bridge {bridge_name} –Ω–∞ –Ω–æ–¥–µ {node}: {e}")
            return False

    def get_bridges_in_use(self, node: str) -> List[str]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö bridge –Ω–∞ –Ω–æ–¥–µ"""
        try:
            vms = self.proxmox.nodes(node).qemu.get()
            used_bridges = set()

            for vm in vms:
                vmid = int(vm.get('vmid', -1))
                if vmid < 0:
                    continue
                cfg = self.proxmox.nodes(node).qemu(vmid).config.get()
                for key, val in cfg.items():
                    if isinstance(val, str) and key.startswith('net'):
                        for part in val.split(','):
                            if part.startswith('bridge='):
                                bridge = part.split('=', 1)[1]
                                used_bridges.add(bridge)

            return list(used_bridges)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö bridge –Ω–∞ –Ω–æ–¥–µ {node}: {e}")
            return []

    def get_templates(self, node: str) -> List[dict]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω–æ–≤ –Ω–∞ –Ω–æ–¥–µ"""
        try:
            vms = self.proxmox.nodes(node).qemu.get()
            templates = []

            for vm in vms:
                vmid = int(vm.get('vmid', -1))
                if vmid < 0:
                    continue

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ VM —à–∞–±–ª–æ–Ω–æ–º
                try:
                    config = self.proxmox.nodes(node).qemu(vmid).config.get()
                    template = config.get('template', 0)

                    if template == 1:  # –≠—Ç–æ —à–∞–±–ª–æ–Ω
                        vm_name = config.get('name', f'VM-{vmid}')
                        templates.append({
                            'vmid': vmid,
                            'name': vm_name,
                            'node': node
                        })
                except Exception as e:
                    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö VM
                    continue

            return templates
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–æ–≤ –Ω–∞ –Ω–æ–¥–µ {node}: {e}")
            return []

    def force_delete_pool(self, pool: str) -> bool:
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –ø—É–ª–∞ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏"""
        try:
            import time

            # –ú–Ω–æ–≥–æ–∫—Ä–∞—Ç–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—É–ª–∞
            for attempt in range(3):
                try:
                    self.proxmox.pools(pool).delete()

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ª–∏ –ø—É–ª —É–¥–∞–ª–µ–Ω
                    time.sleep(1)
                    try:
                        self.proxmox.pools(pool).get()
                        if attempt == 2:  # –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞
                            return False
                    except Exception:
                        return True

                except Exception as e:
                    if 'not empty' in str(e).lower():
                        # –û—á–∏—Å—Ç–∫–∞ —á–ª–µ–Ω–æ–≤ –ø—É–ª–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π
                        try:
                            pool_info = self.proxmox.pools(pool).get()
                            members = pool_info.get('members', [])
                            for member in members:
                                if member.get('type') == 'qemu':
                                    vmid = int(member['vmid'])
                                    self.proxmox.pools(pool).delete(vms=str(vmid))
                        except Exception:
                            pass
                    elif attempt == 2:  # –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞
                        return False

                time.sleep(2)

            return True
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –ø—É–ª–∞ {pool}: {e}")
            return False
