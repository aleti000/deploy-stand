import proxmoxer
from typing import List, Any

class ProxmoxManager:
    def __init__(self):
        self.proxmox = None
    
    def connect(self, host: str, user: str, password: str = None, 
                token_name: str = None, token_value: str = None) -> bool:
        try:
            if token_name and token_value:
                self.proxmox = proxmoxer.ProxmoxAPI(host, user=user, token_name=token_name, token_value=token_value, verify_ssl=False)
            else:
                self.proxmox = proxmoxer.ProxmoxAPI(host, user=user, password=password, verify_ssl=False)
            self.proxmox.version.get()
            return True
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Proxmox: {e}")
            return False

    def get_nodes(self) -> List[str]:
        try:
            nodes = self.proxmox.nodes.get()
            return [node['node'] for node in nodes]
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –Ω–æ–¥: {e}")
            return []

    def get_vm_node(self, vmid: int) -> str:
        try:
            for node in self.get_nodes():
                vms = self.proxmox.nodes(node).qemu.get()
                for vm in vms:
                    if int(vm.get('vmid', -1)) == vmid:
                        return node
            return ""
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–æ–¥—ã –í–ú {vmid}: {e}")
            return ""

    def list_bridges(self, node: str) -> list[str]:
        try:
            nets = self.proxmox.nodes(node).network.get()
            return [n['iface'] for n in nets if n.get('type') == 'bridge']
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Ç–µ–π –Ω–∞ –Ω–æ–¥–µ {node}: {e}")
            return []

    def ensure_bridge(self, node: str, bridge_name: str) -> bool:
        try:
            if bridge_name == 'vmbr0':
                return True
            existing = self.list_bridges(node)
            if bridge_name in existing:
                return True
            self.proxmox.nodes(node).network.post(type='bridge', iface=bridge_name, autostart=1)
            try:
                self.proxmox.nodes(node).network.reload.post()
            except Exception:
                pass
            return True
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è bridge {bridge_name} –Ω–∞ –Ω–æ–¥–µ {node}: {e}")
            return False

    def next_free_bridge_name(self, node: str, start_from: int = 1000) -> str:
        try:
            existing = set(self.list_bridges(node))
            n = max(1000, start_from)
            while True:
                candidate = f"vmbr{n}"
                if candidate not in existing:
                    return candidate
                n += 1
        except Exception:
            return f"vmbr{max(1000, start_from)}"

    def get_next_vmid(self) -> int:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –¥–æ—Å—Ç—É–ø–Ω—ã–π VMID –∏–∑ –∫–ª–∞—Å—Ç–µ—Ä–∞"""
        try:
            return int(self.proxmox.cluster.nextid.get())
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª–µ–¥—É—é—â–µ–≥–æ VMID: {e}")
            return 1000

    def get_storages(self, node: str) -> List[str]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ö—Ä–∞–Ω–∏–ª–∏—â –Ω–∞ –Ω–æ–¥–µ"""
        try:
            storages = self.proxmox.nodes(node).storage.get()
            return [storage['storage'] for storage in storages if storage.get('enabled') == 1]
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ö—Ä–∞–Ω–∏–ª–∏—â –Ω–∞ –Ω–æ–¥–µ {node}: {e}")
            return []

    def find_common_storage(self, source_node: str, target_node: str) -> str:
        """–ù–∞–π—Ç–∏ –æ–±—â–µ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –º–µ–∂–¥—É –¥–≤—É–º—è –Ω–æ–¥–∞–º–∏"""
        try:
            source_storages = set(self.get_storages(source_node))
            target_storages = set(self.get_storages(target_node))

            print(f"üîç –ü–æ–∏—Å–∫ –æ–±—â–µ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –º–µ–∂–¥—É –Ω–æ–¥–∞–º–∏ {source_node} –∏ {target_node}")
            print(f"   –•—Ä–∞–Ω–∏–ª–∏—â–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞: {sorted(source_storages)}")
            print(f"   –•—Ä–∞–Ω–∏–ª–∏—â–∞ —Ü–µ–ª–∏: {sorted(target_storages)}")

            # –®–∞–≥ 1: –ù–∞–π—Ç–∏ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ —Ö—Ä–∞–Ω–∏–ª–∏—â (–æ–±—â–∏–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞)
            common = source_storages.intersection(target_storages)
            print(f"   –û–±—â–∏–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞: {sorted(common) if common else '–Ω–µ –Ω–∞–π–¥–µ–Ω—ã'}")

            if common:
                # –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º shared —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –¥–ª—è –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ–∂–¥—É –Ω–æ–¥–∞–º–∏
                for storage in common:
                    storage_info = self.get_storage_info(source_node, storage)
                    if storage_info:
                        content_types = storage_info.get('content', '').split(',')
                        is_shared = storage_info.get('shared') == 1
                        storage_type = storage_info.get('type', '')

                        print(f"   –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ '{storage}': shared={is_shared}, type={storage_type}, content={content_types}")

                        # –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º shared storage –¥–ª—è –º–µ–∂–Ω–æ–¥–æ–≤–æ–≥–æ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
                        if 'images' in content_types and is_shared:
                            print(f"   ‚úÖ –í—ã–±—Ä–∞–Ω–æ shared —Ö—Ä–∞–Ω–∏–ª–∏—â–µ '{storage}' –¥–ª—è –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ–∂–¥—É –Ω–æ–¥–∞–º–∏")
                            return storage

                # –ï—Å–ª–∏ –Ω–µ—Ç shared —Ö—Ä–∞–Ω–∏–ª–∏—â, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª—é–±—ã–µ –æ–±—â–∏–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –∫—Ä–æ–º–µ local-lvm –¥–ª—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤
                for storage in common:
                    if storage == 'local-lvm':
                        continue

                    storage_info = self.get_storage_info(source_node, storage)
                    if storage_info:
                        content_types = storage_info.get('content', '').split(',')
                        if 'images' in content_types:
                            print(f"   ‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–µ-shared —Ö—Ä–∞–Ω–∏–ª–∏—â–µ '{storage}' –¥–ª—è –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ–∂–¥—É –Ω–æ–¥–∞–º–∏")
                            return storage

            # –®–∞–≥ 2: –ï—Å–ª–∏ –Ω–µ—Ç –æ–±—â–∏—Ö —Ö—Ä–∞–Ω–∏–ª–∏—â, –ø–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ shared storage –Ω–∞ –ª—é–±–æ–π –Ω–æ–¥–µ
            all_shared_storages = set()
            for storage in source_storages:
                storage_info = self.get_storage_info(source_node, storage)
                if storage_info and storage_info.get('shared') == 1:
                    all_shared_storages.add(storage)

            for storage in target_storages:
                storage_info = self.get_storage_info(target_node, storage)
                if storage_info and storage_info.get('shared') == 1:
                    all_shared_storages.add(storage)

            if all_shared_storages:
                for storage in all_shared_storages:
                    storage_info = self.get_storage_info(source_node, storage)
                    if storage_info:
                        content_types = storage_info.get('content', '').split(',')
                        if 'images' in content_types:
                            print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–æ shared —Ö—Ä–∞–Ω–∏–ª–∏—â–µ '{storage}' –¥–æ—Å—Ç—É–ø–Ω–æ–µ –¥–ª—è –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")
                            return storage

            print(f"‚ùå –ü–æ–¥—Ö–æ–¥—è—â–µ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return ""
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –æ–±—â–µ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –º–µ–∂–¥—É {source_node} –∏ {target_node}: {e}")
            return ""

    def get_storage_info(self, node: str, storage: str) -> dict:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ"""
        try:
            storages = self.proxmox.nodes(node).storage.get()
            for s in storages:
                if s['storage'] == storage:
                    return s
            return {}
        except Exception:
            return {}

    def check_vmid_unique(self, vmid: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å VMID –≤–æ –≤—Å—ë–º –∫–ª–∞—Å—Ç–µ—Ä–µ"""
        try:
            for node in self.get_nodes():
                vms = self.proxmox.nodes(node).qemu.get()
                for vm in vms:
                    if int(vm.get('vmid', -1)) == int(vmid):
                        return False
            return True
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ VMID: {e}")
            return False

    def clone_vm(self, template_node: str, template_vmid: int,
                 target_node: str, new_vmid: int, name: str, pool: str | None, full_clone: bool = False) -> bool:
        try:
            clone_params = {'newid': new_vmid, 'name': name, 'target': target_node, 'full': 1 if full_clone else 0}

            # –ï—Å–ª–∏ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –º–µ–∂–¥—É —Ä–∞–∑–Ω—ã–º–∏ –Ω–æ–¥–∞–º–∏
            if template_node != target_node:
                if full_clone:
                    # –î–ª—è –ø–æ–ª–Ω–æ–≥–æ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏—â–µ–º –æ–±—â–µ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
                    common_storage = self.find_common_storage(template_node, target_node)
                    if common_storage:
                        clone_params['storage'] = common_storage
                        print(f"üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –æ–±—â–µ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ '{common_storage}' –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ–∂–¥—É –Ω–æ–¥–∞–º–∏ {template_node} -> {target_node}")
                    else:
                        print(f"‚ö†Ô∏è  –í–Ω–∏–º–∞–Ω–∏–µ: –ù–µ –Ω–∞–π–¥–µ–Ω–æ –æ–±—â–µ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –º–µ–∂–¥—É –Ω–æ–¥–∞–º–∏ {template_node} –∏ {target_node}")
                        print("   –ü–æ–ª–Ω–æ–µ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–∂–µ—Ç –∑–∞–≤–µ—Ä—à–∏—Ç—å—Å—è –Ω–µ—É–¥–∞—á–µ–π. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –æ–±—â–µ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ.")
                        return False
                else:
                    # –î–ª—è linked clone –º–µ–∂–¥—É —Ä–∞–∑–Ω—ã–º–∏ –Ω–æ–¥–∞–º–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞
                    print(f"üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —à–∞–±–ª–æ–Ω –Ω–∞ –Ω–æ–¥–µ '{target_node}' –¥–ª—è linked clone...")
                    return self._create_local_template_for_linked_clone(template_node, template_vmid, target_node, new_vmid, name, pool)
            else:
                # –î–ª—è –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ —Ç–æ–π –∂–µ –Ω–æ–¥–µ
                if not full_clone:
                    # –î–ª—è linked clone –Ω–∞ —Ç–æ–π –∂–µ –Ω–æ–¥–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º local-lvm
                    target_storages = self.get_storages(target_node)
                    if 'local-lvm' in target_storages:
                        clone_params['storage'] = 'local-lvm'
                        print(f"üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è local-lvm –¥–ª—è linked clone –Ω–∞ –Ω–æ–¥–µ '{target_node}'")
                    else:
                        print(f"‚ö†Ô∏è  local-lvm –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ –Ω–æ–¥–µ '{target_node}', –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")

            if pool:
                clone_params['pool'] = pool

            task = self.proxmox.nodes(template_node).qemu(template_vmid).clone.post(**clone_params)
            return self._wait_for_task(task, template_node)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –í–ú: {e}")
            return False

    def _create_local_template_for_linked_clone(self, template_node: str, template_vmid: int,
                                               target_node: str, new_vmid: int, name: str, pool: str | None) -> bool:
        """–°–æ–∑–¥–∞—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–π —à–∞–±–ª–æ–Ω –Ω–∞ —Ü–µ–ª–µ–≤–æ–π –Ω–æ–¥–µ –¥–ª—è linked clone"""
        try:
            # –®–∞–≥ 1: –ù–∞–π—Ç–∏ –æ–±—â–µ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            common_storage = self.find_common_storage(template_node, target_node)
            if not common_storage:
                print(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –æ–±—â–µ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –º–µ–∂–¥—É –Ω–æ–¥–∞–º–∏ {template_node} –∏ {target_node}")
                print("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –æ–±—â–µ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –º–µ–∂–¥—É –Ω–æ–¥–∞–º–∏ –≤ Proxmox.")
                return False

            # –®–∞–≥ 2: –°–æ–∑–¥–∞—Ç—å –ø–æ–ª–Ω—É—é –∫–æ–ø–∏—é –Ω–∞ —Ü–µ–ª–µ–≤—É—é –Ω–æ–¥—É
            template_name = f"template-{template_vmid}-{target_node}"
            clone_params = {
                'newid': new_vmid,
                'name': template_name,
                'target': target_node,
                'full': 1,
                'storage': common_storage
            }

            if pool:
                clone_params['pool'] = pool

            print(f"üìã –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—É—é –∫–æ–ø–∏—é —à–∞–±–ª–æ–Ω–∞ VMID {template_vmid} –Ω–∞ –Ω–æ–¥–µ '{target_node}'...")
            print(f"   –ò—Å–ø–æ–ª—å–∑—É–µ–º–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ: {common_storage}")
            try:
                task = self.proxmox.nodes(template_node).qemu(template_vmid).clone.post(**clone_params)
            except Exception as e:
                error_msg = str(e)
                if "can't clone to non-shared storage" in error_msg:
                    print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞: {error_msg}")
                    print(f"üí° –ü—Ä–æ–±–ª–µ–º–∞: –•—Ä–∞–Ω–∏–ª–∏—â–µ '{common_storage}' –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –æ–±—â–∏–º –º–µ–∂–¥—É –Ω–æ–¥–∞–º–∏")
                    print(f"üí° –†–µ—à–µ–Ω–∏—è:")
                    print(f"   1. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –æ–±—â–µ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ (NFS, Ceph, etc.) –º–µ–∂–¥—É –Ω–æ–¥–∞–º–∏ {template_node} –∏ {target_node}")
                    print(f"   2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–ª–Ω–æ–µ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–º–µ—Å—Ç–æ linked clone")
                    print(f"   3. –†–∞–∑–º–µ—Å—Ç–∏—Ç–µ —à–∞–±–ª–æ–Ω—ã –Ω–∞ –æ–¥–Ω–æ–π –Ω–æ–¥–µ")
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª–Ω–æ–π –∫–æ–ø–∏–∏ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞: {error_msg}")
                return False

            if not self._wait_for_task(task, template_node):
                print("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª–Ω–æ–π –∫–æ–ø–∏–∏ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞")
                return False

            # –®–∞–≥ 3: –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–Ω—É—é –í–ú –≤ —à–∞–±–ª–æ–Ω
            print(f"üîÑ –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤—ã–≤–∞–µ–º –í–ú {new_vmid} –≤ —à–∞–±–ª–æ–Ω...")
            try:
                self.proxmox.nodes(target_node).qemu(new_vmid).template.post()
                print(f"‚úÖ –®–∞–±–ª–æ–Ω —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –Ω–∞ –Ω–æ–¥–µ '{target_node}' —Å VMID {new_vmid}")
            except Exception as e:
                print(f"‚ö†Ô∏è  –í–ú —Å–æ–∑–¥–∞–Ω–∞, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ —à–∞–±–ª–æ–Ω: {e}")
                print("üí° –ú–æ–∂–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ —à–∞–±–ª–æ–Ω –≤—Ä—É—á–Ω—É—é –≤ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ Proxmox")

            # –®–∞–≥ 4: –í–µ—Ä–Ω—É—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–æ–≤–æ–º —à–∞–±–ª–æ–Ω–µ
            print(f"üìã –õ–æ–∫–∞–ª—å–Ω—ã–π —à–∞–±–ª–æ–Ω –≥–æ—Ç–æ–≤: VMID {new_vmid} –Ω–∞ –Ω–æ–¥–µ '{target_node}'")
            print(f"üí° –û–±–Ω–æ–≤–∏—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è: template_vmid={new_vmid}, template_node={target_node}")

            return True

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞: {e}")
            return False

    def _wait_for_task(self, task, node: str, timeout: int = 300) -> bool:
        import time
        start_time = time.time()
        while time.time() - start_time < timeout:
            try:
                status = self.proxmox.nodes(node).tasks(task).status.get()
                if status['status'] == 'stopped':
                    return status['exitstatus'] == 'OK'
                time.sleep(2)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏: {e}")
                return False
        print("–¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏")
        return False

    def ensure_vm_in_pool(self, pool: str, vmid: int) -> bool:
        try:
            try:
                self.proxmox.pools(pool).post(vms=str(vmid))
                return True
            except Exception as e:
                try:
                    self.proxmox.pools(pool).post(vmid=str(vmid))
                    return True
                except Exception:
                    if 'not implemented' in str(e).lower():
                        return True
                    return False
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –í–ú {vmid} –≤ –ø—É–ª {pool}: {e}")
            return False

    def delete_vm(self, node: str, vmid: int) -> bool:
        try:
            try:
                self.proxmox.nodes(node).qemu(vmid).status.stop.post()
            except Exception:
                pass
            try:
                self.proxmox.nodes(node).qemu(vmid).delete()
            except Exception as e:
                if 'does not exist' in str(e).lower():
                    return True
                raise
            return True
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –í–ú {vmid} –Ω–∞ –Ω–æ–¥–µ {node}: {e}")
            return False

    def bridge_in_use(self, node: str, bridge_name: str) -> bool:
        try:
            vms = self.proxmox.nodes(node).qemu.get()
            for vm in vms:
                vmid = int(vm.get('vmid', -1))
                if vmid < 0:
                    continue
                cfg = self.proxmox.nodes(node).qemu(vmid).config.get()
                for key, val in cfg.items():
                    if isinstance(val, str) and key.startswith('net') and f"bridge={bridge_name}" in val:
                        return True
            return False
        except Exception:
            return True

    def delete_bridge(self, node: str, bridge_name: str) -> bool:
        try:
            if bridge_name == 'vmbr0':
                return False
            self.proxmox.nodes(node).network(bridge_name).delete()
            try:
                self.proxmox.nodes(node).network.reload.post()
            except Exception:
                pass
            return True
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è bridge {bridge_name} –Ω–∞ –Ω–æ–¥–µ {node}: {e}")
            return False
