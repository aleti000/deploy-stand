import random
import string
from typing import Tuple
from app.utils.logger import logger

class UserManager:
    def __init__(self, proxmox_manager):
        self.proxmox = proxmox_manager

    def create_user_and_pool(self, username: str) -> Tuple[bool, str]:
        try:
            password = self._generate_password()
            try:
                self.proxmox.proxmox.access.users(username).get()
                user_exists = True
            except Exception:
                user_exists = False
            if not user_exists:
                self.proxmox.proxmox.access.users.post(userid=username, password=password, enable=1)
            pool_name = username.split('@')[0]
            try:
                self.proxmox.proxmox.pools.post(poolid=pool_name)
            except Exception:
                pass
            acl_params = {'path': f'/pool/{pool_name}', 'roles': 'PVEVMAdmin', 'users': username}
            self.proxmox.proxmox.access.acl.put(**acl_params)
            return True, password
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è/–ø—É–ª–∞: {e}")
            return False, ""

    def _generate_password(self) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (8 —Ü–∏—Ñ—Ä)"""
        random_part = ''.join(random.choices(string.digits, k=8))
        return random_part

    def delete_user_resources(self, username: str) -> bool:
        """–£–¥–∞–ª–∏—Ç—å —Ä–µ—Å—É—Ä—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–æ–ª–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
        try:
            logger.info(f"üóëÔ∏è –ù–∞—á–∏–Ω–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {username}")
            pool_name = username.split('@')[0]

            # –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            logger.debug(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}")
            user_exists = self._check_user_exists(username)

            if not user_exists:
                logger.warning(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                return True

            # –®–∞–≥ 2: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ –ø—É–ª–∞
            logger.debug(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø—É–ª–∞ {pool_name}")
            pool_exists = self._check_pool_exists(pool_name)

            if not pool_exists:
                # –ü—É–ª–∞ –Ω–µ—Ç - –ø—Ä–æ—Å—Ç–æ —É–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                logger.info(f"üìã –ü—É–ª {pool_name} –Ω–µ –Ω–∞–π–¥–µ–Ω - —É–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                self._delete_user_only(username)
                return True

            # –®–∞–≥ 3: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ VMs –≤ –ø—É–ª–µ
            logger.debug(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ VMs –≤ –ø—É–ª–µ {pool_name}")
            pool_vms = self._get_pool_vms(pool_name)

            if not pool_vms:
                # VMs –Ω–µ—Ç - —É–¥–∞–ª—è–µ–º –ø—É–ª –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                logger.info(f"üìã VMs –≤ –ø—É–ª–µ {pool_name} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã - —É–¥–∞–ª—è–µ–º –ø—É–ª –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                self._delete_pool_and_user(pool_name, username)
                return True

            # –®–∞–≥ 4: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ—Ç–µ–≤—ã–µ bridge, –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ VMs
            logger.debug(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Ç–µ–≤—ã–µ bridge –¥–ª—è VMs –≤ –ø—É–ª–µ {pool_name}")
            bridge_usage = self._check_vm_bridges_usage(pool_vms)

            if not bridge_usage:
                # –ù–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö bridge - —É–¥–∞–ª—è–µ–º VMs, –ø—É–ª, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                logger.info(f"üìã –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ bridge –Ω–µ –Ω–∞–π–¥–µ–Ω—ã - —É–¥–∞–ª—è–µ–º VMs, –ø—É–ª, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                self._delete_vms_pool_user(pool_vms, pool_name, username)
                return True

            # –®–∞–≥ 5: –£–¥–∞–ª–∏—Ç—å bridge, VMs, –ø—É–ª, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            logger.info(f"üìã –ù–∞–π–¥–µ–Ω—ã —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ bridge - —É–¥–∞–ª—è–µ–º bridge, VMs, –ø—É–ª, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            self._delete_bridges_vms_pool_user(bridge_usage, pool_vms, pool_name, username)
            return True

        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}: {e}")
            return False

    def delete_user_resources_batch(self, usernames: list) -> dict:
        """–£–¥–∞–ª–∏—Ç—å —Ä–µ—Å—É—Ä—Å—ã —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π –¥–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        logger.info(f"üóëÔ∏è –ù–∞—á–∏–Ω–∞–µ–º –ø–∞–∫–µ—Ç–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤ {len(usernames)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        results = {
            'successful': [],
            'failed': [],
            'skipped': []  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –≤ —Å–∏—Å—Ç–µ–º–µ
        }

        for username in usernames:
            try:
                logger.debug(f"üìã –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {username}")

                # –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user_exists = self._check_user_exists(username)

                if not user_exists:
                    logger.debug(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏")
                    results['skipped'].append(username)
                    continue

                # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –≤—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–ª–Ω—É—é –æ—á–∏—Å—Ç–∫—É
                if self.delete_user_resources(username):
                    results['successful'].append(username)
                    logger.success(f"‚úÖ –†–µ—Å—É—Ä—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã")
                else:
                    results['failed'].append(username)
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}")

            except Exception as e:
                logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}: {e}")
                results['failed'].append(username)

        # –í—ã–≤–æ–¥ –∏—Ç–æ–≥–æ–≤ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —É—Å–ø–µ—à–Ω—ã–µ —É–¥–∞–ª–µ–Ω–∏—è –∏–ª–∏ –æ—à–∏–±–∫–∏
        if results['successful'] or results['failed']:
            logger.info(f"üìä –ò—Ç–æ–≥–∏ –ø–∞–∫–µ—Ç–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è:")
            if results['successful']:
                logger.info(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ: {len(results['successful'])} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            if results['failed']:
                logger.info(f"   ‚ùå –û—à–∏–±–∫–∏: {len(results['failed'])} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            if results['skipped']:
                logger.info(f"   ‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ: {len(results['skipped'])} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")

            if results['failed']:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ä–µ—Å—É—Ä—Å—ã: {', '.join(results['failed'])}")

        return results

    def _check_user_exists(self, username: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            self.proxmox.proxmox.access.users(username).get()
            return True
        except Exception:
            return False

    def _check_pool_exists(self, pool_name: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø—É–ª–∞"""
        try:
            self.proxmox.proxmox.pools(pool_name).get()
            return True
        except Exception:
            return False

    def _get_pool_vms(self, pool_name: str) -> dict:
        """–ü–æ–ª—É—á–∏—Ç—å VMs –≤ –ø—É–ª–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –Ω–æ–¥–∞—Ö"""
        try:
            pool_info = self.proxmox.proxmox.pools(pool_name).get()
            members = pool_info.get('members', [])
            vm_nodes = {}

            for member in members:
                if member.get('type') == 'qemu':
                    vmid = int(member['vmid'])
                    node = member.get('node') or self.proxmox.get_vm_node(vmid)
                    if node:
                        vm_nodes[vmid] = node

            return vm_nodes
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è VMs –∏–∑ –ø—É–ª–∞ {pool_name}: {e}")
            return {}

    def _check_vm_bridges_usage(self, vm_nodes: dict) -> dict:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö bridge VMs"""
        bridge_usage = {}

        for vmid, node in vm_nodes.items():
            try:
                # –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é VM
                vm_config = self.proxmox.proxmox.nodes(node).qemu(vmid).config.get()

                # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–∞–∂–¥—ã–π —Å–µ—Ç–µ–≤–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
                for key, value in vm_config.items():
                    if key.startswith('net') and isinstance(value, str):
                        # –†–∞–∑–±–æ—Ä —Å—Ç—Ä–æ–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–µ—Ç–∏
                        parts = value.split(',')
                        for part in parts:
                            if part.startswith('bridge=') and not part.startswith('bridge=vmbr0'):
                                bridge_name = part.split('=', 1)[1]
                                if bridge_name not in bridge_usage:
                                    bridge_usage[bridge_name] = []
                                bridge_usage[bridge_name].append((vmid, node))

            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é VM {vmid} –Ω–∞ –Ω–æ–¥–µ {node}: {e}")

        return bridge_usage

    def _delete_user_only(self, username: str) -> bool:
        """–£–¥–∞–ª–∏—Ç—å —Ç–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            logger.info(f"üóëÔ∏è –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}")
            self.proxmox.proxmox.access.users(username).delete()
            logger.success(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} —É–¥–∞–ª–µ–Ω")
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}: {e}")
            return False

    def _delete_pool_and_user(self, pool_name: str, username: str) -> bool:
        """–£–¥–∞–ª–∏—Ç—å –ø—É–ª –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            logger.info(f"üóëÔ∏è –£–¥–∞–ª—è–µ–º –ø—É–ª {pool_name} –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}")

            # –£–¥–∞–ª—è–µ–º –ø—É–ª
            if not self.proxmox.force_delete_pool(pool_name):
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø—É–ª {pool_name}")

            # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            try:
                self.proxmox.proxmox.access.users(username).delete()
                logger.success(f"‚úÖ –ü—É–ª {pool_name} –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} —É–¥–∞–ª–µ–Ω—ã")
                return True
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}: {e}")
                return False

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—É–ª–∞ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            return False

    def _delete_vms_pool_user(self, vm_nodes: dict, pool_name: str, username: str) -> bool:
        """–£–¥–∞–ª–∏—Ç—å VMs, –ø—É–ª –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            logger.info(f"üóëÔ∏è –£–¥–∞–ª—è–µ–º VMs, –ø—É–ª {pool_name} –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}")

            # –£–¥–∞–ª—è–µ–º –≤—Å–µ VMs
            for vmid, node in vm_nodes.items():
                logger.debug(f"   –£–¥–∞–ª—è–µ–º VM {vmid} –Ω–∞ –Ω–æ–¥–µ {node}")
                if not self.proxmox.force_delete_vm(node, vmid):
                    logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å VM {vmid} –Ω–∞ –Ω–æ–¥–µ {node}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ VMs —É–¥–∞–ª–µ–Ω—ã
            remaining_vms = self._get_pool_vms(pool_name)
            if remaining_vms:
                logger.error(f"‚ùå –ù–µ –≤—Å–µ VMs —É–¥–∞–ª–µ–Ω—ã –∏–∑ –ø—É–ª–∞ {pool_name}: {list(remaining_vms.keys())}")
                return False

            # –£–¥–∞–ª—è–µ–º –ø—É–ª –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            return self._delete_pool_and_user(pool_name, username)

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è VMs, –ø—É–ª–∞ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            return False

    def _delete_bridges_vms_pool_user(self, bridge_usage: dict, vm_nodes: dict, pool_name: str, username: str) -> bool:
        """–£–¥–∞–ª–∏—Ç—å bridge, VMs, –ø—É–ª –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            logger.info(f"üóëÔ∏è –£–¥–∞–ª—è–µ–º bridge, VMs, –ø—É–ª {pool_name} –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}")

            # –£–¥–∞–ª—è–µ–º –≤—Å–µ VMs —Å–Ω–∞—á–∞–ª–∞
            for vmid, node in vm_nodes.items():
                logger.debug(f"   –£–¥–∞–ª—è–µ–º VM {vmid} –Ω–∞ –Ω–æ–¥–µ {node}")
                if not self.proxmox.force_delete_vm(node, vmid):
                    logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å VM {vmid} –Ω–∞ –Ω–æ–¥–µ {node}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ VMs —É–¥–∞–ª–µ–Ω—ã
            remaining_vms = self._get_pool_vms(pool_name)
            if remaining_vms:
                logger.error(f"‚ùå –ù–µ –≤—Å–µ VMs —É–¥–∞–ª–µ–Ω—ã –∏–∑ –ø—É–ª–∞ {pool_name}: {list(remaining_vms.keys())}")
                return False

            # –£–¥–∞–ª—è–µ–º –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ bridge
            for bridge_name in bridge_usage.keys():
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–∏ bridge –¥—Ä—É–≥–∏–º–∏ VMs
                for node in self.proxmox.get_nodes():
                    if not self.proxmox.bridge_in_use(node, bridge_name):
                        logger.debug(f"   –£–¥–∞–ª—è–µ–º –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π bridge {bridge_name} –Ω–∞ –Ω–æ–¥–µ {node}")
                        self.proxmox.delete_bridge(node, bridge_name)

            # –£–¥–∞–ª—è–µ–º –ø—É–ª –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            return self._delete_pool_and_user(pool_name, username)

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è bridge, VMs, –ø—É–ª–∞ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            return False
