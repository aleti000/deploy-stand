from typing import List, Dict, Any
from app.core.proxmox_manager import ProxmoxManager
from app.core.user_manager import UserManager
from app.core.template_manager import TemplateManager
import random
from app.utils.logger import logger

class VMDeployer:
    def __init__(self, proxmox_manager: ProxmoxManager):
        self.proxmox = proxmox_manager
        self.user_manager = UserManager(proxmox_manager)
        self.template_manager = TemplateManager(proxmox_manager)
        self.alias_to_vmbr: dict[str, str] = {}
    
    def _allocate_vmbr_for_alias_and_pool(self, node: str, alias: str, pool: str) -> str:
        if alias == 'vmbr0':
            return 'vmbr0'
        key = f"{node}:{pool}:{alias}"
        if key in self.alias_to_vmbr:
            return self.alias_to_vmbr[key]
        vmbr = self.proxmox.next_free_bridge_name(node, start_from=1000)
        self.alias_to_vmbr[key] = vmbr
        return vmbr
    
    def deploy_configuration(self, users: List[str], config: dict[str, Any],
                           node_selection: str = None, target_node: str = None) -> dict[str, str]:
        logger.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ...")

        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤
        templates_prepared = self._prepare_all_templates(config, node_selection, target_node)
        if not templates_prepared:
            logger.error("–û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ —à–∞–±–ª–æ–Ω–æ–≤")
            return {}

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
        existing_vms_check = self._check_existing_vms_in_pools(users, config)
        if not existing_vms_check:
            logger.error("–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã. –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
            return {}

        # –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ VMs
        results = {}
        nodes = self.proxmox.get_nodes()
        if not nodes:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –Ω–æ–¥!")
            return {}

        node_index = 0
        for user in users:
            logger.debug(f"–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user}")
            created_user, password = self.user_manager.create_user_and_pool(user)
            if not created_user:
                logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user}")
                continue
            results[user] = password

            user_node = self._select_node_for_user(nodes, node_selection, target_node)
            if not user_node:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–±—Ä–∞—Ç—å –Ω–æ–¥—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user}")
                continue
            if node_selection == 'balanced' and len(nodes) > 1:
                user_node = nodes[node_index % len(nodes)]
                node_index += 1

            pool_name = user.split('@')[0]
            self._create_user_vms(config, user_node, pool_name)

        # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        if results:
            print(f"\n‚úÖ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –¥–ª—è {len(results)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            print("–£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:")
            for user, password in results.items():
                print(f"  {user} : {password}")
        else:
            print("‚ùå –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã
        if self.template_manager.local_templates:
            self.template_manager.save_local_templates_to_config()

        return results
    
    def _select_node_for_user(self, nodes: List[str], selection: str, target_node: str) -> str:
        if len(nodes) == 1:
            return nodes[0]
        if selection == "specific" and target_node:
            return target_node
        elif selection == "balanced":
            return random.choice(nodes)
        else:
            return None
    
    def _create_user_vms(self, config: dict[str, Any], target_node: str, pool: str):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö –º–∞—à–∏–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        for machine_config in config.get('machines', []):
            device_type = machine_config.get('device_type', 'linux')
            new_vmid = self.proxmox.get_next_vmid()
            while not self.proxmox.check_vmid_unique(new_vmid):
                new_vmid += 1

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —à–∞–±–ª–æ–Ω–∞
            template_node = machine_config.get('template_node', target_node)
            original_template_vmid = machine_config['template_vmid']

            # –ü–æ–ª—É—á–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —à–∞–±–ª–æ–Ω –¥–ª—è —Ü–µ–ª–µ–≤–æ–π –Ω–æ–¥—ã
            actual_template_vmid = self.template_manager.get_template_for_node(original_template_vmid, target_node)

            if template_node != target_node and actual_template_vmid is None:
                # Fallback: –ª–æ–∫–∞–ª—å–Ω—ã–π —à–∞–±–ª–æ–Ω –¥–æ–ª–∂–µ–Ω –±—ã–ª –±—ã—Ç—å –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω –∑–∞—Ä–∞–Ω–µ–µ
                logger.error(f"–õ–æ–∫–∞–ª—å–Ω—ã–π —à–∞–±–ª–æ–Ω –¥–ª—è VMID {original_template_vmid} –Ω–∞ –Ω–æ–¥–µ '{target_node}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
                logger.warning("–ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞ –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞...")
                actual_template_vmid = original_template_vmid
                actual_template_node = template_node
                machine_config['full_clone'] = True
                logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —à–∞–±–ª–æ–Ω –¥–ª—è –í–ú {machine_config['name']}")
            else:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —à–∞–±–ª–æ–Ω –∏–ª–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –Ω–∞ —Ç–æ–π –∂–µ –Ω–æ–¥–µ
                actual_template_vmid = actual_template_vmid if actual_template_vmid is not None else original_template_vmid
                actual_template_node = target_node if actual_template_vmid != original_template_vmid else template_node

            logger.debug(f"–°–æ–∑–¥–∞–µ–º –í–ú –∏–∑ —à–∞–±–ª–æ–Ω–∞ VMID {actual_template_vmid} –Ω–∞ –Ω–æ–¥–µ '{target_node}'")

            # –°–æ–∑–¥–∞–µ–º –í–ú –∏–∑ —à–∞–±–ª–æ–Ω–∞
            clone_ok = self.proxmox.clone_vm(
                template_node=actual_template_node,
                template_vmid=actual_template_vmid,
                target_node=target_node,
                new_vmid=new_vmid,
                name=machine_config['name'],
                pool=pool,
                full_clone=machine_config.get('full_clone', False)
            )

            if clone_ok:
                logger.success(f"–£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –í–ú {emphasize(machine_config['name'])} (VMID: {emphasize(str(new_vmid))})")
                self._configure_network(new_vmid, target_node, machine_config['networks'], pool, device_type)
                self.proxmox.ensure_vm_in_pool(pool, new_vmid)
            else:
                logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –í–ú {machine_config['name']}")
                if actual_template_node != target_node:
                    logger.warning(f"–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–∫–∞–ª—å–Ω—ã–π —à–∞–±–ª–æ–Ω VMID {actual_template_vmid} –Ω–∞ –Ω–æ–¥–µ '{actual_template_node}'")
                else:
                    logger.warning("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —à–∞–±–ª–æ–Ω –¥–æ—Å—Ç—É–ø–µ–Ω –∏ –Ω–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω.")
    
    def _configure_network(self, vmid: int, node: str, networks: List[dict], pool: str, device_type: str = 'linux'):
        next_index_offset = 0
        mgmt_created = False
        if device_type == 'ecorouter':
            try:
                mgmt_net_id = 'net0'
                mgmt_vmbr = 'vmbr0'
                mac = self._generate_ecorouter_mac()
                value = f'model=vmxnet3,bridge={mgmt_vmbr},macaddr={mac},link_down=1'
                self.proxmox.proxmox.nodes(node).qemu(vmid).config.post(**{mgmt_net_id: value, f'{mgmt_net_id}_comments': 'Management Network: vmbr0'})
                logger.success(f"  –°–æ–∑–¥–∞–Ω —É–ø—Ä–∞–≤–ª—è—é—â–∏–π –∞–¥–∞–ø—Ç–µ—Ä {emphasize(mgmt_net_id)} (ecorouter) –Ω–∞ bridge {emphasize(mgmt_vmbr)}")
                mgmt_created = True
            except Exception as e:
                print(f"  –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —É–ø—Ä–∞–≤–ª—è—é—â–µ–≥–æ –∞–¥–∞–ø—Ç–µ—Ä–∞ net0 (—Å–µ—Ç—å: vmbr0): {e}")
            next_index_offset = 1
        for idx, network in enumerate(networks):
            try:
                i = idx + next_index_offset
                net_id = f"net{i}"
                alias = network['bridge']
                vmbr = self._allocate_vmbr_for_alias_and_pool(node, alias, pool)
                self.proxmox.ensure_bridge(node, vmbr)
                if device_type == 'ecorouter':
                    mac = self._generate_ecorouter_mac()
                    value = f'model=vmxnet3,bridge={vmbr},macaddr={mac}'
                else:
                    value = f'model=virtio,bridge={vmbr},firewall=1'
                config_params = { f'{net_id}': value, f'{net_id}_comments': f'Network: {alias}' }
                self.proxmox.proxmox.nodes(node).qemu(vmid).config.post(**config_params)
                logger.success(f"  –ù–∞—Å—Ç—Ä–æ–µ–Ω —Å–µ—Ç–µ–≤–æ–π –∞–¥–∞–ø—Ç–µ—Ä {emphasize(net_id)} –Ω–∞ bridge {emphasize(vmbr)} (—Å–µ—Ç—å: {emphasize(alias)})")
            except Exception as e:
                print(f"  –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ç–µ–≤–æ–≥–æ –∞–¥–∞–ø—Ç–µ—Ä–∞ {i} (—Å–µ—Ç—å: {emphasize(alias)}): {e}")
        if device_type == 'ecorouter' and not mgmt_created:
            try:
                mgmt_net_id = 'net0'
                mgmt_vmbr = 'vmbr0'
                mac = self._generate_ecorouter_mac()
                value = f'model=vmxnet3,bridge={mgmt_vmbr},macaddr={mac},link_down=1'
                self.proxmox.proxmox.nodes(node).qemu(vmid).config.post(**{mgmt_net_id: value, f'{mgmt_net_id}_comments': 'Management Network: vmbr0'})
                logger.success(f"  –ü–æ–≤—Ç–æ—Ä–Ω–æ —Å–æ–∑–¥–∞–Ω —É–ø—Ä–∞–≤–ª—è—é—â–∏–π –∞–¥–∞–ø—Ç–µ—Ä {emphasize(mgmt_net_id)} (ecorouter) –Ω–∞ bridge {emphasize(mgmt_vmbr)}")
            except Exception as e:
                print(f"  –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —É–ø—Ä–∞–≤–ª—è—é—â–∏–π –∞–¥–∞–ø—Ç–µ—Ä net0 –ø–æ–≤—Ç–æ—Ä–Ω–æ (—Å–µ—Ç—å: vmbr0): {e}")
    
    def _generate_ecorouter_mac(self) -> str:
        tail = [random.randint(0x00, 0xFF) for _ in range(2)]
        return '1C:87:76:40:{:02X}:{:02X}'.format(tail[0], tail[1])





    def _prepare_all_templates(self, config: dict[str, Any], node_selection: str = None, target_node: str = None) -> bool:
        """–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤ –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ª–æ–∫–∞–ª—å–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            logger.debug("–ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ª–æ–∫–∞–ª—å–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
            self.template_manager.load_local_templates_from_config()

            nodes = self.proxmox.get_nodes()
            if not nodes:
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –Ω–æ–¥!")
                return False

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–ª–µ–≤—ã–µ –Ω–æ–¥—ã –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ —à–∞–±–ª–æ–Ω–æ–≤
            target_nodes = []
            if node_selection == "specific" and target_node:
                target_nodes = [target_node]
            elif node_selection == "balanced":
                target_nodes = nodes
            else:
                # –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω —Ä–µ–∂–∏–º, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—É—é –Ω–æ–¥—É –∫–∞–∫ —Ü–µ–ª–µ–≤—É—é
                target_nodes = [nodes[0]]

            logger.debug(f"–¶–µ–ª–µ–≤—ã–µ –Ω–æ–¥—ã –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ —à–∞–±–ª–æ–Ω–æ–≤: {target_nodes}")

            # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ —à–∞–±–ª–æ–Ω–æ–≤ –∏ —Ü–µ–ª–µ–≤—ã—Ö –Ω–æ–¥
            required_templates = {}  # key: "original_vmid:target_node", value: template_info

            for machine_config in config.get('machines', []):
                original_template_vmid = machine_config['template_vmid']
                template_node = machine_config.get('template_node', target_nodes[0])

                # –î–ª—è –∫–∞–∂–¥–æ–π —Ü–µ–ª–µ–≤–æ–π –Ω–æ–¥—ã –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞
                for node in target_nodes:
                    template_key = f"{original_template_vmid}:{node}"

                    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ —à–∞–±–ª–æ–Ω —É–∂–µ –Ω–∞ —Ç–æ–π –∂–µ –Ω–æ–¥–µ
                    if template_node == node:
                        continue

                    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–π —à–∞–±–ª–æ–Ω
                    if template_key in self.template_manager.local_templates:
                        logger.debug(f"–õ–æ–∫–∞–ª—å–Ω—ã–π —à–∞–±–ª–æ–Ω —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –¥–ª—è {template_key}")
                        continue

                    # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤
                    required_templates[template_key] = {
                        'original_vmid': original_template_vmid,
                        'template_node': template_node,
                        'target_node': node,
                        'machine_config': machine_config
                    }

            if not required_templates:
                logger.info("–í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —à–∞–±–ª–æ–Ω—ã —É–∂–µ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã")
                return True

            logger.info(f"–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å {len(required_templates)} –ª–æ–∫–∞–ª—å–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤...")

            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Ç—Ä–µ–±—É–µ–º—ã–π —à–∞–±–ª–æ–Ω
            for template_key, template_info in required_templates.items():
                logger.debug(f"–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —à–∞–±–ª–æ–Ω–∞: {template_key}")
                original_vmid = template_info['original_vmid']
                template_node = template_info['template_node']
                target_node = template_info['target_node']

                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π VMID –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞
                temp_vmid = self.proxmox.get_next_vmid()
                while not self.proxmox.check_vmid_unique(temp_vmid):
                    temp_vmid += 1

                logger.debug(f"–°–æ–∑–¥–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —à–∞–±–ª–æ–Ω VMID {temp_vmid} –Ω–∞ –Ω–æ–¥–µ '{target_node}' –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞ {original_vmid}...")

                template_create_ok = self.proxmox._create_local_template_via_migration(
                    template_node=template_node,
                    template_vmid=original_vmid,
                    target_node=target_node,
                    new_vmid=temp_vmid,
                    name=f"template-{original_vmid}-{target_node}",
                    pool=None
                )

                if template_create_ok:
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–æ–∫–∞–ª—å–Ω–æ–º —à–∞–±–ª–æ–Ω–µ
                    self.template_manager.local_templates[template_key] = temp_vmid
                    logger.debug(f"–õ–æ–∫–∞–ª—å–Ω—ã–π —à–∞–±–ª–æ–Ω –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω: VMID {temp_vmid} –Ω–∞ –Ω–æ–¥–µ '{target_node}'")
                else:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–π —à–∞–±–ª–æ–Ω –¥–ª—è {template_key}")
                    return False

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            if self.template_manager.local_templates:
                logger.debug(f"–°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ {len(self.template_manager.local_templates)} –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã—Ö —à–∞–±–ª–æ–Ω–∞—Ö –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é...")
                self.template_manager.save_local_templates_to_config()

            logger.success("–§–∞–∑–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ —à–∞–±–ª–æ–Ω–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            return True

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ —à–∞–±–ª–æ–Ω–æ–≤: {e}")
            return False

    def _check_existing_vms_in_pools(self, users: List[str], config: dict[str, Any]) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –º–∞—à–∏–Ω –≤ –ø—É–ª–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        try:
            logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –º–∞—à–∏–Ω –≤ –ø—É–ª–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")

            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –º–∞—à–∏–Ω –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            required_machines = {}
            for machine_config in config.get('machines', []):
                machine_name = machine_config['name']
                required_machines[machine_name] = []

                # –î–ª—è –∫–∞–∂–¥–æ–π –º–∞—à–∏–Ω—ã —Å–æ–±–∏—Ä–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –µ–µ –ø–æ–ª—É—á–∞—Ç
                for user in users:
                    pool_name = user.split('@')[0]
                    required_machines[machine_name].append(pool_name)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –ø—É–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            for user in users:
                pool_name = user.split('@')[0]

                try:
                    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—É–ª–µ
                    pool_info = self.proxmox.proxmox.pools(pool_name).get()
                    members = pool_info.get('members', [])

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é VM –≤ –ø—É–ª–µ
                    for member in members:
                        if member.get('type') == 'qemu':
                            vmid = int(member['vmid'])
                            node = member.get('node') or self.proxmox.get_vm_node(vmid)

                            if node:
                                try:
                                    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é VM –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–µ–Ω–∏
                                    vm_config = self.proxmox.proxmox.nodes(node).qemu(vmid).config.get()
                                    vm_name = vm_config.get('name', f'VM-{vmid}')

                                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É–µ—Ç –ª–∏ –∏–º—è —Å —Ç—Ä–µ–±—É–µ–º—ã–º–∏ –º–∞—à–∏–Ω–∞–º–∏
                                    for required_name, user_pools in required_machines.items():
                                        if vm_name == required_name and pool_name in user_pools:
                                            print(f"‚ùå –ö–æ–Ω—Ñ–ª–∏–∫—Ç –æ–±–Ω–∞—Ä—É–∂–µ–Ω!")
                                            print(f"   –ü—É–ª: {emphasize(pool_name)}")
                                            print(f"   –°—É—â–µ—Å—Ç–≤—É—é—â–∞—è VM: {emphasize(vm_name)} (VMID: {vmid})")
                                            print(f"   –¢—Ä–µ–±—É–µ–º–∞—è VM: {emphasize(required_name)}")
                                            print(f"üí° –£–¥–∞–ª–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é VM –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç–µ –∏–º—è –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
                                            return False

                                except Exception as e:
                                    print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é VM {vmid}: {e}")

                except Exception:
                    # –ü—É–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                    continue

            logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ö–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ.")
            return True

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –º–∞—à–∏–Ω: {e}")
            return False
