from typing import List, Any
from app.core.proxmox_manager import ProxmoxManager
from app.core.user_manager import UserManager
import random
import hashlib
from app.utils.console import warn, success, title, emphasize

class VMDeployer:
    def __init__(self, proxmox_manager: ProxmoxManager):
        self.proxmox = proxmox_manager
        self.user_manager = UserManager(proxmox_manager)
        self.alias_to_vmbr: dict[str, str] = {}
        self.local_templates: dict[str, int] = {}  # –ö—ç—à –¥–ª—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤: –∫–ª—é—á "–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π_vmid:target_node"
    
    def _allocate_vmbr_for_alias_and_pool(self, node: str, alias: str, pool: str) -> str:
        if alias == 'vmbr0':
            return 'vmbr0'
        key = f"{node}:{pool}:{alias}"
        if key in self.alias_to_vmbr:
            return self.alias_to_vmbr[key]
        vmbr = self.proxmox.next_free_bridge_name(node, start_from=1000)
        self.alias_to_vmbr[key] = vmbr
        return vmbr
    
    def deploy_configuration(self, users: List[str], config: dict[str, Any],
                           node_selection: str = None, target_node: str = None) -> dict[str, str]:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ª–æ–∫–∞–ª—å–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        self.load_local_templates_from_config()

        results = {}
        nodes = self.proxmox.get_nodes()
        if not nodes:
            print("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –Ω–æ–¥!")
            return {}
        node_index = 0
        for user in users:
            title(f"\n--- –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {emphasize(user)} ---")
            created_user, password = self.user_manager.create_user_and_pool(user)
            if not created_user:
                print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user}")
                continue
            results[user] = password
            user_node = self._select_node_for_user(nodes, node_selection, target_node)
            if not user_node:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–±—Ä–∞—Ç—å –Ω–æ–¥—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user}")
                continue
            if node_selection == 'balanced' and len(nodes) > 1:
                user_node = nodes[node_index % len(nodes)]
                node_index += 1
            pool_name = user.split('@')[0]
            self._create_user_vms(config, user_node, pool_name)
        banner = "!" * 78
        print(f"\n{banner}")
        warn("–í–ù–ò–ú–ê–ù–ò–ï: –ü–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Ç–µ–≤—ã—Ö –∞–¥–∞–ø—Ç–µ—Ä–æ–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—Ä—É—á–Ω—É—é –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–µ—Ç—å –Ω–∞ —É–ø—Ä–∞–≤–ª—è–µ–º—ã—Ö –Ω–æ–¥–∞—Ö.")
        warn("–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å –Ω–∞ –∫–∞–∂–¥–æ–π –Ω–æ–¥–µ: systemctl restart networking")
        print(f"{banner}\n")

        # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
        if results:
            print("üéØ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –†–ê–ó–í–ï–†–¢–´–í–ê–ù–ò–Ø:")
            print("=" * 50)
            for user, password in results.items():
                print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {emphasize(user)}")
                print(f"üîë –ü–∞—Ä–æ–ª—å: {emphasize(password)}")
                print("-" * 30)
            print("=" * 50)
            print("‚ö†Ô∏è  –°–û–•–†–ê–ù–ò–¢–ï –≠–¢–£ –ò–ù–§–û–†–ú–ê–¶–ò–Æ! –ü–∞—Ä–æ–ª–∏ –±–æ–ª—å—à–µ –Ω–µ –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è.")
        else:
            print("‚ùå –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–ª–∏ –Ω–µ –±—ã–ª–æ —Å–æ–∑–¥–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")

        # –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ª–æ–∫–∞–ª—å–Ω—ã—Ö —à–∞–±–ª–æ–Ω–∞—Ö
        if self.local_templates:
            print("\nüìã –°–û–ó–î–ê–ù–ù–´–ï –õ–û–ö–ê–õ–¨–ù–´–ï –®–ê–ë–õ–û–ù–´:")
            print("=" * 60)
            for template_key, template_vmid in self.local_templates.items():
                original_vmid, target_node = template_key.split(':')
                print(f"üîó –®–∞–±–ª–æ–Ω VMID {template_vmid} –Ω–∞ –Ω–æ–¥–µ '{target_node}' (–∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞ {original_vmid})")
            print("=" * 60)
            print("üí° –≠—Ç–∏ —à–∞–±–ª–æ–Ω—ã –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è –±—É–¥—É—â–∏—Ö —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–π linked clone")

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –±—É–¥—É—â–∏—Ö —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–π
            self.save_local_templates_to_config()

        return results
    
    def _select_node_for_user(self, nodes: List[str], selection: str, target_node: str) -> str:
        if len(nodes) == 1:
            return nodes[0]
        if selection == "specific" and target_node:
            return target_node
        elif selection == "balanced":
            return random.choice(nodes)
        else:
            return None
    
    def _create_user_vms(self, config: dict[str, Any], target_node: str, pool: str):
        for machine_config in config.get('machines', []):
            device_type = machine_config.get('device_type', 'linux')
            new_vmid = self.proxmox.get_next_vmid()
            while not self.proxmox.check_vmid_unique(new_vmid):
                new_vmid += 1

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–¥—É —à–∞–±–ª–æ–Ω–∞
            template_node = machine_config.get('template_node', target_node)
            original_template_vmid = machine_config['template_vmid']

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ª–æ–∫–∞–ª—å–Ω—ã–π —à–∞–±–ª–æ–Ω –¥–ª—è linked clone
            local_template_key = f"{original_template_vmid}:{target_node}"
            if not machine_config.get('full_clone', False) and template_node != target_node:
                if local_template_key in self.local_templates:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ª–æ–∫–∞–ª—å–Ω—ã–π —à–∞–±–ª–æ–Ω
                    actual_template_vmid = self.local_templates[local_template_key]
                    actual_template_node = target_node
                    print(f"üìã –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —à–∞–±–ª–æ–Ω VMID {actual_template_vmid} –Ω–∞ –Ω–æ–¥–µ '{actual_template_node}' –¥–ª—è linked clone")
                else:
                    # –°–æ–∑–¥–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —à–∞–±–ª–æ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
                    print(f"üìã –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞ –¥–ª—è linked clone...")
                    temp_vmid = self.proxmox.get_next_vmid()
                    while not self.proxmox.check_vmid_unique(temp_vmid):
                        temp_vmid += 1

                    template_create_ok = self.proxmox.clone_vm(
                        template_node=template_node,
                        template_vmid=original_template_vmid,
                        target_node=target_node,
                        new_vmid=temp_vmid,
                        name=f"template-{original_template_vmid}-{target_node}",
                        pool=pool,
                        full_clone=False  # –≠—Ç–æ –≤—ã–∑–æ–≤–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞
                    )

                    if template_create_ok:
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–æ–∫–∞–ª—å–Ω–æ–º —à–∞–±–ª–æ–Ω–µ
                        self.local_templates[local_template_key] = temp_vmid
                        actual_template_vmid = temp_vmid
                        actual_template_node = target_node
                        print(f"‚úÖ –õ–æ–∫–∞–ª—å–Ω—ã–π —à–∞–±–ª–æ–Ω —Å–æ–∑–¥–∞–Ω –∏ –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
                    else:
                        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–π —à–∞–±–ª–æ–Ω –¥–ª—è linked clone")
                        print(f"üîÑ –ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞...")
                        # Fallback to full clone
                        actual_template_vmid = original_template_vmid
                        actual_template_node = template_node
                        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –ø–æ–ª–Ω–æ–≥–æ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —ç—Ç–æ–π –í–ú
                        machine_config['full_clone'] = True
                        print(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–Ω–æ–µ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –í–ú {machine_config['name']}")
            else:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É –¥–ª—è full clone –∏–ª–∏ –∫–æ–≥–¥–∞ –Ω–æ–¥—ã —Å–æ–≤–ø–∞–¥–∞—é—Ç
                actual_template_vmid = original_template_vmid
                actual_template_node = template_node

            print(f"üìã –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ VMID {actual_template_vmid} —Å –Ω–æ–¥—ã '{actual_template_node}' –Ω–∞ –Ω–æ–¥—É '{target_node}'")

            clone_ok = self.proxmox.clone_vm(
                template_node=actual_template_node,
                template_vmid=actual_template_vmid,
                target_node=target_node,
                new_vmid=new_vmid,
                name=machine_config['name'],
                pool=pool,
                full_clone=machine_config.get('full_clone', False)
            )

            if clone_ok:
                success(f"–£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –í–ú {emphasize(machine_config['name'])} (VMID: {emphasize(str(new_vmid))})")
                self._configure_network(new_vmid, target_node, machine_config['networks'], pool, device_type)
                self.proxmox.ensure_vm_in_pool(pool, new_vmid)
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –í–ú {emphasize(machine_config['name'])}")
                if actual_template_node != target_node:
                    print(f"üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–∫–∞–ª—å–Ω—ã–π —à–∞–±–ª–æ–Ω VMID {actual_template_vmid} –Ω–∞ –Ω–æ–¥–µ '{actual_template_node}'")
                    print("   –ò–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –æ–±—â–µ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –º–µ–∂–¥—É –Ω–æ–¥–∞–º–∏ –≤ Proxmox.")
                else:
                    print("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —à–∞–±–ª–æ–Ω –¥–æ—Å—Ç—É–ø–µ–Ω –∏ –Ω–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω.")
    
    def _configure_network(self, vmid: int, node: str, networks: List[dict], pool: str, device_type: str = 'linux'):
        next_index_offset = 0
        mgmt_created = False
        if device_type == 'ecorouter':
            try:
                mgmt_net_id = 'net0'
                mgmt_vmbr = 'vmbr0'
                mac = self._generate_ecorouter_mac()
                value = f'model=vmxnet3,bridge={mgmt_vmbr},macaddr={mac},link_down=1'
                self.proxmox.proxmox.nodes(node).qemu(vmid).config.post(**{mgmt_net_id: value})
                success(f"  –°–æ–∑–¥–∞–Ω —É–ø—Ä–∞–≤–ª—è—é—â–∏–π –∞–¥–∞–ø—Ç–µ—Ä {emphasize(mgmt_net_id)} (ecorouter) –Ω–∞ bridge {emphasize(mgmt_vmbr)}")
                mgmt_created = True
            except Exception as e:
                print(f"  –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —É–ø—Ä–∞–≤–ª—è—é—â–µ–≥–æ –∞–¥–∞–ø—Ç–µ—Ä–∞ net0: {e}")
            next_index_offset = 1
        for idx, network in enumerate(networks):
            try:
                i = idx + next_index_offset
                net_id = f"net{i}"
                alias = network['bridge']
                vmbr = self._allocate_vmbr_for_alias_and_pool(node, alias, pool)
                self.proxmox.ensure_bridge(node, vmbr)
                if device_type == 'ecorouter':
                    mac = self._generate_ecorouter_mac()
                    value = f'model=vmxnet3,bridge={vmbr},macaddr={mac}'
                else:
                    value = f'model=virtio,bridge={vmbr},firewall=1'
                config_params = { f'{net_id}': value }
                self.proxmox.proxmox.nodes(node).qemu(vmid).config.post(**config_params)
                success(f"  –ù–∞—Å—Ç—Ä–æ–µ–Ω —Å–µ—Ç–µ–≤–æ–π –∞–¥–∞–ø—Ç–µ—Ä {emphasize(net_id)} –Ω–∞ bridge {emphasize(vmbr)}")
            except Exception as e:
                print(f"  –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ç–µ–≤–æ–≥–æ –∞–¥–∞–ø—Ç–µ—Ä–∞ {i}: {e}")
        if device_type == 'ecorouter' and not mgmt_created:
            try:
                mgmt_net_id = 'net0'
                mgmt_vmbr = 'vmbr0'
                mac = self._generate_ecorouter_mac()
                value = f'model=vmxnet3,bridge={mgmt_vmbr},macaddr={mac},link_down=1'
                self.proxmox.proxmox.nodes(node).qemu(vmid).config.post(**{mgmt_net_id: value})
                success(f"  –ü–æ–≤—Ç–æ—Ä–Ω–æ —Å–æ–∑–¥–∞–Ω —É–ø—Ä–∞–≤–ª—è—é—â–∏–π –∞–¥–∞–ø—Ç–µ—Ä {emphasize(mgmt_net_id)} (ecorouter) –Ω–∞ bridge {emphasize(mgmt_vmbr)}")
            except Exception as e:
                print(f"  –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —É–ø—Ä–∞–≤–ª—è—é—â–∏–π –∞–¥–∞–ø—Ç–µ—Ä net0 –ø–æ–≤—Ç–æ—Ä–Ω–æ: {e}")
    
    def _generate_ecorouter_mac(self) -> str:
        import random
        tail = [random.randint(0x00, 0xFF) for _ in range(2)]
        return '1C:87:76:40:{:02X}:{:02X}'.format(tail[0], tail[1])

    def save_local_templates_to_config(self, config_path: str = "data/deployment_config.yml") -> bool:
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–æ–∫–∞–ª—å–Ω—ã—Ö —à–∞–±–ª–æ–Ω–∞—Ö –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª"""
        try:
            import yaml
            import os

            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–Ω—Ñ–∏–≥
            if os.path.exists(config_path):
                with open(config_path, 'r', encoding='utf-8') as f:
                    config = yaml.safe_load(f) or {}
            else:
                config = {}

            # –î–æ–±–∞–≤–ª—è–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–æ–∫–∞–ª—å–Ω—ã—Ö —à–∞–±–ª–æ–Ω–∞—Ö
            if 'local_templates' not in config:
                config['local_templates'] = {}

            for template_key, template_vmid in self.local_templates.items():
                original_vmid, target_node = template_key.split(':')
                config['local_templates'][template_key] = {
                    'vmid': template_vmid,
                    'node': target_node,
                    'original_vmid': original_vmid
                }

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥
            with open(config_path, 'w', encoding='utf-8') as f:
                yaml.dump(config, f, default_flow_style=False, allow_unicode=True, indent=2)

            print(f"‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª–æ–∫–∞–ª—å–Ω—ã—Ö —à–∞–±–ª–æ–Ω–∞—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ {config_path}")
            return True

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤ –≤ –∫–æ–Ω—Ñ–∏–≥: {e}")
            return False

    def load_local_templates_from_config(self, config_path: str = "data/deployment_config.yml") -> bool:
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–æ–∫–∞–ª—å–Ω—ã—Ö —à–∞–±–ª–æ–Ω–∞—Ö –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
        try:
            import yaml
            import os

            if not os.path.exists(config_path):
                return False

            with open(config_path, 'r', encoding='utf-8') as f:
                config = yaml.safe_load(f) or {}

            local_templates_info = config.get('local_templates', {})

            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–æ–∫–∞–ª—å–Ω—ã—Ö —à–∞–±–ª–æ–Ω–∞—Ö
            for template_key, template_info in local_templates_info.items():
                if isinstance(template_info, dict):
                    vmid = template_info.get('vmid')
                    if vmid:
                        self.local_templates[template_key] = vmid
                else:
                    # –û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ —Å—Ç–∞—Ä—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º
                    self.local_templates[template_key] = template_info

            if self.local_templates:
                print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.local_templates)} –ª–æ–∫–∞–ª—å–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
                for template_key, template_vmid in self.local_templates.items():
                    original_vmid, target_node = template_key.split(':')
                    print(f"   - –®–∞–±–ª–æ–Ω VMID {template_vmid} –Ω–∞ –Ω–æ–¥–µ '{target_node}' (–∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞ {original_vmid})")

            return True

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–∫–∞–ª—å–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞: {e}")
            return False

    def cleanup_local_template(self, original_vmid: int, target_node: str) -> bool:
        """–£–¥–∞–ª–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–π —à–∞–±–ª–æ–Ω"""
        try:
            template_key = f"{original_vmid}:{target_node}"

            if template_key not in self.local_templates:
                print(f"‚ùå –õ–æ–∫–∞–ª—å–Ω—ã–π —à–∞–±–ª–æ–Ω –¥–ª—è VMID {original_vmid} –Ω–∞ –Ω–æ–¥–µ '{target_node}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False

            template_vmid = self.local_templates[template_key]

            # –£–¥–∞–ª—è–µ–º —à–∞–±–ª–æ–Ω —á–µ—Ä–µ–∑ Proxmox API
            if self.proxmox.delete_vm(target_node, template_vmid):
                # –£–¥–∞–ª—è–µ–º –∏–∑ –∫—ç—à–∞
                del self.local_templates[template_key]
                print(f"‚úÖ –õ–æ–∫–∞–ª—å–Ω—ã–π —à–∞–±–ª–æ–Ω VMID {template_vmid} —É–¥–∞–ª–µ–Ω —Å –Ω–æ–¥—ã '{target_node}'")
                return True
            else:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–π —à–∞–±–ª–æ–Ω VMID {template_vmid}")
                return False

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞: {e}")
            return False
