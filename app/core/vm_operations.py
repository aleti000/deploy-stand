import random
from typing import List, Dict, Any
from app.core.proxmox_manager import ProxmoxManager
from app.core.template_manager import TemplateManager
from app.utils.logger import logger
from app.utils.console import emphasize


class VMOperations:
    """–ú–æ–¥—É–ª—å –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π —Å –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–º–∏ –º–∞—à–∏–Ω–∞–º–∏"""

    def __init__(self, proxmox_manager: ProxmoxManager):
        self.proxmox = proxmox_manager
        self.template_manager = TemplateManager.get_instance(proxmox_manager)
        self.alias_to_vmbr: dict[str, str] = {}

    def create_user_vms(self, config: dict[str, Any], target_node: str, pool: str):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö –º–∞—à–∏–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        for machine_config in config.get('machines', []):
            success = self._create_single_vm(machine_config, target_node, pool)
            if not success:
                logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –í–ú {machine_config['name']}")

    def _create_single_vm(self, machine_config: dict[str, Any], target_node: str, pool: str) -> bool:
        """–°–æ–∑–¥–∞—Ç—å –æ–¥–Ω—É –≤–∏—Ä—Ç—É–∞–ª—å–Ω—É—é –º–∞—à–∏–Ω—É"""
        device_type = machine_config.get('device_type', 'linux')
        new_vmid = self.proxmox.get_next_vmid()
        while not self.proxmox.check_vmid_unique(new_vmid):
            new_vmid += 1

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —à–∞–±–ª–æ–Ω–∞
        template_node = machine_config.get('template_node', target_node)
        original_template_vmid = machine_config['template_vmid']

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ª–æ–∫–∞–ª—å–Ω—ã–π —à–∞–±–ª–æ–Ω –¥–ª—è —Ü–µ–ª–µ–≤–æ–π –Ω–æ–¥—ã
        actual_template_vmid = self.template_manager.get_template_for_node(original_template_vmid, target_node)

        logger.info(f"üìã –°–æ–∑–¥–∞–Ω–∏–µ –í–ú '{machine_config['name']}' –Ω–∞ –Ω–æ–¥–µ '{target_node}'")
        logger.info(f"üìã –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —à–∞–±–ª–æ–Ω: VMID {original_template_vmid} –Ω–∞ –Ω–æ–¥–µ '{template_node}'")
        logger.info(f"üìã –ù–∞–π–¥–µ–Ω –ª–æ–∫–∞–ª—å–Ω—ã–π —à–∞–±–ª–æ–Ω: VMID {actual_template_vmid}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ª–æ–∫–∞–ª—å–Ω—ã–π —à–∞–±–ª–æ–Ω —Ñ–∏–∑–∏—á–µ—Å–∫–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if actual_template_vmid and not self.template_manager.verify_template_exists(target_node, actual_template_vmid):
            logger.warning(f"‚ö†Ô∏è –õ–æ–∫–∞–ª—å–Ω—ã–π —à–∞–±–ª–æ–Ω VMID {actual_template_vmid} –Ω–µ –Ω–∞–π–¥–µ–Ω —Ñ–∏–∑–∏—á–µ—Å–∫–∏ –Ω–∞ –Ω–æ–¥–µ '{target_node}'")
            logger.info("üìã –°–æ–∑–¥–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —à–∞–±–ª–æ–Ω –Ω–∞ –ª–µ—Ç—É...")
            actual_template_vmid = None  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –∑–∞–Ω–æ–≤–æ

        if template_node != target_node and actual_template_vmid is None:
            # –õ–æ–∫–∞–ª—å–Ω—ã–π —à–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ –Ω–∞ –ª–µ—Ç—É
            logger.warning(f"–õ–æ–∫–∞–ª—å–Ω—ã–π —à–∞–±–ª–æ–Ω –¥–ª—è VMID {original_template_vmid} –Ω–∞ –Ω–æ–¥–µ '{target_node}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
            logger.info(f"–°–æ–∑–¥–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —à–∞–±–ª–æ–Ω –Ω–∞ –Ω–æ–¥–µ '{target_node}'...")

            # –°–æ–∑–¥–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —à–∞–±–ª–æ–Ω –Ω–∞ –ª–µ—Ç—É
            local_template_vmid = self._create_local_template_on_demand(
                template_node, original_template_vmid, target_node
            )

            if local_template_vmid:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–æ–≤–æ–º –ª–æ–∫–∞–ª—å–Ω–æ–º —à–∞–±–ª–æ–Ω–µ
                template_key = f"{original_template_vmid}:{target_node}"
                self.template_manager.local_templates[template_key] = local_template_vmid
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —à–∞–±–ª–æ–Ω–æ–≤ –º–µ–∂–¥—É –Ω–æ–¥–∞–º–∏
                self.template_manager.update_template_mapping(original_template_vmid, template_node, target_node, local_template_vmid)
                self.template_manager.save_template_mapping()

                actual_template_vmid = local_template_vmid
                actual_template_node = target_node
                logger.success(f"–õ–æ–∫–∞–ª—å–Ω—ã–π —à–∞–±–ª–æ–Ω VMID {local_template_vmid} —Å–æ–∑–¥–∞–Ω –Ω–∞ –Ω–æ–¥–µ '{target_node}'")
            else:
                # Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —à–∞–±–ª–æ–Ω
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–π —à–∞–±–ª–æ–Ω")
                logger.warning("–ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞ –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞...")
                actual_template_vmid = original_template_vmid
                actual_template_node = template_node
                machine_config['full_clone'] = True
                logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —à–∞–±–ª–æ–Ω –¥–ª—è –í–ú {machine_config['name']}")
        else:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —à–∞–±–ª–æ–Ω –∏–ª–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –Ω–∞ —Ç–æ–π –∂–µ –Ω–æ–¥–µ
            actual_template_vmid = actual_template_vmid if actual_template_vmid is not None else original_template_vmid
            actual_template_node = target_node if actual_template_vmid != original_template_vmid else template_node

        logger.debug(f"–°–æ–∑–¥–∞–µ–º –í–ú –∏–∑ —à–∞–±–ª–æ–Ω–∞ VMID {actual_template_vmid} –Ω–∞ –Ω–æ–¥–µ '{target_node}'")

        # –°–æ–∑–¥–∞–µ–º –í–ú –∏–∑ —à–∞–±–ª–æ–Ω–∞
        clone_ok = self.proxmox.clone_vm(
            template_node=actual_template_node,
            template_vmid=actual_template_vmid,
            target_node=target_node,
            new_vmid=new_vmid,
            name=machine_config['name'],
            pool=pool,
            full_clone=machine_config.get('full_clone', False)
        )

        if clone_ok:
            logger.success(f"–£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –í–ú {emphasize(machine_config['name'])} (VMID: {emphasize(str(new_vmid))})")
            self._configure_network(new_vmid, target_node, machine_config['networks'], pool, device_type)
            self.proxmox.ensure_vm_in_pool(pool, new_vmid)
            return True
        else:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –í–ú {machine_config['name']}")
            if actual_template_node != target_node:
                logger.warning(f"–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–∫–∞–ª—å–Ω—ã–π —à–∞–±–ª–æ–Ω VMID {actual_template_vmid} –Ω–∞ –Ω–æ–¥–µ '{actual_template_node}'")
            else:
                logger.warning("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —à–∞–±–ª–æ–Ω –¥–æ—Å—Ç—É–ø–µ–Ω –∏ –Ω–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω.")
            return False

    def _configure_network(self, vmid: int, node: str, networks: List[dict], pool: str, device_type: str = 'linux'):
        """–ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Å–µ—Ç—å –¥–ª—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π –º–∞—à–∏–Ω—ã"""
        next_index_offset = 0
        mgmt_created = False

        if device_type == 'ecorouter':
            try:
                mgmt_net_id = 'net0'
                mgmt_vmbr = 'vmbr0'
                mac = self._generate_ecorouter_mac()
                value = f'model=vmxnet3,bridge={mgmt_vmbr},macaddr={mac},link_down=1'
                self.proxmox.proxmox.nodes(node).qemu(vmid).config.post(**{mgmt_net_id: value})
                logger.success(f"  –°–æ–∑–¥–∞–Ω —É–ø—Ä–∞–≤–ª—è—é—â–∏–π –∞–¥–∞–ø—Ç–µ—Ä {emphasize(mgmt_net_id)} (ecorouter) –Ω–∞ bridge {emphasize(mgmt_vmbr)}")
                mgmt_created = True
            except Exception as e:
                print(f"  –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —É–ø—Ä–∞–≤–ª—è—é—â–µ–≥–æ –∞–¥–∞–ø—Ç–µ—Ä–∞ net0 (—Å–µ—Ç—å: vmbr0): {e}")
            next_index_offset = 1

        for idx, network in enumerate(networks):
            try:
                i = idx + next_index_offset
                net_id = f"net{i}"
                alias = network['bridge']
                reserved = network.get('reserved', False)
                vmbr = self._allocate_vmbr_for_alias_and_pool(node, alias, pool, reserved)
                self.proxmox.ensure_bridge(node, vmbr)

                if device_type == 'ecorouter':
                    mac = self._generate_ecorouter_mac()
                    value = f'model=vmxnet3,bridge={vmbr},macaddr={mac}'
                else:
                    value = f'model=virtio,bridge={vmbr},firewall=1'

                config_params = {f'{net_id}': value}
                self.proxmox.proxmox.nodes(node).qemu(vmid).config.post(**config_params)
                logger.success(f"  –ù–∞—Å—Ç—Ä–æ–µ–Ω —Å–µ—Ç–µ–≤–æ–π –∞–¥–∞–ø—Ç–µ—Ä {emphasize(net_id)} –Ω–∞ bridge {emphasize(vmbr)} (—Å–µ—Ç—å: {emphasize(alias)})")
            except Exception as e:
                print(f"  –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ç–µ–≤–æ–≥–æ –∞–¥–∞–ø—Ç–µ—Ä–∞ {i} (—Å–µ—Ç—å: {emphasize(alias)}): {e}")

        if device_type == 'ecorouter' and not mgmt_created:
            try:
                mgmt_net_id = 'net0'
                mgmt_vmbr = 'vmbr0'
                mac = self._generate_ecorouter_mac()
                value = f'model=vmxnet3,bridge={mgmt_vmbr},macaddr={mac},link_down=1'
                self.proxmox.proxmox.nodes(node).qemu(vmid).config.post(**{mgmt_net_id: value})
                logger.success(f"  –ü–æ–≤—Ç–æ—Ä–Ω–æ —Å–æ–∑–¥–∞–Ω —É–ø—Ä–∞–≤–ª—è—é—â–∏–π –∞–¥–∞–ø—Ç–µ—Ä {emphasize(mgmt_net_id)} (ecorouter) –Ω–∞ bridge {emphasize(mgmt_vmbr)}")
            except Exception as e:
                print(f"  –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —É–ø—Ä–∞–≤–ª—è—é—â–∏–π –∞–¥–∞–ø—Ç–µ—Ä net0 –ø–æ–≤—Ç–æ—Ä–Ω–æ (—Å–µ—Ç—å: vmbr0): {e}")

    def _allocate_vmbr_for_alias_and_pool(self, node: str, alias: str, pool: str, reserved: bool = False) -> str:
        """–í—ã–¥–µ–ª–∏—Ç—å VMBR –¥–ª—è –∞–ª–∏–∞—Å–∞ –∏ –ø—É–ª–∞"""
        if alias == 'vmbr0':
            return 'vmbr0'
        # –ï—Å–ª–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—á–Ω–æ–µ –∏–º—è –±–µ–∑ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ
        if reserved:
            return alias
        key = f"{node}:{pool}:{alias}"
        if key in self.alias_to_vmbr:
            return self.alias_to_vmbr[key]
        vmbr = self.proxmox.next_free_bridge_name(node, start_from=1000)
        self.alias_to_vmbr[key] = vmbr
        return vmbr

    def _generate_ecorouter_mac(self) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å MAC –∞–¥—Ä–µ—Å –¥–ª—è ecorouter"""
        tail = [random.randint(0x00, 0xFF) for _ in range(2)]
        return '1C:87:76:40:{:02X}:{:02X}'.format(tail[0], tail[1])

    def _create_local_template_on_demand(self, template_node: str, original_template_vmid: int, target_node: str) -> int:
        """–°–æ–∑–¥–∞—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–π —à–∞–±–ª–æ–Ω –Ω–∞ –ª–µ—Ç—É —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø–æ–ª–Ω–æ–≥–æ –∫–ª–æ–Ω–∞ –∏ –º–∏–≥—Ä–∞—Ü–∏–∏"""
        try:
            logger.info(f"üîÑ –°–æ–∑–¥–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —à–∞–±–ª–æ–Ω –Ω–∞ –Ω–æ–¥–µ '{target_node}' –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞ VMID {original_template_vmid}...")

            # –®–∞–≥ 1: –°–æ–∑–¥–∞—Ç—å –ø–æ–ª–Ω—ã–π –∫–ª–æ–Ω –Ω–∞ –Ω–æ–¥–µ –≥–¥–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —à–∞–±–ª–æ–Ω
            logger.info(f"üìã –®–∞–≥ 1: –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—ã–π –∫–ª–æ–Ω –Ω–∞ –Ω–æ–¥–µ '{template_node}'...")
            temp_vmid = self.proxmox.get_next_vmid()
            while not self.proxmox.check_vmid_unique(temp_vmid):
                temp_vmid += 1

            template_name = f"template-{original_template_vmid}-{target_node}"

            # –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—ã–π –∫–ª–æ–Ω –Ω–∞ —Ç–æ–π –∂–µ –Ω–æ–¥–µ —Å–Ω–∞—á–∞–ª–∞
            clone_params = {
                'newid': temp_vmid,
                'name': template_name,
                'target': template_node,  # –°–æ–∑–¥–∞–µ–º –Ω–∞ —Ç–æ–π –∂–µ –Ω–æ–¥–µ —Å–Ω–∞—á–∞–ª–∞
                'full': 1  # –ü–æ–ª–Ω—ã–π –∫–ª–æ–Ω
            }

            logger.debug(f"   –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—É—é –∫–æ–ø–∏—é VMID {original_template_vmid} –Ω–∞ –Ω–æ–¥–µ '{template_node}'")
            try:
                task = self.proxmox.proxmox.nodes(template_node).qemu(original_template_vmid).clone.post(**clone_params)
                if not self._wait_for_task(task, template_node):
                    logger.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª–Ω–æ–π –∫–æ–ø–∏–∏ –Ω–∞ –∏—Å—Ö–æ–¥–Ω–æ–π –Ω–æ–¥–µ")
                    return 0
                logger.success(f"‚úÖ –ü–æ–ª–Ω—ã–π –∫–ª–æ–Ω —Å–æ–∑–¥–∞–Ω –Ω–∞ –Ω–æ–¥–µ '{template_node}' —Å VMID {temp_vmid}")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ –∫–ª–æ–Ω–∞: {e}")
                return 0

            # –®–∞–≥ 2: –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –í–ú –≤ —à–∞–±–ª–æ–Ω
            logger.info(f"üìã –®–∞–≥ 2: –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤—ã–≤–∞–µ–º –í–ú {temp_vmid} –≤ —à–∞–±–ª–æ–Ω...")
            try:
                self.proxmox.proxmox.nodes(template_node).qemu(temp_vmid).template.post()
                logger.success(f"‚úÖ –í–ú –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∞ –≤ —à–∞–±–ª–æ–Ω –Ω–∞ –Ω–æ–¥–µ '{template_node}'")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –í–ú –≤ —à–∞–±–ª–æ–Ω: {e}")
                logger.info("üí° –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –º–∏–≥—Ä–∞—Ü–∏–µ–π...")

            # –®–∞–≥ 3: –í—ã–ø–æ–ª–Ω–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é —à–∞–±–ª–æ–Ω–∞ –Ω–∞ –Ω—É–∂–Ω—É—é –Ω–æ–¥—É
            if template_node != target_node:
                logger.info(f"üìã –®–∞–≥ 3: –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é —à–∞–±–ª–æ–Ω–∞ –Ω–∞ –Ω–æ–¥—É '{target_node}'...")
                try:
                    migration_params = {
                        'target': target_node,
                        'online': 1  # –û–Ω–ª–∞–π–Ω –º–∏–≥—Ä–∞—Ü–∏—è
                    }

                    logger.debug(f"   –ú–∏–≥—Ä–∞—Ü–∏—è —à–∞–±–ª–æ–Ω–∞ VMID {temp_vmid} —Å '{template_node}' –Ω–∞ '{target_node}'...")
                    task = self.proxmox.proxmox.nodes(template_node).qemu(temp_vmid).migrate.post(**migration_params)

                    if not self._wait_for_task(task, template_node):
                        logger.error("‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ —à–∞–±–ª–æ–Ω–∞")
                        # –ü–æ–ø—Ä–æ–±—É–µ–º –æ—á–∏—Å—Ç–∏—Ç—å –Ω–µ—É–¥–∞—á–Ω–æ –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —à–∞–±–ª–æ–Ω
                        try:
                            self.proxmox.delete_vm(template_node, temp_vmid)
                        except Exception:
                            pass
                        return 0

                    logger.success(f"‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –Ω–∞ –Ω–æ–¥—É '{target_node}'")

                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
                    # –ü–æ–ø—Ä–æ–±—É–µ–º –æ—á–∏—Å—Ç–∏—Ç—å –Ω–µ—É–¥–∞—á–Ω–æ –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —à–∞–±–ª–æ–Ω
                    try:
                        self.proxmox.delete_vm(template_node, temp_vmid)
                    except Exception:
                        pass
                    return 0

            # –®–∞–≥ 4: –í–æ–∑–≤—Ä–∞—â–∞–µ–º VMID —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞
            logger.success(f"üìã –õ–æ–∫–∞–ª—å–Ω—ã–π —à–∞–±–ª–æ–Ω –≥–æ—Ç–æ–≤: VMID {temp_vmid} –Ω–∞ –Ω–æ–¥–µ '{target_node}'")
            logger.info(f"üí° –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å: –ø–æ–ª–Ω—ã–π –∫–ª–æ–Ω ‚Üí —à–∞–±–ª–æ–Ω ‚Üí –º–∏–≥—Ä–∞—Ü–∏—è")

            return temp_vmid

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞ –Ω–∞ –ª–µ—Ç—É: {e}")
            return 0

    def _wait_for_task(self, task, node: str, timeout: int = 300) -> bool:
        """–û–∂–∏–¥–∞—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏"""
        import time
        start_time = time.time()
        while time.time() - start_time < timeout:
            try:
                status = self.proxmox.proxmox.nodes(node).tasks(task).status.get()
                if status['status'] == 'stopped':
                    return status['exitstatus'] == 'OK'
                time.sleep(2)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏: {e}")
                return False
        logger.error("–¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏")
        return False

    def check_existing_vms_in_pools(self, users: List[str], config: dict[str, Any]) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –º–∞—à–∏–Ω –≤ –ø—É–ª–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        try:
            logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –º–∞—à–∏–Ω –≤ –ø—É–ª–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")

            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –º–∞—à–∏–Ω –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            required_machines = {}
            for machine_config in config.get('machines', []):
                machine_name = machine_config['name']
                required_machines[machine_name] = []

                # –î–ª—è –∫–∞–∂–¥–æ–π –º–∞—à–∏–Ω—ã —Å–æ–±–∏—Ä–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –µ–µ –ø–æ–ª—É—á–∞—Ç
                for user in users:
                    pool_name = user.split('@')[0]
                    required_machines[machine_name].append(pool_name)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –ø—É–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            for user in users:
                pool_name = user.split('@')[0]

                try:
                    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—É–ª–µ
                    pool_info = self.proxmox.proxmox.pools(pool_name).get()
                    members = pool_info.get('members', [])

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é VM –≤ –ø—É–ª–µ
                    for member in members:
                        if member.get('type') == 'qemu':
                            vmid = int(member['vmid'])
                            node = member.get('node') or self.proxmox.get_vm_node(vmid)

                            if node:
                                try:
                                    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é VM –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–µ–Ω–∏
                                    vm_config = self.proxmox.proxmox.nodes(node).qemu(vmid).config.get()
                                    vm_name = vm_config.get('name', f'VM-{vmid}')

                                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É–µ—Ç –ª–∏ –∏–º—è —Å —Ç—Ä–µ–±—É–µ–º—ã–º–∏ –º–∞—à–∏–Ω–∞–º–∏
                                    for required_name, user_pools in required_machines.items():
                                        if vm_name == required_name and pool_name in user_pools:
                                            print(f"‚ùå –ö–æ–Ω—Ñ–ª–∏–∫—Ç –æ–±–Ω–∞—Ä—É–∂–µ–Ω!")
                                            print(f"   –ü—É–ª: {emphasize(pool_name)}")
                                            print(f"   –°—É—â–µ—Å—Ç–≤—É—é—â–∞—è VM: {emphasize(vm_name)} (VMID: {vmid})")
                                            print(f"   –¢—Ä–µ–±—É–µ–º–∞—è VM: {emphasize(required_name)}")
                                            print(f"üí° –£–¥–∞–ª–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é VM –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç–µ –∏–º—è –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
                                            return False

                                except Exception as e:
                                    print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é VM {vmid}: {e}")

                except Exception:
                    # –ü—É–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                    continue

            logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ö–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ.")
            return True

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –º–∞—à–∏–Ω: {e}")
            return False
