"""
–ú–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã Deploy-Stand

–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YAML –±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è pyyaml.
"""

import os
import logging
from typing import Dict, List, Any, Optional
import yaml as yaml_module  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –º–æ–¥—É–ª—å yaml
from .validators import ConfigValidator

logger = logging.getLogger(__name__)


class ConfigManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å YAML —Ñ–∞–π–ª–∞–º–∏"""

    # –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –ø—É—Ç–µ–π –∫ —Ñ–∞–π–ª–∞–º
    CONFIG_DIR = "data"
    CONFIG_FILE = "data/deployment_config.yml"
    USERS_FILE = "data/users_list.yml"
    CONFIGS_DIR = "data/configs"
    CONNECTIONS_FILE = "data/connections_config.yml"

    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        self._ensure_directories()

    def _ensure_directories(self):
        """–°–æ–∑–¥–∞—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç"""
        try:
            os.makedirs(self.CONFIG_DIR, exist_ok=True)
            os.makedirs(self.CONFIGS_DIR, exist_ok=True)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π: {e}")

    def load_deployment_config(self) -> Optional[Dict[str, Any]]:
        """
        –ó–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è

        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        return self._load_yaml_file(self.CONFIG_FILE)

    def save_deployment_config(self, config: Dict[str, Any]) -> bool:
        """
        –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è

        Args:
            config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è

        Returns:
            True –µ—Å–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ
        """
        return self._save_yaml_file(self.CONFIG_FILE, config)

    def load_users(self, users_list_name: str = "default") -> List[str]:
        """
        –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

        Args:
            users_list_name: –ò–º—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é "default")

        Returns:
            –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        """
        users_file = os.path.join(self.CONFIG_DIR, f"users_{users_list_name}.yml")
        config = self._load_yaml_file(users_file)
        if config and 'users' in config:
            return config['users']
        return []

    def save_users(self, users: List[str], users_list_name: str = "default") -> bool:
        """
        –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

        Args:
            users: –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            users_list_name: –ò–º—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é "default")

        Returns:
            True –µ—Å–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ
        """
        config = {'users': users}
        users_file = os.path.join(self.CONFIG_DIR, f"users_{users_list_name}.yml")
        return self._save_yaml_file(users_file, config)

    def list_user_lists(self) -> List[str]:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ø–∏—Å–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

        Returns:
            –°–ø–∏—Å–æ–∫ –∏–º–µ–Ω —Å–ø–∏—Å–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        """
        try:
            if not os.path.exists(self.CONFIG_DIR):
                return []

            user_lists = []
            for file in os.listdir(self.CONFIG_DIR):
                if file.startswith('users_') and file.endswith('.yml'):
                    list_name = file[6:-4]  # Remove 'users_' prefix and '.yml' suffix
                    user_lists.append(list_name)
            return user_lists
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
            return []

    def delete_user_list(self, users_list_name: str) -> bool:
        """
        –£–¥–∞–ª–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

        Args:
            users_list_name: –ò–º—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è

        Returns:
            True –µ—Å–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            users_file = os.path.join(self.CONFIG_DIR, f"users_{users_list_name}.yml")
            if os.path.exists(users_file):
                os.remove(users_file)
                logger.info(f"–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π {users_list_name} —É–¥–∞–ª–µ–Ω")
                return True
            else:
                logger.warning(f"–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π {users_list_name} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π {users_list_name}: {e}")
            return False

    def load_connections_config(self) -> Optional[Dict[str, Any]]:
        """
        –ó–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π

        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        return self._load_yaml_file(self.CONNECTIONS_FILE)

    def save_connections_config(self, config: Dict[str, Any]) -> bool:
        """
        –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π

        Args:
            config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è

        Returns:
            True –µ—Å–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ
        """
        return self._save_yaml_file(self.CONNECTIONS_FILE, config)

    def list_configs(self) -> List[str]:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π

        Returns:
            –°–ø–∏—Å–æ–∫ –∏–º–µ–Ω –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
        """
        try:
            if not os.path.exists(self.CONFIGS_DIR):
                return []

            configs = []
            for file in os.listdir(self.CONFIGS_DIR):
                if file.endswith('.yml') or file.endswith('.yaml'):
                    configs.append(file)
                elif not file.startswith('.'):  # Include files without extension but not hidden files
                    configs.append(file)
            return configs
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π: {e}")
            return []

    def load_config(self, config_name: str) -> Optional[Dict[str, Any]]:
        """
        –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é

        Args:
            config_name: –ò–º—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏

        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        config_path = os.path.join(self.CONFIGS_DIR, config_name)
        return self._load_yaml_file(config_path)

    def save_config(self, config_name: str, config: Dict[str, Any]) -> bool:
        """
        –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é

        Args:
            config_name: –ò–º—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è

        Returns:
            True –µ—Å–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ
        """
        config_path = os.path.join(self.CONFIGS_DIR, config_name)
        return self._save_yaml_file(config_path, config)

    def delete_config(self, config_name: str) -> bool:
        """
        –£–¥–∞–ª–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é

        Args:
            config_name: –ò–º—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è

        Returns:
            True –µ—Å–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            config_path = os.path.join(self.CONFIGS_DIR, config_name)
            if os.path.exists(config_path):
                os.remove(config_path)
                logger.info(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è {config_name} —É–¥–∞–ª–µ–Ω–∞")
                return True
            else:
                logger.warning(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è {config_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return False
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ {config_name}: {e}")
            return False


    def create_named_config(self, config_name: str, nodes: List[str], proxmox_manager) -> bool:
        """
        –°–æ–∑–¥–∞—Ç—å –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è

        Args:
            config_name: –ò–º—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            nodes: –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–æ–¥
            proxmox_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä Proxmox

        Returns:
            True –µ—Å–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            print(f"\nüìã –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ '{config_name}'")
            print("=" * 50)

            # –ó–∞–ø—Ä–æ—Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–∞—à–∏–Ω
            num_machines = input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—à–∏–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ [1]: ").strip() or "1"

            try:
                num_machines = int(num_machines)
                if num_machines <= 0:
                    logger.error("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—à–∏–Ω –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º!")
                    print("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—à–∏–Ω –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º!")
                    return False
            except ValueError:
                logger.error("–í–≤–µ–¥–µ–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—à–∏–Ω")
                print("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ!")
                return False

            machines = []

            for i in range(num_machines):
                print(f"\nüîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–∞—à–∏–Ω—ã {i+1}:")
                print("-" * 30)

                # –¢–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
                device_type = input("–¢–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ (linux/ecorouter) [linux]: ").strip() or "linux"
                if device_type not in ['linux', 'ecorouter']:
                    logger.error(f"–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ç–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {device_type}")
                    print("‚ùå –î–æ–ø—É—Å—Ç–∏–º—ã–µ —Ç–∏–ø—ã: linux –∏–ª–∏ ecorouter")
                    return False

                # –ò–º—è –º–∞—à–∏–Ω—ã
                machine_name = input(f"–ò–º—è –º–∞—à–∏–Ω—ã [vm-{i+1}]: ").strip() or f"vm-{i+1}"

                # –ù–æ–¥–∞ —à–∞–±–ª–æ–Ω–∞
                print(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–æ–¥—ã: {', '.join(nodes)}")
                template_node = input("–ù–æ–¥–∞ —à–∞–±–ª–æ–Ω–∞: ").strip()
                if template_node not in nodes:
                    logger.error(f"–ù–æ–¥–∞ {template_node} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–ø–∏—Å–∫–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö")
                    print(f"‚ùå –ù–æ–¥–∞ {template_node} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–ø–∏—Å–∫–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö")
                    return False

                # VMID —à–∞–±–ª–æ–Ω–∞
                template_vmid = input("VMID —à–∞–±–ª–æ–Ω–∞: ").strip()
                try:
                    template_vmid = int(template_vmid)
                except ValueError:
                    logger.error("–í–≤–µ–¥–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π VMID")
                    print("‚ùå VMID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º!")
                    return False

                # –¢–∏–ø –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
                full_clone_input = input("–ü–æ–ª–Ω–æ–µ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ? (y/n) [n]: ").strip().lower()
                full_clone = full_clone_input in ['y', 'yes', '–¥–∞']

                # –°–µ—Ç–µ–≤—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã
                networks_input = input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ—Ç–µ–≤—ã—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤ [1]: ").strip() or "1"
                try:
                    num_networks = int(networks_input)
                except ValueError:
                    logger.error("–í–≤–µ–¥–µ–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ—Ç–µ–≤—ã—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤")
                    print("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ!")
                    return False

                networks = []
                for j in range(num_networks):
                    bridge = input(f"Bridge –¥–ª—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ {j+1} [vmbr{j}]: ").strip() or f"vmbr{j}"
                    networks.append({'bridge': bridge})

                machine_config = {
                    'device_type': device_type,
                    'name': machine_name,
                    'template_node': template_node,
                    'template_vmid': template_vmid,
                    'networks': networks,
                    'full_clone': full_clone
                }

                machines.append(machine_config)

            # –°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            config = {
                'machines': machines
            }

            # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            return self.save_config(config_name, config)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ {config_name}: {e}")
            return False

    def _load_yaml_file(self, file_path: str) -> Optional[Dict[str, Any]]:
        """
        –ó–∞–≥—Ä—É–∑–∏—Ç—å YAML —Ñ–∞–π–ª

        Args:
            file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É

        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        try:
            if not os.path.exists(file_path):
                logger.warning(f"–§–∞–π–ª {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return None

            with open(file_path, 'r', encoding='utf-8') as file:
                content = file.read()
                if not content.strip():
                    logger.warning(f"–§–∞–π–ª {file_path} –ø—É—Å—Ç")
                    return None

                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –º–æ–¥—É–ª—å yaml
                data = yaml_module.safe_load(content)
                if data is None:
                    return {}

                return data

        except yaml_module.YAMLError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ YAML —Ñ–∞–π–ª–∞ {file_path}: {e}")
            return None
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {file_path}: {e}")
            return None

    def _save_yaml_file(self, file_path: str, data: Dict[str, Any]) -> bool:
        """
        –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ YAML —Ñ–∞–π–ª

        Args:
            file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
            data: –î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è

        Returns:
            True –µ—Å–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            # –°–æ–∑–¥–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            os.makedirs(os.path.dirname(file_path), exist_ok=True)

            with open(file_path, 'w', encoding='utf-8') as file:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –º–æ–¥—É–ª—å yaml —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                yaml_module.dump(
                    data,
                    file,
                    default_flow_style=False,
                    allow_unicode=True,
                    encoding='utf-8'
                )

            logger.info(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ {file_path}")
            return True

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {file_path}: {e}")
            return False

    def validate_deployment_config(self, config: Dict[str, Any]) -> bool:
        """
        –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è

        Args:
            config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏

        Returns:
            True –µ—Å–ª–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–∞–ª–∏–¥–Ω–∞
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Å–µ–∫—Ü–∏–∏ machines
            if 'machines' not in config:
                logger.error("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–µ–∫—Ü–∏—é 'machines'")
                return False

            machines = config['machines']
            if not isinstance(machines, list) or len(machines) == 0:
                logger.error("–°–µ–∫—Ü–∏—è 'machines' –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–µ–ø—É—Å—Ç—ã–º —Å–ø–∏—Å–∫–æ–º")
                return False

            # –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–∞–∂–¥–æ–π –º–∞—à–∏–Ω—ã
            for i, machine in enumerate(machines):
                if not self._validate_machine_config(machine, i):
                    return False

            return True

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            return False

    def _validate_machine_config(self, machine: Dict[str, Any], index: int) -> bool:
        """
        –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –æ–¥–Ω–æ–π –º–∞—à–∏–Ω—ã

        Args:
            machine: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–∞—à–∏–Ω—ã
            index: –ò–Ω–¥–µ–∫—Å –º–∞—à–∏–Ω—ã –≤ —Å–ø–∏—Å–∫–µ

        Returns:
            True –µ—Å–ª–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–∞–ª–∏–¥–Ω–∞
        """
        required_fields = ['template_vmid']
        optional_fields = ['device_type', 'name', 'template_node', 'networks', 'full_clone']

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        for field in required_fields:
            if field not in machine:
                logger.error(f"–ú–∞—à–∏–Ω–∞ {index}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ '{field}'")
                return False

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ template_vmid
        if not isinstance(machine['template_vmid'], int):
            logger.error(f"–ú–∞—à–∏–Ω–∞ {index}: –ø–æ–ª–µ 'template_vmid' –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º")
            return False

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        if 'device_type' in machine:
            if machine['device_type'] not in ['linux', 'ecorouter']:
                logger.error(f"–ú–∞—à–∏–Ω–∞ {index}: –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ç–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ '{machine['device_type']}'")
                return False

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ full_clone
        if 'full_clone' in machine:
            if not isinstance(machine['full_clone'], bool):
                logger.error(f"–ú–∞—à–∏–Ω–∞ {index}: –ø–æ–ª–µ 'full_clone' –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å true/false")
                return False

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ç–µ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        if 'networks' in machine:
            if not isinstance(machine['networks'], list):
                logger.error(f"–ú–∞—à–∏–Ω–∞ {index}: –ø–æ–ª–µ 'networks' –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å–ø–∏—Å–∫–æ–º")
                return False

            for j, network in enumerate(machine['networks']):
                if not isinstance(network, dict):
                    logger.error(f"–ú–∞—à–∏–Ω–∞ {index}, —Å–µ—Ç—å {j}: –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ–±—ä–µ–∫—Ç–æ–º")
                    return False

                if 'bridge' not in network:
                    logger.error(f"–ú–∞—à–∏–Ω–∞ {index}, —Å–µ—Ç—å {j}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ 'bridge'")
                    return False

        return True
