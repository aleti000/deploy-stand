"""
–ú–æ–¥—É–ª—å —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö –º–∞—à–∏–Ω

–†–µ–∞–ª–∏–∑—É–µ—Ç —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ —Å —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω—ã–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º —Å—Ç–µ–Ω–¥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
–ø–æ –≤—Å–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–º –Ω–æ–¥–∞–º —Å –ø–æ–ª–Ω–æ–π –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å—é –æ—Ç –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª–µ–π.
"""

import logging
import os
import secrets
import string
import time
import yaml
from typing import Dict, List, Any, Optional
from core.modules.deployment.basic_deployer import BasicDeployer
from core.proxmox.proxmox_client import ProxmoxClient
from core.interfaces.balancing_interface import BalancingInterface

logger = logging.getLogger(__name__)


class BalancedDeployer(BasicDeployer):
    """–°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞—Ç–µ–ª—å –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö –º–∞—à–∏–Ω"""

    def __init__(self, proxmox_client: ProxmoxClient, balancing_module: BalancingInterface = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞—Ç–µ–ª—è

        Args:
            proxmox_client: –ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Proxmox API
            balancing_module: –ú–æ–¥—É–ª—å –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏ –Ω–∞–≥—Ä—É–∑–∫–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é SmartBalancer)
        """
        super().__init__(proxmox_client)

        if balancing_module is None:
            # –ò–º–ø–æ—Ä—Ç –∑–¥–µ—Å—å —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
            from core.modules.balancing.smart_balancer import SmartBalancer
            self.balancer = SmartBalancer(proxmox_client)
        else:
            self.balancer = balancing_module

    def deploy_configuration(self, users: List[str], config: Dict[str, Any],
                           node_selection: str = "balanced", target_node: str = None) -> Dict[str, str]:
        """
        –†–∞–∑–≤–µ—Ä–Ω—É—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö –º–∞—à–∏–Ω —Å –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏

        Args:
            users: –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
            config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
            node_selection: –°—Ç—Ä–∞—Ç–µ–≥–∏—è –≤—ã–±–æ—Ä–∞ –Ω–æ–¥—ã (–≤—Å–µ–≥–¥–∞ "balanced")
            target_node: –¶–µ–ª–µ–≤–∞—è –Ω–æ–¥–∞ (–∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è –≤ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ)

        Returns:
            –°–ª–æ–≤–∞—Ä—å {–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: –ø–∞—Ä–æ–ª—å}
        """
        results = {}

        try:
            logger.info("–ù–∞—á–∏–Ω–∞–µ–º —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ")

            # –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–æ–¥
            nodes = self.proxmox.get_nodes()
            if not nodes:
                raise ValueError("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–æ–¥ –¥–ª—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è")

            logger.info(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–æ–¥—ã: {nodes}")

            # –†–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –Ω–æ–¥–∞–º —Å –ø–æ–º–æ—â—å—é –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤—â–∏–∫–∞
            distribution = self.balancer.distribute_deployment(users, nodes, config)
            logger.info(f"–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –Ω–æ–¥–∞–º: {distribution}")

            # –†–∞–∑–≤–µ—Ä–Ω—É—Ç—å –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–π –Ω–æ–¥–µ
            for node, node_users in distribution.items():
                if not node_users:
                    continue

                logger.info(f"–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ {len(node_users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ –Ω–æ–¥–µ {node}")

                for user in node_users:
                    try:
                        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        deploy_strategy = self._determine_deployment_strategy(user, config, node)

                        if deploy_strategy == "local":
                            logger.info(f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user} –Ω–∞ –Ω–æ–¥–µ {node}")
                            user_result = self._deploy_for_user_local(user, config, node)
                        else:  # remote
                            logger.info(f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user} –Ω–∞ –Ω–æ–¥–µ {node}")
                            # –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å —à–∞–±–ª–æ–Ω—ã –¥–ª—è —Ü–µ–ª–µ–≤–æ–π –Ω–æ–¥—ã
                            template_mapping = self._prepare_templates_for_target_node(config, node)
                            user_result = self._deploy_for_user_remote(user, config, node, template_mapping)

                        results.update(user_result)

                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user} –Ω–∞ –Ω–æ–¥–µ {node}: {e}")
                        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –¥—Ä—É–≥–∏–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
                        continue

            # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–µ—Ç–µ–≤—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–∞ –∑–∞–¥–µ–π—Å—Ç–≤–æ–≤–∞–Ω–Ω—ã—Ö –Ω–æ–¥–∞—Ö –ø–æ—Å–ª–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
            affected_nodes = set()
            for node, users in distribution.items():
                if users:  # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–∞ –Ω–æ–¥–µ –±—ã–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
                    affected_nodes.add(node)

            if affected_nodes:
                print("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Ç–µ–≤—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –Ω–∞ –∑–∞–¥–µ–π—Å—Ç–≤–æ–≤–∞–Ω–Ω—ã—Ö –Ω–æ–¥–∞—Ö...")
                for node in affected_nodes:
                    try:
                        if self.proxmox.reload_node_network(node):
                            print(f"  ‚úÖ –°–µ—Ç—å –Ω–æ–¥—ã {node} –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
                        else:
                            print(f"  ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–µ—Ç—å –Ω–æ–¥—ã {node}")
                    except Exception as e:
                        print(f"  ‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Ç–∏ –Ω–æ–¥—ã {node}: {e}")

            logger.info(f"–°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –¥–ª—è {len(results)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            return results

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è: {e}")
            raise

    def _determine_deployment_strategy(self, user: str, config: Dict[str, Any], target_node: str) -> str:
        """
        –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        Args:
            user: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
            target_node: –¶–µ–ª–µ–≤–∞—è –Ω–æ–¥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        Returns:
            "local" –µ—Å–ª–∏ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –Ω–∞ –Ω–æ–¥–µ —à–∞–±–ª–æ–Ω–∞, "remote" –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
        """
        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Å–µ template_node –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        for machine_config in config.get('machines', []):
            template_node = machine_config.get('template_node')
            if template_node == target_node:
                # –•–æ—Ç—è –±—ã –æ–¥–∏–Ω —à–∞–±–ª–æ–Ω –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Ü–µ–ª–µ–≤–æ–π –Ω–æ–¥–µ
                return "local"

        # –í—Å–µ —à–∞–±–ª–æ–Ω—ã –Ω–∞ –¥—Ä—É–≥–∏—Ö –Ω–æ–¥–∞—Ö
        return "remote"

    def validate_config(self, config: Dict[str, Any]) -> bool:
        """
        –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è

        Args:
            config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏

        Returns:
            True –µ—Å–ª–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–∞–ª–∏–¥–Ω–∞
        """
        try:
            # –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –±–∞–∑–æ–≤—É—é –≤–∞–ª–∏–¥–∞—Ü–∏—é
            if not super().validate_config(config):
                return False

            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª—è —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
            machines = config.get('machines', [])
            template_nodes = set()

            # –°–æ–±—Ä–∞—Ç—å –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ template_node
            for machine in machines:
                template_node = machine.get('template_node')
                if template_node:
                    template_nodes.add(template_node)

            if not template_nodes:
                logger.error("–í –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã template_node –¥–ª—è –º–∞—à–∏–Ω")
                return False

            # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å template_node
            available_nodes = set(self.proxmox.get_nodes())
            for template_node in template_nodes:
                if template_node not in available_nodes:
                    logger.error(f"–®–∞–±–ª–æ–Ω–Ω–∞—è –Ω–æ–¥–∞ {template_node} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
                    return False

            return True

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            return False

    def _create_machine_local(self, machine_config: Dict[str, Any], pool: str) -> None:
        """
        –°–æ–∑–¥–∞—Ç—å –≤–∏—Ä—Ç—É–∞–ª—å–Ω—É—é –º–∞—à–∏–Ω—É –Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ–π –Ω–æ–¥–µ —Å —à–∞–±–ª–æ–Ω–∞–º–∏

        Args:
            machine_config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–∞—à–∏–Ω—ã
            pool: –ò–º—è –ø—É–ª–∞
        """
        try:
            # –ü–æ–ª—É—á–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –º–∞—à–∏–Ω—ã
            template_node = machine_config['template_node']
            template_vmid = machine_config['template_vmid']
            device_type = machine_config.get('device_type', 'linux')
            name = machine_config.get('name', f"vm-{template_vmid}-{pool}")
            full_clone = machine_config.get('full_clone', False)

            # –ü–æ–ª—É—á–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–π VMID
            new_vmid = self.proxmox.get_next_vmid()

            # –ö–ª–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –≤–∏—Ä—Ç—É–∞–ª—å–Ω—É—é –º–∞—à–∏–Ω—É –Ω–∞ —Ç–æ–π –∂–µ –Ω–æ–¥–µ –≥–¥–µ —à–∞–±–ª–æ–Ω
            task_id = self.proxmox.clone_vm(
                template_node=template_node,
                template_vmid=template_vmid,
                target_node=template_node,  # –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –Ω–∞ —Ç–æ–π –∂–µ –Ω–æ–¥–µ
                new_vmid=new_vmid,
                name=name,
                pool=pool,
                full_clone=full_clone
            )

            # –û–∂–∏–¥–∞—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            if not self.proxmox.wait_for_task(task_id, template_node):
                raise Exception(f"–û—à–∏–±–∫–∞ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è VM {new_vmid}")

            # –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Å–µ—Ç—å –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞
            networks = machine_config.get('networks', [])
            if networks:
                self._configure_machine_network(new_vmid, template_node, networks, pool, device_type)

            # –í—ã–¥–∞—Ç—å –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–∞ —Å–æ–∑–¥–∞–Ω–Ω—É—é VM
            user = pool + '@pve'  # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–ª–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∏–º–µ–Ω–∏ –ø—É–ª–∞
            if not self._grant_vm_permissions(user, template_node, new_vmid):
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–¥–∞—Ç—å –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user} –Ω–∞ VM {new_vmid}")

            logger.info(f"–ú–∞—à–∏–Ω–∞ {name} (VMID: {new_vmid}) —Å–æ–∑–¥–∞–Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ –Ω–∞ –Ω–æ–¥–µ {template_node}")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω–æ–π –º–∞—à–∏–Ω—ã: {e}")
            raise

    def _grant_vm_permissions(self, user: str, node: str, vmid: int) -> bool:
        """
        –í—ã–¥–∞—Ç—å –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –≤–∏—Ä—Ç—É–∞–ª—å–Ω—É—é –º–∞—à–∏–Ω—É

        Args:
            user: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, "student1@pve")
            node: –ù–æ–¥–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è VM
            vmid: VMID –º–∞—à–∏–Ω—ã

        Returns:
            True –µ—Å–ª–∏ –ø—Ä–∞–≤–∞ –≤—ã–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ
        """
        try:
            # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∞–≤–∞ PVEVMUser –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é VM
            # –ü—Ä–∞–≤–∞ –≤—ã–¥–∞—é—Ç—Å—è –Ω–∞ –ø—É—Ç—å /vms/{vmid}
            permissions = ["PVEVMUser"]

            for permission in permissions:
                self.proxmox.api.access.acl.put(
                    users=user,
                    path=f"/vms/{vmid}",
                    roles=permission,
                    propagate=0  # –ù–µ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—è—Ç—å –Ω–∞ –¥–æ—á–µ—Ä–Ω–∏–µ –æ–±—ä–µ–∫—Ç—ã
                )

            logger.info(f"–ü—Ä–∞–≤–∞ PVEVMUser –≤—ã–¥–∞–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user} –Ω–∞ VM {vmid} –Ω–∞ –Ω–æ–¥–µ {node}")
            return True

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–¥–∞—á–∏ –ø—Ä–∞–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user} –Ω–∞ VM {vmid}: {e}")
            return False

    def _prepare_templates_for_target_node(self, config: Dict[str, Any], target_node: str) -> Dict[str, int]:
        """
        –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å —à–∞–±–ª–æ–Ω—ã –¥–ª—è —Ü–µ–ª–µ–≤–æ–π –Ω–æ–¥—ã

        –ü—Ä–æ—Ü–µ—Å—Å:
        1. Full clone –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞
        2. –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ —à–∞–±–ª–æ–Ω
        3. –ú–∏–≥—Ä–∞—Ü–∏—è –Ω–∞ —Ü–µ–ª–µ–≤—É—é –Ω–æ–¥—É

        Args:
            config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
            target_node: –¶–µ–ª–µ–≤–∞—è –Ω–æ–¥–∞

        Returns:
            Mapping –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö VMID -> –ª–æ–∫–∞–ª—å–Ω—ã—Ö VMID –Ω–∞ —Ü–µ–ª–µ–≤–æ–π –Ω–æ–¥–µ
        """
        template_mapping = {}

        # –ü–æ–ª—É—á–∏—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        unique_templates = set()
        for machine_config in config.get('machines', []):
            template_key = f"{machine_config['template_vmid']}:{machine_config['template_node']}"
            unique_templates.add(template_key)

        logger.info(f"–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ {len(unique_templates)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤ –¥–ª—è –Ω–æ–¥—ã {target_node}")

        for template_key in unique_templates:
            try:
                original_vmid, template_node = template_key.split(':')
                original_vmid = int(original_vmid)

                # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–π —à–∞–±–ª–æ–Ω –Ω–∞ —Ü–µ–ª–µ–≤–æ–π –Ω–æ–¥–µ
                local_template_vmid = self._find_existing_template_on_node(original_vmid, target_node)
                if local_template_vmid:
                    template_mapping[template_key] = local_template_vmid
                    logger.info(f"–ù–∞–π–¥–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —à–∞–±–ª–æ–Ω {local_template_vmid} –Ω–∞ –Ω–æ–¥–µ {target_node}")
                    continue

                # –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –Ω–æ–≤—ã–π —à–∞–±–ª–æ–Ω
                local_template_vmid = self._prepare_single_template(original_vmid, template_node, target_node)
                if local_template_vmid:
                    template_mapping[template_key] = local_template_vmid
                else:
                    raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å —à–∞–±–ª–æ–Ω {template_key}")

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ —à–∞–±–ª–æ–Ω–∞ {template_key}: {e}")
                raise

        return template_mapping

    def _prepare_single_template(self, original_vmid: int, template_node: str, target_node: str) -> int:
        """
        –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –æ–¥–∏–Ω —à–∞–±–ª–æ–Ω –¥–ª—è —Ü–µ–ª–µ–≤–æ–π –Ω–æ–¥—ã

        Args:
            original_vmid: VMID –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞
            template_node: –ù–æ–¥–∞ –≥–¥–µ —Ö—Ä–∞–Ω–∏—Ç—Å—è –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —à–∞–±–ª–æ–Ω
            target_node: –¶–µ–ª–µ–≤–∞—è –Ω–æ–¥–∞

        Returns:
            VMID –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞ –Ω–∞ —Ü–µ–ª–µ–≤–æ–π –Ω–æ–¥–µ
        """
        try:
            # 1. Full clone –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞ –Ω–∞ —Ç–æ–π –∂–µ –Ω–æ–¥–µ
            clone_vmid = self.proxmox.get_next_vmid()
            clone_name = f"template-clone-{original_vmid}-{int(time.time())}"

            logger.info(f"–°–æ–∑–¥–∞–Ω–∏–µ full clone VM {original_vmid} -> VM {clone_vmid}")
            clone_task = self.proxmox.clone_vm(
                template_node=template_node,
                template_vmid=original_vmid,
                target_node=template_node,  # –ö–ª–æ–Ω–∏—Ä—É–µ–º –Ω–∞ —Ç–æ–π –∂–µ –Ω–æ–¥–µ
                new_vmid=clone_vmid,
                name=clone_name,
                full_clone=True  # –í–∞–∂–Ω–æ: full clone –¥–ª—è –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
            )

            if not self.proxmox.wait_for_task(clone_task, template_node):
                raise Exception(f"–û—à–∏–±–∫–∞ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è VM {clone_vmid}")

            # 2. –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ —à–∞–±–ª–æ–Ω
            logger.info(f"–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ VM {clone_vmid} –≤ —à–∞–±–ª–æ–Ω")
            if not self.proxmox.convert_to_template(template_node, clone_vmid):
                raise Exception(f"–û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è VM {clone_vmid} –≤ —à–∞–±–ª–æ–Ω")

            # 3. –ú–∏–≥—Ä–∞—Ü–∏—è –Ω–∞ —Ü–µ–ª–µ–≤—É—é –Ω–æ–¥—É (–µ—Å–ª–∏ –Ω–æ–¥—ã —Ä–∞–∑–Ω—ã–µ)
            if template_node != target_node:
                logger.info(f"–ú–∏–≥—Ä–∞—Ü–∏—è —à–∞–±–ª–æ–Ω–∞ VM {clone_vmid} —Å {template_node} –Ω–∞ {target_node}")
                migrate_task = self.proxmox.migrate_vm(
                    source_node=template_node,
                    target_node=target_node,
                    vmid=clone_vmid,
                    online=False  # –®–∞–±–ª–æ–Ω—ã –º–∏–≥—Ä–∞–∏—Ä—É–µ–º offline
                )

                if not self.proxmox.wait_for_task(migrate_task, template_node):
                    raise Exception(f"–û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ VM {clone_vmid}")

            logger.info(f"–®–∞–±–ª–æ–Ω VM {clone_vmid} –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω –Ω–∞ –Ω–æ–¥–µ {target_node}")

            # –û–±–Ω–æ–≤–∏—Ç—å mapper_template
            self._update_mapper_template(original_vmid, target_node, clone_vmid)

            return clone_vmid

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ —à–∞–±–ª–æ–Ω–∞ VM {original_vmid}: {e}")
            # –ü–æ–ø—ã—Ç–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            try:
                if 'clone_vmid' in locals():
                    self.proxmox.delete_vm(template_node, clone_vmid)
            except:
                pass
            raise

    def _find_existing_template_on_node(self, original_vmid: int, node: str) -> Optional[int]:
        """
        –ù–∞–π—Ç–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–π —à–∞–±–ª–æ–Ω –Ω–∞ –Ω–æ–¥–µ

        –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç API, –∑–∞—Ç–µ–º mapper_template –∫–∞–∫ –∫—ç—à

        Args:
            original_vmid: VMID –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞
            node: –ù–æ–¥–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞

        Returns:
            VMID –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞ –∏–ª–∏ None
        """
        try:
            # 1. –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —á–µ—Ä–µ–∑ API (–æ—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥)
            vms = self.proxmox.get_vms_on_node(node)
            for vm in vms:
                vm_name = vm.get('name', '')
                if vm_name.startswith(f"template-clone-{original_vmid}-") and vm.get('template', 0) == 1:
                    found_vmid = int(vm['vmid'])
                    logger.info(f"–ù–∞–π–¥–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —à–∞–±–ª–æ–Ω {found_vmid} —á–µ—Ä–µ–∑ API –¥–ª—è {original_vmid} –Ω–∞ {node}")
                    # –û–±–Ω–æ–≤–∏—Ç—å mapper_template —Å –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
                    self._update_mapper_template(original_vmid, node, found_vmid)
                    return found_vmid

            # 2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å mapper_template —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ API –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–µ–ª
            mapper_data = self._load_mapper_template()
            template_mapping = mapper_data.get('template_mapping', {})
            original_mapping = template_mapping.get(original_vmid, {})
            local_vmid = original_mapping.get(node)

            if local_vmid:
                logger.warning(f"–®–∞–±–ª–æ–Ω {local_vmid} –Ω–∞–π–¥–µ–Ω –≤ mapper_template, –Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ API –¥–ª—è {original_vmid} –Ω–∞ {node}")
                logger.info("–ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —à–∞–±–ª–æ–Ω")
                # –£–¥–∞–ª–∏—Ç—å —É—Å—Ç–∞—Ä–µ–≤—à—É—é –∑–∞–ø–∏—Å—å –∏–∑ mapper_template
                if node in original_mapping:
                    del original_mapping[node]
                    self._save_mapper_template(mapper_data)

            return None
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —à–∞–±–ª–æ–Ω–∞: {e}")
            return None

    def _create_machine_remote(self, machine_config: Dict[str, Any],
                              target_node: str, pool: str, template_mapping: Dict[str, int]) -> None:
        """
        –°–æ–∑–¥–∞—Ç—å –≤–∏—Ä—Ç—É–∞–ª—å–Ω—É—é –º–∞—à–∏–Ω—É –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞

        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –º–∞—à–∏–Ω—ã –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º

        Args:
            machine_config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–∞—à–∏–Ω—ã
            target_node: –¶–µ–ª–µ–≤–∞—è –Ω–æ–¥–∞
            pool: –ò–º—è –ø—É–ª–∞
            template_mapping: Mapping —à–∞–±–ª–æ–Ω–æ–≤
        """
        try:
            # –ü–æ–ª—É—á–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –º–∞—à–∏–Ω—ã
            original_vmid = machine_config['template_vmid']
            template_node = machine_config['template_node']
            template_key = f"{original_vmid}:{template_node}"
            device_type = machine_config.get('device_type', 'linux')
            name = machine_config.get('name', f"vm-{original_vmid}-{pool}")
            full_clone = machine_config.get('full_clone', False)

            # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –º–∞—à–∏–Ω–∞ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º –≤ –ø—É–ª–µ
            if self._machine_exists_in_pool(name, pool):
                logger.info(f"–ú–∞—à–∏–Ω–∞ {name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ø—É–ª–µ {pool}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ")
                return

            # –ù–∞–π—Ç–∏ –ª–æ–∫–∞–ª—å–Ω—ã–π —à–∞–±–ª–æ–Ω
            local_template_vmid = template_mapping.get(template_key)
            if not local_template_vmid:
                raise Exception(f"–õ–æ–∫–∞–ª—å–Ω—ã–π —à–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è {template_key}")

            # –ü–æ–ª—É—á–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–π VMID
            new_vmid = self.proxmox.get_next_vmid()

            # –ö–ª–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞
            task_id = self.proxmox.clone_vm(
                template_node=target_node,
                template_vmid=local_template_vmid,
                target_node=target_node,
                new_vmid=new_vmid,
                name=name,
                pool=pool,
                full_clone=full_clone
            )

            # –û–∂–∏–¥–∞—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            if not self.proxmox.wait_for_task(task_id, target_node):
                raise Exception(f"–û—à–∏–±–∫–∞ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è VM {new_vmid}")

            # –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Å–µ—Ç—å –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞
            networks = machine_config.get('networks', [])
            if networks:
                self._configure_machine_network(new_vmid, target_node, networks, pool, device_type)

            # –í—ã–¥–∞—Ç—å –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–∞ —Å–æ–∑–¥–∞–Ω–Ω—É—é VM
            user = pool + '@pve'  # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–ª–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∏–º–µ–Ω–∏ –ø—É–ª–∞
            if not self._grant_vm_permissions(user, target_node, new_vmid):
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–¥–∞—Ç—å –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user} –Ω–∞ VM {new_vmid}")

            logger.info(f"–ú–∞—à–∏–Ω–∞ {name} (VMID: {new_vmid}) —Å–æ–∑–¥–∞–Ω–∞ –Ω–∞ –Ω–æ–¥–µ {target_node} –∏–∑ —à–∞–±–ª–æ–Ω–∞ {local_template_vmid}")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —É–¥–∞–ª–µ–Ω–Ω–æ–π –º–∞—à–∏–Ω—ã: {e}")
            raise

    def _load_mapper_template(self) -> Dict[str, Any]:
        """
        –ó–∞–≥—Ä—É–∑–∏—Ç—å mapper_template –∏–∑ —Ñ–∞–π–ª–∞

        Returns:
            –î–∞–Ω–Ω—ã–µ –∏–∑ mapper_template.yml
        """
        mapper_path = os.path.join('data', 'mapper_template.yml')
        try:
            if os.path.exists(mapper_path):
                with open(mapper_path, 'r', encoding='utf-8') as f:
                    return yaml.safe_load(f) or {}
            else:
                logger.warning("–§–∞–π–ª mapper_template.yml –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π")
                return {}
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ mapper_template.yml: {e}")
            return {}

    def _save_mapper_template(self, data: Dict[str, Any]) -> None:
        """
        –°–æ—Ö—Ä–∞–Ω–∏—Ç—å mapper_template –≤ —Ñ–∞–π–ª

        Args:
            data: –î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        """
        mapper_path = os.path.join('data', 'mapper_template.yml')
        try:
            os.makedirs(os.path.dirname(mapper_path), exist_ok=True)
            with open(mapper_path, 'w', encoding='utf-8') as f:
                yaml.dump(data, f, default_flow_style=False, allow_unicode=True)
            logger.info("mapper_template.yml —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è mapper_template.yml: {e}")

    def _machine_exists_in_pool(self, machine_name: str, pool: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –º–∞—à–∏–Ω–∞ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º –≤ –ø—É–ª–µ

        Args:
            machine_name: –ò–º—è –º–∞—à–∏–Ω—ã
            pool: –ò–º—è –ø—É–ª–∞

        Returns:
            True –µ—Å–ª–∏ –º–∞—à–∏–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        """
        try:
            pool_vms = self.proxmox.get_pool_vms(pool)
            for vm_info in pool_vms:
                if vm_info.get('name') == machine_name:
                    logger.info(f"–ú–∞—à–∏–Ω–∞ {machine_name} –Ω–∞–π–¥–µ–Ω–∞ –≤ –ø—É–ª–µ {pool}")
                    return True
            return False
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –º–∞—à–∏–Ω—ã {machine_name} –≤ –ø—É–ª–µ {pool}: {e}")
            return True  # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Å—á–∏—Ç–∞–µ–º —á—Ç–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç

    def _update_mapper_template(self, original_vmid: int, node: str, local_vmid: int) -> None:
        """
        –û–±–Ω–æ–≤–∏—Ç—å mapper_template —Å –Ω–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —à–∞–±–ª–æ–Ω–µ

        Args:
            original_vmid: VMID –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞
            node: –ù–æ–¥–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
            local_vmid: VMID –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞
        """
        try:
            mapper_data = self._load_mapper_template()
            template_mapping = mapper_data.setdefault('template_mapping', {})

            original_mapping = template_mapping.setdefault(original_vmid, {})
            original_mapping[node] = local_vmid

            self._save_mapper_template(mapper_data)
            logger.info(f"_mapper_template –æ–±–Ω–æ–≤–ª–µ–Ω: {original_vmid} -> {node}:{local_vmid}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è mapper_template: {e}")

    def _deploy_for_user_local(self, user: str, config: Dict[str, Any], target_node: str) -> Dict[str, str]:
        """
        –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –¥–ª—è –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ª–æ–∫–∞–ª—å–Ω–æ

        Args:
            user: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
            target_node: –¶–µ–ª–µ–≤–∞—è –Ω–æ–¥–∞

        Returns:
            –°–ª–æ–≤–∞—Ä—å {–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: –ø–∞—Ä–æ–ª—å}
        """
        try:
            # –°–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—É–ª
            success, password = self._create_user_and_pool(user)
            if not success:
                raise Exception(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user}")

            # –°–æ–∑–¥–∞—Ç—å –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ –º–∞—à–∏–Ω—ã –ª–æ–∫–∞–ª—å–Ω–æ
            pool_name = user.split('@')[0]
            for machine_config in config.get('machines', []):
                self._create_machine_local(machine_config, pool_name)

            logger.info(f"–õ–æ–∫–∞–ª—å–Ω–æ–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user} –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
            return {user: password}

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user}: {e}")
            raise

    def _deploy_for_user_remote(self, user: str, config: Dict[str, Any],
                               target_node: str, template_mapping: Dict[str, int]) -> Dict[str, str]:
        """
        –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –¥–ª—è –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–¥–∞–ª–µ–Ω–Ω–æ

        Args:
            user: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
            target_node: –¶–µ–ª–µ–≤–∞—è –Ω–æ–¥–∞
            template_mapping: Mapping —à–∞–±–ª–æ–Ω–æ–≤

        Returns:
            –°–ª–æ–≤–∞—Ä—å {–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: –ø–∞—Ä–æ–ª—å}
        """
        try:
            # –°–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—É–ª
            success, password = self._create_user_and_pool(user)
            if not success:
                raise Exception(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user}")

            # –°–æ–∑–¥–∞—Ç—å –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ –º–∞—à–∏–Ω—ã –∏–∑ –ª–æ–∫–∞–ª—å–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤
            pool_name = user.split('@')[0]
            for machine_config in config.get('machines', []):
                self._create_machine_remote(machine_config, target_node, pool_name, template_mapping)

            logger.info(f"–£–¥–∞–ª–µ–Ω–Ω–æ–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user} –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
            return {user: password}

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user}: {e}")
            raise

    def _create_user_and_pool(self, user: str) -> tuple[bool, str]:
        """
        –°–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—É–ª

        Args:
            user: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        Returns:
            –ö–æ—Ä—Ç–µ–∂ (—É—Å–ø–µ—Ö, –ø–∞—Ä–æ–ª—å)
        """
        try:
            # –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä–æ–ª—å
            password = self._generate_password()

            # –°–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if not self.proxmox.create_user(user, password):
                return False, ""

            # –°–æ–∑–¥–∞—Ç—å –ø—É–ª
            pool_name = user.split('@')[0]
            if not self.proxmox.create_pool(pool_name, f"Pool for {user}"):
                # –ï—Å–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—É–ª–∞ –Ω–µ—É–¥–∞—á–Ω–æ, —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                self._cleanup_user(user)
                return False, ""

            # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –ø—É–ª
            permissions = ["PVEVMAdmin"]
            if not self.proxmox.set_pool_permissions(user, pool_name, permissions):
                # –ï—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∞–≤ –Ω–µ—É–¥–∞—á–Ω–∞, –æ—á–∏—Å—Ç–∏—Ç—å —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã
                self._cleanup_user_and_pool(user, pool_name)
                return False, ""

            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user} –∏ –ø—É–ª {pool_name} —Å–æ–∑–¥–∞–Ω—ã")
            return True, password

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—É–ª–∞: {e}")
            return False, ""

    def _configure_machine_network(self, vmid: int, node: str, networks: List[Dict],
                                 pool: str, device_type: str) -> None:
        """
        –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Å–µ—Ç—å –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π –º–∞—à–∏–Ω—ã —á–µ—Ä–µ–∑ BridgeManager

        Args:
            vmid: VMID –º–∞—à–∏–Ω—ã
            node: –ù–æ–¥–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
            networks: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–µ—Ç–µ–π (—Å bridge alias'–∞–º–∏)
            pool: –ò–º—è –ø—É–ª–∞
            device_type: –¢–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        """
        try:
            # ‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ù–û: –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å BridgeManager –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –≤—ã–¥–µ–ª–µ–Ω–∏—è bridge!
            from core.modules.network.bridge_manager import BridgeManager
            bridge_manager = BridgeManager(self.proxmox)

            # –ü–ï–†–ï–î–ê–¢–¨ networks —Å alias'–∞–º–∏, BridgeManager –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –∏—Ö –≤ —Ä–µ–∞–ª—å–Ω—ã–µ bridge
            if not bridge_manager.configure_network(vmid, node, networks, pool, device_type):
                raise Exception(f"–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ç–∏ VM {vmid} —á–µ—Ä–µ–∑ BridgeManager")

            logger.info(f"–°–µ—Ç—å VM {vmid} –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ —á–µ—Ä–µ–∑ BridgeManager")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ç–∏ VM {vmid}: {e}")
            raise

    def _generate_password(self, length: int = 8) -> str:
        """–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è –æ–±—É—á–∞—é—â–∏—Ö —Å—Ç–µ–Ω–¥–æ–≤"""
        alphabet = string.digits  # –¢–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –æ–±—É—á–µ–Ω–∏–∏
        return ''.join(secrets.choice(alphabet) for _ in range(length))

    def _cleanup_user(self, user: str) -> None:
        """–û—á–∏—Å—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            logger.info(f"–û—á–∏—Å—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user}: {e}")

    def _cleanup_user_and_pool(self, user: str, pool: str) -> None:
        """–û—á–∏—Å—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—É–ª"""
        try:
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—É–ª–∞
            logger.info(f"–û—á–∏—Å—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user} –∏ –ø—É–ª–∞ {pool}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—É–ª–∞: {e}")

    def get_deployment_status(self, deployment_id: str) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è

        Args:
            deployment_id: ID —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è

        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
        """
        return {
            'deployment_id': deployment_id,
            'status': 'completed',
            'strategy': 'balanced',
            'balancer': self.balancer.__class__.__name__,
            'message': '–°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ'
        }
