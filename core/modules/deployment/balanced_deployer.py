"""
–ú–æ–¥—É–ª—å —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö –º–∞—à–∏–Ω

–†–µ–∞–ª–∏–∑—É–µ—Ç —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ —Å —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω—ã–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º —Å—Ç–µ–Ω–¥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
–ø–æ –≤—Å–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–º –Ω–æ–¥–∞–º —Å –ø–æ–ª–Ω–æ–π –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å—é –æ—Ç –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª–µ–π.

–†–ï–§–ê–ö–¢–û–†–ò–ù–ì: –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –±–∞–∑–æ–≤—ã—Ö –º–æ–¥—É–ª–µ–π
"""

import logging
from typing import Dict, List, Any, Optional
from core.modules.deployment.basic_deployer import BasicDeployer
from core.proxmox.proxmox_client import ProxmoxClient
from core.interfaces.balancing_interface import BalancingInterface
from core.modules.common.config_validator import ConfigValidator
from core.modules.common.deployment_utils import DeploymentUtils
from core.modules.users.user_manager import UserManager
from core.modules.templates.template_manager import TemplateManager
from core.modules.deployment.vm_factory import VMFactory

logger = logging.getLogger(__name__)


class BalancedDeployer(BasicDeployer):
    """–°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞—Ç–µ–ª—å –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö –º–∞—à–∏–Ω"""

    def __init__(self, proxmox_client: ProxmoxClient, balancing_module: BalancingInterface = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞—Ç–µ–ª—è

        Args:
            proxmox_client: –ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Proxmox API
            balancing_module: –ú–æ–¥—É–ª—å –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏ –Ω–∞–≥—Ä—É–∑–∫–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é SmartBalancer)
        """
        self.proxmox = proxmox_client
        self.utils = DeploymentUtils()
        self.validator = ConfigValidator()
        self.user_manager = UserManager(proxmox_client)
        self.template_manager = TemplateManager(proxmox_client)
        self.vm_factory = VMFactory(proxmox_client)

        if balancing_module is None:
            # –ò–º–ø–æ—Ä—Ç –∑–¥–µ—Å—å —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
            from core.modules.balancing.smart_balancer import SmartBalancer
            self.balancer = SmartBalancer(proxmox_client)
        else:
            self.balancer = balancing_module

    def deploy_configuration(self, users: List[str], config: Dict[str, Any],
                           node_selection: str = "balanced", target_node: str = None) -> Dict[str, str]:
        """
        –†–∞–∑–≤–µ—Ä–Ω—É—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö –º–∞—à–∏–Ω —Å –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏

        Args:
            users: –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
            config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
            node_selection: –°—Ç—Ä–∞—Ç–µ–≥–∏—è –≤—ã–±–æ—Ä–∞ –Ω–æ–¥—ã (–≤—Å–µ–≥–¥–∞ "balanced")
            target_node: –¶–µ–ª–µ–≤–∞—è –Ω–æ–¥–∞ (–∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è –≤ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ)

        Returns:
            –°–ª–æ–≤–∞—Ä—å {–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: –ø–∞—Ä–æ–ª—å}
        """
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        validation_result = self.validator.validate_deployment_config(config)
        if not validation_result.is_valid:
            error_msg = "–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:\n" + str(validation_result)
            logger.error(error_msg)
            raise ValueError(error_msg)

        results = {}

        try:
            logger.info("–ù–∞—á–∏–Ω–∞–µ–º —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ")

            # –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–æ–¥
            nodes = self.proxmox.get_nodes()
            if not nodes:
                raise ValueError("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–æ–¥ –¥–ª—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è")

            logger.info(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–æ–¥—ã: {nodes}")

            # –†–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –Ω–æ–¥–∞–º —Å –ø–æ–º–æ—â—å—é –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤—â–∏–∫–∞
            distribution = self.balancer.distribute_deployment(users, nodes, config)
            logger.info(f"–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –Ω–æ–¥–∞–º: {distribution}")

            # –†–∞–∑–≤–µ—Ä–Ω—É—Ç—å –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–π –Ω–æ–¥–µ
            for node, node_users in distribution.items():
                if not node_users:
                    continue

                logger.info(f"–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ {len(node_users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ –Ω–æ–¥–µ {node}")

                for user in node_users:
                    try:
                        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        deploy_strategy = self._determine_deployment_strategy(user, config, node)

                        if deploy_strategy == "local":
                            logger.info(f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user} –Ω–∞ –Ω–æ–¥–µ {node}")
                            user_result = self._deploy_for_user_local(user, config, node)
                        else:  # remote
                            logger.info(f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user} –Ω–∞ –Ω–æ–¥–µ {node}")
                            # –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å —à–∞–±–ª–æ–Ω—ã –¥–ª—è —Ü–µ–ª–µ–≤–æ–π –Ω–æ–¥—ã —á–µ—Ä–µ–∑ TemplateManager
                            template_mapping = self.template_manager.prepare_templates_for_target_node(config, node)
                            user_result = self._deploy_for_user_remote(user, config, node, template_mapping)

                        results.update(user_result)

                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user} –Ω–∞ –Ω–æ–¥–µ {node}: {e}")
                        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –¥—Ä—É–≥–∏–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
                        continue

            # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–µ—Ç–µ–≤—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–∞ –∑–∞–¥–µ–π—Å—Ç–≤–æ–≤–∞–Ω–Ω—ã—Ö –Ω–æ–¥–∞—Ö –ø–æ—Å–ª–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
            self._reload_affected_nodes_network(set(distribution.keys()))

            logger.info(f"–°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –¥–ª—è {len(results)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            return results

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è: {e}")
            raise

    def _determine_deployment_strategy(self, user: str, config: Dict[str, Any], target_node: str) -> str:
        """
        –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        Args:
            user: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
            target_node: –¶–µ–ª–µ–≤–∞—è –Ω–æ–¥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        Returns:
            "local" –µ—Å–ª–∏ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –Ω–∞ –Ω–æ–¥–µ —à–∞–±–ª–æ–Ω–∞, "remote" –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
        """
        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Å–µ template_node –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        for machine_config in config.get('machines', []):
            template_node = machine_config.get('template_node')
            if template_node == target_node:
                # –•–æ—Ç—è –±—ã –æ–¥–∏–Ω —à–∞–±–ª–æ–Ω –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Ü–µ–ª–µ–≤–æ–π –Ω–æ–¥–µ
                return "local"

        # –í—Å–µ —à–∞–±–ª–æ–Ω—ã –Ω–∞ –¥—Ä—É–≥–∏—Ö –Ω–æ–¥–∞—Ö
        return "remote"

    def validate_config(self, config: Dict[str, Any]) -> bool:
        """
        –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è

        Args:
            config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏

        Returns:
            True –µ—Å–ª–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–∞–ª–∏–¥–Ω–∞
        """
        # –ë–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —á–µ—Ä–µ–∑ ConfigValidator
        validation_result = self.validator.validate_deployment_config(config)
        if not validation_result.is_valid:
            return False

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª—è —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
        machines = config.get('machines', [])
        template_nodes = set()

        # –°–æ–±—Ä–∞—Ç—å –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ template_node
        for machine in machines:
            template_node = machine.get('template_node')
            if template_node:
                template_nodes.add(template_node)

        if not template_nodes:
            logger.error("–í –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã template_node –¥–ª—è –º–∞—à–∏–Ω")
            return False

        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å template_node
        available_nodes = set(self.proxmox.get_nodes())
        for template_node in template_nodes:
            if template_node not in available_nodes:
                logger.error(f"–®–∞–±–ª–æ–Ω–Ω–∞—è –Ω–æ–¥–∞ {template_node} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
                return False

        return True

    def _reload_affected_nodes_network(self, nodes: set):
        """
        –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–µ—Ç—å –Ω–∞ –∑–∞–¥–µ–π—Å—Ç–≤–æ–≤–∞–Ω–Ω—ã—Ö –Ω–æ–¥–∞—Ö

        Args:
            nodes: –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –∏–º–µ–Ω –Ω–æ–¥ –¥–ª—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏
        """
        if not nodes:
            return

        print("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Ç–µ–≤—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –Ω–∞ –∑–∞–¥–µ–π—Å—Ç–≤–æ–≤–∞–Ω–Ω—ã—Ö –Ω–æ–¥–∞—Ö...")
        for node in nodes:
            try:
                if self.proxmox.reload_node_network(node):
                    print(f"  ‚úÖ –°–µ—Ç—å –Ω–æ–¥—ã {node} –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
                else:
                    print(f"  ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–µ—Ç—å –Ω–æ–¥—ã {node}")
            except Exception as e:
                print(f"  ‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Ç–∏ –Ω–æ–¥—ã {node}: {e}")

    def get_deployment_status(self, deployment_id: str) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è

        Args:
            deployment_id: ID —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è

        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
        """
        return {
            'deployment_id': deployment_id,
            'status': 'completed',
            'strategy': 'balanced',
            'balancer': self.balancer.__class__.__name__,
            'message': '–°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ'
        }
