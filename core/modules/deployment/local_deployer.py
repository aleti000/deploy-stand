"""
–õ–æ–∫–∞–ª—å–Ω—ã–π –º–æ–¥—É–ª—å —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö –º–∞—à–∏–Ω

–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–µ—Ç –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ –º–∞—à–∏–Ω—ã –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ –Ω–∞ –Ω–æ–¥–µ,
–≥–¥–µ —Ö—Ä–∞–Ω—è—Ç—Å—è –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã.

–ü–û–õ–ù–û–°–¢–¨–Æ –ù–ï–ó–ê–í–ò–°–ò–ú–´–ô –ú–û–î–£–õ–¨ - –Ω–µ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª–µ–π —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
"""

import logging
import secrets
import string
import time
from typing import Dict, List, Any
from core.interfaces.deployment_interface import DeploymentInterface
from core.proxmox.proxmox_client import ProxmoxClient

logger = logging.getLogger(__name__)

# –ì–õ–û–ë–ê–õ–¨–ù–´–ô –ö–ï–® BRIDGE'–ï–ô - —Ä–∞–∑–¥–µ–ª—è–µ–º—ã–π –º–µ–∂–¥—É –≤—Å–µ–º–∏ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞–º–∏ deployer'–æ–≤!
# –§–û–†–ú–ê–¢: {node:poolsuffix:alias: allocated_bridge} –¥–ª—è –∏–∑–æ–ª—è—Ü–∏–∏ –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
_global_bridge_cache = {}  # {node:poolsuffix:alias: allocated_bridge}


class LocalDeployer(DeploymentInterface):
    """–õ–æ–∫–∞–ª—å–Ω—ã–π —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞—Ç–µ–ª—å –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö –º–∞—à–∏–Ω"""

    def __init__(self, proxmox_client: ProxmoxClient):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞—Ç–µ–ª—è

        Args:
            proxmox_client: –ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Proxmox API
        """
        self.proxmox = proxmox_client

    def deploy_configuration(self, users: List[str], config: Dict[str, Any],
                           node_selection: str = "auto", target_node: str = None) -> Dict[str, str]:
        """
        –†–∞–∑–≤–µ—Ä–Ω—É—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö –º–∞—à–∏–Ω –Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ–π –Ω–æ–¥–µ

        Args:
            users: –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
            config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
            node_selection: –°—Ç—Ä–∞—Ç–µ–≥–∏—è –≤—ã–±–æ—Ä–∞ –Ω–æ–¥—ã (–∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è, –≤—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–æ–¥—É —Å —à–∞–±–ª–æ–Ω–∞–º–∏)
            target_node: –¶–µ–ª–µ–≤–∞—è –Ω–æ–¥–∞ (–∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–æ–¥–∞ —à–∞–±–ª–æ–Ω–∞)

        Returns:
            –°–ª–æ–≤–∞—Ä—å {–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: –ø–∞—Ä–æ–ª—å}
        """
        results = {}

        try:
            # –†–∞–∑–≤–µ—Ä–Ω—É—Ç—å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            for user in users:
                user_result = self._deploy_for_user(user, config)
                results.update(user_result)

            logger.info(f"–õ–æ–∫–∞–ª—å–Ω–æ–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –¥–ª—è {len(results)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            return results

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è: {e}")
            raise

    def _deploy_for_user(self, user: str, config: Dict[str, Any]) -> Dict[str, str]:
        """
        –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –¥–ª—è –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ–π –Ω–æ–¥–µ

        Args:
            user: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è

        Returns:
            –°–ª–æ–≤–∞—Ä—å {–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: –ø–∞—Ä–æ–ª—å}
        """
        try:
            # –°–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—É–ª
            success, password = self._create_user_and_pool(user)
            if not success:
                raise Exception(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user}")

            # –°–æ–∑–¥–∞—Ç—å –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ –º–∞—à–∏–Ω—ã –Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ–π –Ω–æ–¥–µ (–≥–¥–µ —Ö—Ä–∞–Ω—è—Ç—Å—è —à–∞–±–ª–æ–Ω—ã)
            pool_name = user.split('@')[0]
            for machine_config in config.get('machines', []):
                self._create_machine_local(machine_config, pool_name)

            logger.info(f"–õ–æ–∫–∞–ª—å–Ω–æ–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user} –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
            return {user: password}

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user}: {e}")
            raise

    def _create_machine_local(self, machine_config: Dict[str, Any], pool: str) -> None:
        """
        –°–æ–∑–¥–∞—Ç—å –≤–∏—Ä—Ç—É–∞–ª—å–Ω—É—é –º–∞—à–∏–Ω—É –Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ–π –Ω–æ–¥–µ —Å —à–∞–±–ª–æ–Ω–∞–º–∏

        Args:
            machine_config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–∞—à–∏–Ω—ã
            pool: –ò–º—è –ø—É–ª–∞
        """
        try:
            # –ü–æ–ª—É—á–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –º–∞—à–∏–Ω—ã
            template_node = machine_config['template_node']
            template_vmid = machine_config['template_vmid']
            device_type = machine_config.get('device_type', 'linux')
            name = machine_config.get('name', f"vm-{template_vmid}-{pool}")
            full_clone = machine_config.get('full_clone', False)

            # –ü–æ–ª—É—á–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–π VMID
            new_vmid = self.proxmox.get_next_vmid()

            # –ö–ª–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –≤–∏—Ä—Ç—É–∞–ª—å–Ω—É—é –º–∞—à–∏–Ω—É –Ω–∞ —Ç–æ–π –∂–µ –Ω–æ–¥–µ –≥–¥–µ —à–∞–±–ª–æ–Ω
            task_id = self.proxmox.clone_vm(
                template_node=template_node,
                template_vmid=template_vmid,
                target_node=template_node,  # –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –Ω–∞ —Ç–æ–π –∂–µ –Ω–æ–¥–µ
                new_vmid=new_vmid,
                name=name,
                pool=pool,
                full_clone=full_clone
            )

            # –û–∂–∏–¥–∞—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            if not self.proxmox.wait_for_task(task_id, template_node):
                raise Exception(f"–û—à–∏–±–∫–∞ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è VM {new_vmid}")

            # –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Å–µ—Ç—å –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞
            networks = machine_config.get('networks', [])
            if networks:
                self._configure_machine_network(new_vmid, template_node, networks, pool, device_type)

            # –í—ã–¥–∞—Ç—å –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–∞ —Å–æ–∑–¥–∞–Ω–Ω—É—é VM
            user = pool + '@pve'  # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–ª–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∏–º–µ–Ω–∏ –ø—É–ª–∞
            if not self._grant_vm_permissions(user, template_node, new_vmid):
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–¥–∞—Ç—å –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user} –Ω–∞ VM {new_vmid}")

            # üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Å–µ—Ç–µ–≤—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è VM
            try:
                logger.info(f"üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Å–µ—Ç–∏ –Ω–∞ –Ω–æ–¥–µ {template_node} –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è VM {new_vmid}")
                if self.proxmox.reload_node_network(template_node):
                    logger.info(f"‚úÖ –°–µ—Ç—å –Ω–∞ –Ω–æ–¥–µ {template_node} —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω–∞")
                else:
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–µ—Ç—å –Ω–∞ –Ω–æ–¥–µ {template_node}")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Ç–∏ –Ω–∞ –Ω–æ–¥–µ {template_node}: {e}")
                # –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Å–µ—Ç–∏ –Ω–µ—É–¥–∞—á–Ω–∞

            logger.info(f"–ú–∞—à–∏–Ω–∞ {name} (VMID: {new_vmid}) —Å–æ–∑–¥–∞–Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ –Ω–∞ –Ω–æ–¥–µ {template_node}")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω–æ–π –º–∞—à–∏–Ω—ã: {e}")
            raise

    def _create_user_and_pool(self, user: str) -> tuple[bool, str]:
        """
        –°–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—É–ª

        Args:
            user: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        Returns:
            –ö–æ—Ä—Ç–µ–∂ (—É—Å–ø–µ—Ö, –ø–∞—Ä–æ–ª—å)
        """
        try:
            # –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä–æ–ª—å
            password = self._generate_password()

            # –°–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if not self.proxmox.create_user(user, password):
                return False, ""

            # –°–æ–∑–¥–∞—Ç—å –ø—É–ª
            pool_name = user.split('@')[0]
            if not self.proxmox.create_pool(pool_name, f"Pool for {user}"):
                # –ï—Å–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—É–ª–∞ –Ω–µ—É–¥–∞—á–Ω–æ, —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                self._cleanup_user(user)
                return False, ""

            # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –ø—É–ª
            permissions = ["PVEVMAdmin"]
            if not self.proxmox.set_pool_permissions(user, pool_name, permissions):
                # –ï—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∞–≤ –Ω–µ—É–¥–∞—á–Ω–∞, –æ—á–∏—Å—Ç–∏—Ç—å —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã
                self._cleanup_user_and_pool(user, pool_name)
                return False, ""

            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user} –∏ –ø—É–ª {pool_name} —Å–æ–∑–¥–∞–Ω—ã")
            return True, password

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—É–ª–∞: {e}")
            return False, ""

    def _configure_machine_network(self, vmid: int, node: str, networks: List[Dict],
                                 pool: str, device_type: str) -> None:
        """
        –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Å–µ—Ç—å –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π –º–∞—à–∏–Ω—ã (–≤—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å)

        Args:
            vmid: VMID –º–∞—à–∏–Ω—ã
            node: –ù–æ–¥–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
            networks: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–µ—Ç–µ–π (—Å bridge alias'–∞–º–∏)
            pool: –ò–º—è –ø—É–ª–∞
            device_type: –¢–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        """
        try:
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ bridge'—ã
            bridge_mapping = self._prepare_bridges(node, networks, pool)

            # –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤
            network_configs = self._prepare_network_configs(networks, bridge_mapping, device_type)

            # –ü–∞–∫–µ—Ç–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Å–µ—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤
            if not self.proxmox.configure_vm_network(node, vmid, network_configs):
                raise Exception(f"–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ç–∏ VM {vmid}")

            logger.info(f"–°–µ—Ç—å VM {vmid} –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ (–≤—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å)")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ç–∏ VM {vmid}: {e}")
            raise

    def _generate_password(self, length: int = 8) -> str:
        """–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è –æ–±—É—á–∞—é—â–∏—Ö —Å—Ç–µ–Ω–¥–æ–≤"""
        alphabet = string.digits  # –¢–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –æ–±—É—á–µ–Ω–∏–∏
        return ''.join(secrets.choice(alphabet) for _ in range(length))

    def _generate_mac_address(self) -> str:
        """–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π MAC –∞–¥—Ä–µ—Å"""
        mac = [0x52, 0x54, 0x00]  # QEMU/Libvirt prefix
        mac.extend(secrets.randbelow(256) for _ in range(3))
        return ':'.join(f'{b:02x}' for b in mac)

    def _allocate_bridge(self, node: str, bridge_name: str, pool: str,
                        reserved: bool = False) -> tuple[str, int]:
        """
        –í—ã–¥–µ–ª–∏—Ç—å bridge –¥–ª—è —Å–µ—Ç–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π VLAN

        –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–¥–∞–µ—Ç ALIAS (hq, inet, hq.100), —Å–∫—Ä–∏–ø—Ç –≤—ã–¥–µ–ª—è–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–π bridge (vmbr1000+)

        Args:
            node: –ù–æ–¥–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
            bridge_name: ALIAS bridge'–∞ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (hq, inet, hq.100, etc)
            pool: –ü—É–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            reserved: –§–ª–∞–≥ –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ bridge'–∞

        Returns:
            –ö–æ—Ä—Ç–µ–∂ (–∏–º—è_bridge, vlan_tag)
        """
        # –†–∞–∑–±–æ—Ä –∏–º–µ–Ω–∏ bridge –Ω–∞ –±–∞–∑–æ–≤–æ–µ –∏–º—è –∏ VLAN
        base_bridge_name, vlan_tag = self._parse_bridge_name(bridge_name)

        # Reserved bridge - –ø—Ä—è–º–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–µ–∑ allocation
        if reserved or bridge_name.startswith('**'):
            actual_bridge = bridge_name.strip('*')
            # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–π bridge
            if not self.proxmox.bridge_exists(node, actual_bridge):
                logger.info(f"–°–æ–∑–¥–∞–µ–º –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–π bridge {actual_bridge} –Ω–∞ –Ω–æ–¥–µ {node}")
                # –°–æ–∑–¥–∞—Ç—å VLAN-aware bridge –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω VLAN
                if vlan_tag > 0:
                    self.proxmox.create_bridge(node, actual_bridge, vlan_aware=True)
                else:
                    self.proxmox.create_bridge(node, actual_bridge)
            return actual_bridge, vlan_tag

        # Bridge name –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å ALIAS, –∞ –Ω–µ —Ä–µ–∞–ª—å–Ω—ã–º bridge –∏–º–µ–Ω–µ–º
        if base_bridge_name.startswith('vmbr'):
            logger.debug(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ä–µ–∞–ª—å–Ω–æ–µ –∏–º—è bridge '{base_bridge_name}' –≤–º–µ—Å—Ç–æ alias")
            return base_bridge_name, vlan_tag  # –í–µ—Ä–Ω–µ–º –∫–∞–∫ –µ—Å—Ç—å, –Ω–æ —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º

        # –ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ node + pool + alias –¥–ª—è –ò–ó–û–õ–Ø–¶–ò–ò –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏!
        # –ö–∞–∂–¥—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∞–µ—Ç —Å–≤–æ–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π bridge –¥–ª—è –∫–∞–∂–¥–æ–≥–æ alias
        pool_suffix = pool.split('@')[0] if '@' in pool else pool  # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –ø—É–ª–∞ (student1)
        cache_key = f"{node}:{pool_suffix}:{bridge_name}"

        if cache_key in _global_bridge_cache:
            allocated_bridge = _global_bridge_cache[cache_key]
            # –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ bridge
            if not self.proxmox.bridge_exists(node, allocated_bridge):
                logger.warning(f"Bridge {allocated_bridge} –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –∑–∞–Ω–æ–≤–æ –¥–ª—è alias '{bridge_name}' –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {pool_suffix}")
                # –°–æ–∑–¥–∞—Ç—å VLAN-aware bridge –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω VLAN
                if vlan_tag > 0:
                    self.proxmox.create_bridge(node, allocated_bridge, vlan_aware=True)
                else:
                    self.proxmox.create_bridge(node, allocated_bridge)
            logger.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{pool_suffix}' - Alias '{bridge_name}' -> bridge '{allocated_bridge}' (–∏–∑ –∫–µ—à–∞)")
            return allocated_bridge, vlan_tag

        # –ü–µ—Ä–≤—ã–π —Ä–∞–∑ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è+alias - –≤—ã–¥–µ–ª—è–µ–º –Ω–æ–≤—ã–π bridge
        allocated_bridge = self._allocate_new_bridge_for_alias(node, bridge_name)

        # –°–æ–∑–¥–∞—Ç—å VLAN-aware bridge –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω VLAN
        if vlan_tag > 0:
            logger.info(f"–°–æ–∑–¥–∞–µ–º VLAN-aware bridge {allocated_bridge} –¥–ª—è alias '{bridge_name}' –Ω–∞ –Ω–æ–¥–µ {node}")
            self.proxmox.create_bridge(node, allocated_bridge, vlan_aware=True)
        else:
            self.proxmox.create_bridge(node, allocated_bridge)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ì–õ–û–ë–ê–õ–¨–ù–´–ô –∫–µ—à —Å —É—á–µ—Ç–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        _global_bridge_cache[cache_key] = allocated_bridge
        logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{pool_suffix}' - Alias '{bridge_name}' -> –≤—ã–¥–µ–ª–µ–Ω bridge '{allocated_bridge}' –Ω–∞ –Ω–æ–¥–µ {node}")

        return allocated_bridge, vlan_tag

    def _allocate_new_bridge_for_alias(self, node: str, alias: str) -> str:
        """
        –í—ã–¥–µ–ª–∏—Ç—å –Ω–æ–≤—ã–π bridge –¥–ª—è alias –Ω–∞—á–∏–Ω–∞—è —Å vmbr1000

        Args:
            node: –ù–æ–¥–∞ –≥–¥–µ –≤—ã–¥–µ–ª–∏—Ç—å bridge
            alias: Alias –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã–¥–µ–ª—è–µ–º bridge

        Returns:
            –ò–º—è –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–≥–æ bridge'–∞
        """
        # –í—Å–µ–≥–¥–∞ –Ω–∞—á–∏–Ω–∞–µ–º —Å vmbr1000 –∫–∞–∫ —É–∫–∞–∑–∞–Ω–æ –≤ HOWTO
        bridge_start_number = 1000
        base_name = "vmbr"

        # –ò—â–µ–º –ø–µ—Ä–≤—ã–π —Å–≤–æ–±–æ–¥–Ω—ã–π bridge
        for i in range(bridge_start_number, bridge_start_number + 1000):  # –ó–∞—â–∏—Ç–∞ –æ—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
            candidate_bridge = f"{base_name}{i}"

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π bridge
            if not self.proxmox.bridge_exists(node, candidate_bridge):
                # –°–≤–æ–±–æ–¥–µ–Ω! –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π bridge
                logger.info(f"–°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π bridge {candidate_bridge} –¥–ª—è alias '{alias}' –Ω–∞ –Ω–æ–¥–µ {node}")
                if self.proxmox.create_bridge(node, candidate_bridge):
                    return candidate_bridge
                else:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å bridge {candidate_bridge}")
                    continue

        # Fallback –µ—Å–ª–∏ –≤—Å–µ bridge –∑–∞–Ω—è—Ç—ã (–º–∞–ª–æ–≤–µ—Ä–æ—è—Ç–Ω–æ)
        timestamp_bridge = f"{base_name}{int(time.time())}"
        logger.warning(f"–í—Å–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ bridge –∑–∞–Ω—è—Ç—ã, —Å–æ–∑–¥–∞–µ–º {timestamp_bridge} –¥–ª—è alias '{alias}'")
        self.proxmox.create_bridge(node, timestamp_bridge)
        return timestamp_bridge

    def _prepare_bridges(self, node: str, networks: List[Dict], pool: str) -> Dict[str, tuple]:
        """
        –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å bridge'—ã –¥–ª—è —Å–µ—Ç–µ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π VLAN

        Args:
            node: –ù–æ–¥–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
            networks: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–µ—Ç–µ–π
            pool: –ü—É–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        Returns:
            Mapping bridge –∏–º–µ–Ω -> (–∏–º—è_bridge, vlan_tag)
        """
        bridge_mapping = {}

        for network in networks:
            bridge_name = network.get('bridge')
            if bridge_name:
                reserved = network.get('reserved', False) or bridge_name.startswith('**')
                allocated_bridge, vlan_tag = self._allocate_bridge(node, bridge_name, pool, reserved)
                bridge_mapping[bridge_name] = (allocated_bridge, vlan_tag)

        return bridge_mapping

    def _prepare_network_configs(self, networks: List[Dict], bridge_mapping: Dict[str, tuple],
                               device_type: str) -> Dict[str, str]:
        """
        –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–µ—Ç–µ–≤—ã—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤ —Å–æ–≥–ª–∞—Å–Ω–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º HOWTO —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π VLAN

        Args:
            networks: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–µ—Ç–µ–π
            bridge_mapping: Mapping bridge –∏–º–µ–Ω -> (–∏–º—è_bridge, vlan_tag)
            device_type: –¢–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞

        Returns:
            –°–ª–æ–≤–∞—Ä—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤
        """
        network_configs = {}

        # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ ecorouter —É—Å—Ç—Ä–æ–π—Å—Ç–≤ —Å–æ–≥–ª–∞—Å–Ω–æ HOWTO
        if device_type == 'ecorouter':
            # net0 –≤—Å–µ–≥–¥–∞ –Ω–∞ vmbr0 —Å link_down=1 (—É–ø—Ä–∞–≤–ª—è—é—â–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å)
            mac0 = self._generate_ecorouter_mac()
            network_configs['net0'] = f'model=vmxnet3,bridge=vmbr0,macaddr={mac0},link_down=1'

            # –û—Å—Ç–∞–ª—å–Ω—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å net2 (net1 –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç—Å—è)
            for i, network in enumerate(networks):
                bridge_info = bridge_mapping.get(network['bridge'])
                if not bridge_info:
                    continue

                bridge_name, vlan_tag = bridge_info
                net_id = f"net{i+2}"  # net2, net3, net4...
                mac = self._generate_ecorouter_mac()

                # –î–æ–±–∞–≤–∏—Ç—å VLAN tag –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
                if vlan_tag > 0:
                    network_configs[net_id] = f'model=vmxnet3,bridge={bridge_name},macaddr={mac},tag={vlan_tag}'
                else:
                    network_configs[net_id] = f'model=vmxnet3,bridge={bridge_name},macaddr={mac}'

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ Linux –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö –º–∞—à–∏–Ω
        else:
            for i, network in enumerate(networks):
                bridge_info = bridge_mapping.get(network['bridge'])
                if not bridge_info:
                    continue

                bridge_name, vlan_tag = bridge_info
                net_id = f"net{i+1}"  # net1, net2, net3...

                # –î–æ–±–∞–≤–∏—Ç—å VLAN tag –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
                if vlan_tag > 0:
                    network_configs[net_id] = f'model=virtio,bridge={bridge_name},firewall=1,tag={vlan_tag}'
                else:
                    network_configs[net_id] = f'model=virtio,bridge={bridge_name},firewall=1'

        return network_configs

    def _parse_bridge_name(self, bridge_name: str) -> tuple[str, int]:
        """
        –†–∞–∑–æ–±—Ä–∞—Ç—å –∏–º—è bridge –Ω–∞ –±–∞–∑–æ–≤–æ–µ –∏–º—è –∏ VLAN tag

        Args:
            bridge_name: –ò–º—è bridge (–Ω–∞–ø—Ä–∏–º–µ—Ä, "hq.100")

        Returns:
            –ö–æ—Ä—Ç–µ–∂ (–±–∞–∑–æ–≤–æ–µ_–∏–º—è_bridge, vlan_tag)
        """
        if '.' in bridge_name:
            parts = bridge_name.split('.')
            if len(parts) == 2:
                base_name = parts[0]
                try:
                    vlan_tag = int(parts[1])
                    return base_name, vlan_tag
                except ValueError:
                    # –ï—Å–ª–∏ –≤—Ç–æ—Ä–∞—è —á–∞—Å—Ç—å –Ω–µ —á–∏—Å–ª–æ, —Å—á–∏—Ç–∞–µ–º —á—Ç–æ VLAN –Ω–µ —É–∫–∞–∑–∞–Ω
                    pass

        return bridge_name, 0

    def _generate_ecorouter_mac(self) -> str:
        """–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å MAC –∞–¥—Ä–µ—Å –¥–ª—è ecorouter —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –∏–∑ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ 1C:87:76:40:00:00 - 1C:87:76:4F:FF:FF"""
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –¥–ª—è ecorouter: 1C:87:76:40:XX:XX
        # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –±–∞–π—Ç—ã: 1C:87:76:40
        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –±–∞–π—Ç—ã: XX:XX (00:00 - FF:FF)
        mac = [0x1C, 0x87, 0x76, 0x40]  # Ecorouter OUI prefix
        mac.extend(secrets.randbelow(256) for _ in range(2))  # –°–ª—É—á–∞–π–Ω—ã–µ 2 –±–∞–π—Ç–∞
        return ':'.join(f'{b:02x}' for b in mac)

    def _cleanup_user(self, user: str) -> None:
        """–û—á–∏—Å—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            logger.info(f"–û—á–∏—Å—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user}: {e}")

    def _cleanup_user_and_pool(self, user: str, pool: str) -> None:
        """–û—á–∏—Å—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—É–ª"""
        try:
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—É–ª–∞
            logger.info(f"–û—á–∏—Å—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user} –∏ –ø—É–ª–∞ {pool}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—É–ª–∞: {e}")

    def _grant_vm_permissions(self, user: str, node: str, vmid: int) -> bool:
        """
        –í—ã–¥–∞—Ç—å –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –≤–∏—Ä—Ç—É–∞–ª—å–Ω—É—é –º–∞—à–∏–Ω—É

        Args:
            user: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, "student1@pve")
            node: –ù–æ–¥–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è VM
            vmid: VMID –º–∞—à–∏–Ω—ã

        Returns:
            True –µ—Å–ª–∏ –ø—Ä–∞–≤–∞ –≤—ã–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ
        """
        try:
            # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∞–≤–∞ PVEVMUser –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é VM
            # –ü—Ä–∞–≤–∞ –≤—ã–¥–∞—é—Ç—Å—è –Ω–∞ –ø—É—Ç—å /vms/{vmid}
            permissions = ["PVEVMUser"]

            for permission in permissions:
                self.proxmox.api.access.acl.put(
                    users=user,
                    path=f"/vms/{vmid}",
                    roles=permission,
                    propagate=0  # –ù–µ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—è—Ç—å –Ω–∞ –¥–æ—á–µ—Ä–Ω–∏–µ –æ–±—ä–µ–∫—Ç—ã
                )

            logger.info(f"–ü—Ä–∞–≤–∞ PVEVMUser –≤—ã–¥–∞–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user} –Ω–∞ VM {vmid} –Ω–∞ –Ω–æ–¥–µ {node}")
            return True

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–¥–∞—á–∏ –ø—Ä–∞–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user} –Ω–∞ VM {vmid}: {e}")
            return False

    def validate_config(self, config: Dict[str, Any]) -> bool:
        """
        –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è

        Args:
            config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏

        Returns:
            True –µ—Å–ª–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–∞–ª–∏–¥–Ω–∞
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Å–µ–∫—Ü–∏–∏ machines
            if 'machines' not in config:
                logger.error("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–µ–∫—Ü–∏—é 'machines'")
                return False

            machines = config['machines']
            if not isinstance(machines, list) or len(machines) == 0:
                logger.error("–°–µ–∫—Ü–∏—è 'machines' –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–µ–ø—É—Å—Ç—ã–º —Å–ø–∏—Å–∫–æ–º")
                return False

            # –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–∞–∂–¥–æ–π –º–∞—à–∏–Ω—ã
            for i, machine in enumerate(machines):
                if not self._validate_machine_config(machine, i):
                    return False

            return True

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            return False

    def _validate_machine_config(self, machine: Dict[str, Any], index: int) -> bool:
        """
        –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –æ–¥–Ω–æ–π –º–∞—à–∏–Ω—ã

        Args:
            machine: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–∞—à–∏–Ω—ã
            index: –ò–Ω–¥–µ–∫—Å –º–∞—à–∏–Ω—ã –≤ —Å–ø–∏—Å–∫–µ

        Returns:
            True –µ—Å–ª–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–∞–ª–∏–¥–Ω–∞
        """
        required_fields = ['template_vmid', 'template_node']
        optional_fields = ['device_type', 'name', 'networks', 'full_clone']

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        for field in required_fields:
            if field not in machine:
                logger.error(f"–ú–∞—à–∏–Ω–∞ {index}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ '{field}'")
                return False

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ template_vmid
        if not isinstance(machine['template_vmid'], int):
            logger.error(f"–ú–∞—à–∏–Ω–∞ {index}: –ø–æ–ª–µ 'template_vmid' –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º")
            return False

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        if 'device_type' in machine:
            if machine['device_type'] not in ['linux', 'ecorouter']:
                logger.error(f"–ú–∞—à–∏–Ω–∞ {index}: –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ç–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ '{machine['device_type']}'")
                return False

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ full_clone
        if 'full_clone' in machine:
            if not isinstance(machine['full_clone'], bool):
                logger.error(f"–ú–∞—à–∏–Ω–∞ {index}: –ø–æ–ª–µ 'full_clone' –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å true/false")
                return False

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ç–µ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        if 'networks' in machine:
            if not isinstance(machine['networks'], list):
                logger.error(f"–ú–∞—à–∏–Ω–∞ {index}: –ø–æ–ª–µ 'networks' –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å–ø–∏—Å–∫–æ–º")
                return False

            for j, network in enumerate(machine['networks']):
                if not isinstance(network, dict):
                    logger.error(f"–ú–∞—à–∏–Ω–∞ {index}, —Å–µ—Ç—å {j}: –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ–±—ä–µ–∫—Ç–æ–º")
                    return False

                if 'bridge' not in network:
                    logger.error(f"–ú–∞—à–∏–Ω–∞ {index}, —Å–µ—Ç—å {j}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ 'bridge'")
                    return False

        return True

    def get_deployment_status(self, deployment_id: str) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è

        Args:
            deployment_id: ID —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è

        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
        """
        return {
            'deployment_id': deployment_id,
            'status': 'completed',
            'strategy': 'local',
            'message': '–õ–æ–∫–∞–ª—å–Ω–æ–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –Ω–∞ –Ω–æ–¥–µ —Å —à–∞–±–ª–æ–Ω–∞–º–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ'
        }
