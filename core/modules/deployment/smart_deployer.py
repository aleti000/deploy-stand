"""
–£–º–Ω—ã–π –º–æ–¥—É–ª—å —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö –º–∞—à–∏–Ω

–†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ—Ç –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ –º–∞—à–∏–Ω—ã –ø–æ –Ω–æ–¥–∞–º –∫–ª–∞—Å—Ç–µ—Ä–∞ —Å —É—á–µ—Ç–æ–º —Ç–µ–∫—É—â–µ–π –Ω–∞–≥—Ä—É–∑–∫–∏,
–∏—Å–ø–æ–ª—å–∑—É—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ —à–∞–±–ª–æ–Ω–æ–≤ –∏ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—É—é –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫—É.

–ü–û–õ–ù–û–°–¢–¨–Æ –ù–ï–ó–ê–í–ò–°–ò–ú–´–ô –ú–û–î–£–õ–¨ - —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å—Ç—Ä–æ–µ–Ω–Ω—É—é –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—É—é –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫—É
"""

import logging
import secrets
import string
import time
from typing import Dict, List, Any
from core.interfaces.deployment_interface import DeploymentInterface
from core.proxmox.proxmox_client import ProxmoxClient

logger = logging.getLogger(__name__)


class SmartDeployer(DeploymentInterface):
    """–£–º–Ω—ã–π —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞—Ç–µ–ª—å –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö –º–∞—à–∏–Ω —Å —É—á–µ—Ç–æ–º –Ω–∞–≥—Ä—É–∑–∫–∏"""

    def __init__(self, proxmox_client: ProxmoxClient):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–º–Ω–æ–≥–æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞—Ç–µ–ª—è

        Args:
            proxmox_client: –ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Proxmox API
        """
        self.proxmox = proxmox_client

    def deploy_configuration(self, users: List[str], config: Dict[str, Any],
                           node_selection: str = "smart", target_node: str = None) -> Dict[str, str]:
        """
        –†–∞–∑–≤–µ—Ä–Ω—É—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö –º–∞—à–∏–Ω —Å —É–º–Ω–æ–π –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏

        Args:
            users: –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
            config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
            node_selection: –°—Ç—Ä–∞—Ç–µ–≥–∏—è –≤—ã–±–æ—Ä–∞ –Ω–æ–¥—ã (—É–º–Ω–∞—è –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
            target_node: –¶–µ–ª–µ–≤–∞—è –Ω–æ–¥–∞ (–∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è –≤ —Ä–µ–∂–∏–º–µ —É–º–Ω–æ–π –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏)

        Returns:
            –°–ª–æ–≤–∞—Ä—å {–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: –ø–∞—Ä–æ–ª—å}
        """
        results = {}

        try:
            # –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–æ–¥—ã
            nodes = self.proxmox.get_nodes()
            if not nodes:
                raise ValueError("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–æ–¥ –¥–ª—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è")

            # –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –Ω–∞–≥—Ä—É–∑–∫—É –Ω–∞ –Ω–æ–¥–∞—Ö
            node_loads = self._get_node_loads(nodes)
            logger.info(f"–¢–µ–∫—É—â–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ –Ω–æ–¥–∞—Ö: {node_loads}")

            logger.info(f"–£–º–Ω–∞—è –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –ø–æ –Ω–æ–¥–∞–º: {', '.join(nodes)}")

            # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å—Ç—Ä–æ–µ–Ω–Ω—É—é –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—É—é –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫—É –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            # —Å —É—á–µ—Ç–æ–º —Ç–µ–∫—É—â–µ–π –Ω–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ –Ω–æ–¥—ã
            distribution = self._distribute_users_smart(users, nodes, config)

            logger.info(f"–£–º–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –Ω–æ–¥–∞–º: {distribution}")

            # –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å —à–∞–±–ª–æ–Ω—ã –¥–ª—è –≤—Å–µ—Ö —Ü–µ–ª–µ–≤—ã—Ö –Ω–æ–¥
            template_mapping = self._prepare_templates_for_all_nodes(config, distribution)

            # –†–∞–∑–≤–µ—Ä–Ω—É—Ç—å –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –Ω–∞ –≤—Å–µ—Ö –Ω–æ–¥–∞—Ö
            deployment_results = self._deploy_parallel(distribution, config, template_mapping)

            # –°–æ–±—Ä–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            for node_result in deployment_results.values():
                results.update(node_result)

            # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–µ—Ç–µ–≤—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–∞ –∑–∞–¥–µ–π—Å—Ç–≤–æ–≤–∞–Ω–Ω—ã—Ö –Ω–æ–¥–∞—Ö –ø–æ—Å–ª–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
            affected_nodes = set()
            for node, users in distribution.items():
                if users:  # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–∞ –Ω–æ–¥–µ –±—ã–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
                    affected_nodes.add(node)

            if affected_nodes:
                print("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Ç–µ–≤—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –Ω–∞ –∑–∞–¥–µ–π—Å—Ç–≤–æ–≤–∞–Ω–Ω—ã—Ö –Ω–æ–¥–∞—Ö...")
                for node in affected_nodes:
                    try:
                        if self.proxmox.reload_node_network(node):
                            print(f"  ‚úÖ –°–µ—Ç—å –Ω–æ–¥—ã {node} –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
                        else:
                            print(f"  ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–µ—Ç—å –Ω–æ–¥—ã {node}")
                    except Exception as e:
                        print(f"  ‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Ç–∏ –Ω–æ–¥—ã {node}: {e}")

            logger.info(f"–£–º–Ω–æ–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –¥–ª—è {len(results)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            return results

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–º–Ω–æ–≥–æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è: {e}")
            raise

    def _get_node_loads(self, nodes: List[str]) -> Dict[str, float]:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –Ω–∞–≥—Ä—É–∑–∫—É –Ω–∞ –Ω–æ–¥–∞—Ö

        Args:
            nodes: –°–ø–∏—Å–æ–∫ –Ω–æ–¥

        Returns:
            –°–ª–æ–≤–∞—Ä—å {–Ω–æ–¥–∞: –Ω–∞–≥—Ä—É–∑–∫–∞(0.0-1.0)}
        """
        node_loads = {}

        for node in nodes:
            try:
                # –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–æ–¥–µ
                node_info = self.proxmox.get_node_status(node)
                if node_info:
                    # –†–∞—Å—á–µ—Ç –Ω–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ CPU –∏ –ø–∞–º—è—Ç–∏
                    cpu_load = float(node_info.get('cpu', 0))
                    memory_load = 1.0 - (float(node_info.get('memory_free', 0)) / float(node_info.get('memory_total', 1)))

                    # –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ (CPU –∏ –ø–∞–º—è—Ç—å —Å –≤–µ—Å–∞–º–∏)
                    combined_load = (cpu_load * 0.6) + (memory_load * 0.4)
                    node_loads[node] = min(combined_load, 1.0)  # –û–≥—Ä–∞–Ω–∏—á–∏—Ç—å –¥–æ 1.0
                else:
                    node_loads[node] = 0.5  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–≥—Ä—É–∑–∫—É –¥–ª—è –Ω–æ–¥—ã {node}: {e}")
                node_loads[node] = 0.5  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

        return node_loads

    def _prepare_templates_for_all_nodes(self, config: Dict[str, Any], distribution: Dict[str, List[str]]) -> Dict[str, Dict[str, int]]:
        """
        –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å —à–∞–±–ª–æ–Ω—ã –¥–ª—è –≤—Å–µ—Ö —Ü–µ–ª–µ–≤—ã—Ö –Ω–æ–¥

        Args:
            config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
            distribution: –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –Ω–æ–¥–∞–º

        Returns:
            Mapping –Ω–æ–¥–∞ -> {—à–∞–±–ª–æ–Ω_key: local_vmid}
        """
        all_template_mappings = {}

        # –ü–æ–ª—É—á–∏—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –Ω–æ–¥—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
        active_nodes = [node for node, users in distribution.items() if users]

        logger.info(f"–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤ –¥–ª—è {len(active_nodes)} –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–æ–¥")

        # –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å —à–∞–±–ª–æ–Ω—ã –¥–ª—è –∫–∞–∂–¥–æ–π –Ω–æ–¥—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ (–º–æ–∂–Ω–æ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å)
        for target_node in active_nodes:
            try:
                node_template_mapping = self._prepare_templates_for_target_node(config, target_node)
                all_template_mappings[target_node] = node_template_mapping
                logger.info(f"–®–∞–±–ª–æ–Ω—ã –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã –¥–ª—è –Ω–æ–¥—ã {target_node}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ —à–∞–±–ª–æ–Ω–æ–≤ –¥–ª—è –Ω–æ–¥—ã {target_node}: {e}")
                raise

        return all_template_mappings

    def _prepare_templates_for_target_node(self, config: Dict[str, Any], target_node: str) -> Dict[str, int]:
        """
        –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å —à–∞–±–ª–æ–Ω—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ü–µ–ª–µ–≤–æ–π –Ω–æ–¥—ã

        –ü—Ä–æ—Ü–µ—Å—Å –∞–Ω–∞–ª–æ–≥–∏—á–µ–Ω RemoteDeployer:
        1. Full clone –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞
        2. –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ —à–∞–±–ª–æ–Ω
        3. –ú–∏–≥—Ä–∞—Ü–∏—è –Ω–∞ —Ü–µ–ª–µ–≤—É—é –Ω–æ–¥—É

        Args:
            config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
            target_node: –¶–µ–ª–µ–≤–∞—è –Ω–æ–¥–∞

        Returns:
            Mapping –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö VMID -> –ª–æ–∫–∞–ª—å–Ω—ã—Ö VMID –Ω–∞ —Ü–µ–ª–µ–≤–æ–π –Ω–æ–¥–µ
        """
        template_mapping = {}

        # –ü–æ–ª—É—á–∏—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        unique_templates = set()
        for machine_config in config.get('machines', []):
            template_key = f"{machine_config['template_vmid']}:{machine_config['template_node']}"
            unique_templates.add(template_key)

        logger.info(f"–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ {len(unique_templates)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤ –¥–ª—è –Ω–æ–¥—ã {target_node}")

        for template_key in unique_templates:
            try:
                original_vmid, template_node = template_key.split(':')
                original_vmid = int(original_vmid)

                # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–π —à–∞–±–ª–æ–Ω –Ω–∞ —Ü–µ–ª–µ–≤–æ–π –Ω–æ–¥–µ
                local_template_vmid = self._find_existing_template_on_node(original_vmid, target_node)
                if local_template_vmid:
                    template_mapping[template_key] = local_template_vmid
                    logger.info(f"–ù–∞–π–¥–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —à–∞–±–ª–æ–Ω {local_template_vmid} –Ω–∞ –Ω–æ–¥–µ {target_node}")
                    continue

                # –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –Ω–æ–≤—ã–π —à–∞–±–ª–æ–Ω
                local_template_vmid = self._prepare_single_template(original_vmid, template_node, target_node)
                if local_template_vmid:
                    template_mapping[template_key] = local_template_vmid
                else:
                    raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å —à–∞–±–ª–æ–Ω {template_key}")

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ —à–∞–±–ª–æ–Ω–∞ {template_key}: {e}")
                raise

        return template_mapping

    def _prepare_single_template(self, original_vmid: int, template_node: str, target_node: str) -> int:
        """
        –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –æ–¥–∏–Ω —à–∞–±–ª–æ–Ω –¥–ª—è —Ü–µ–ª–µ–≤–æ–π –Ω–æ–¥—ã

        Args:
            original_vmid: VMID –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞
            template_node: –ù–æ–¥–∞ –≥–¥–µ —Ö—Ä–∞–Ω–∏—Ç—Å—è –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —à–∞–±–ª–æ–Ω
            target_node: –¶–µ–ª–µ–≤–∞—è –Ω–æ–¥–∞

        Returns:
            VMID –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞ –Ω–∞ —Ü–µ–ª–µ–≤–æ–π –Ω–æ–¥–µ
        """
        try:
            # 1. Full clone –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞ –Ω–∞ —Ç–æ–π –∂–µ –Ω–æ–¥–µ
            clone_vmid = self.proxmox.get_next_vmid()
            clone_name = f"template-clone-{original_vmid}-{int(time.time())}"

            logger.info(f"–°–æ–∑–¥–∞–Ω–∏–µ full clone VM {original_vmid} -> VM {clone_vmid}")
            clone_task = self.proxmox.clone_vm(
                template_node=template_node,
                template_vmid=original_vmid,
                target_node=template_node,  # –ö–ª–æ–Ω–∏—Ä—É–µ–º –Ω–∞ —Ç–æ–π –∂–µ –Ω–æ–¥–µ
                new_vmid=clone_vmid,
                name=clone_name,
                full_clone=True  # –í–∞–∂–Ω–æ: full clone –¥–ª—è –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
            )

            if not self.proxmox.wait_for_task(clone_task, template_node):
                raise Exception(f"–û—à–∏–±–∫–∞ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è VM {clone_vmid}")

            # 2. –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ —à–∞–±–ª–æ–Ω
            logger.info(f"–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ VM {clone_vmid} –≤ —à–∞–±–ª–æ–Ω")
            if not self.proxmox.convert_to_template(template_node, clone_vmid):
                raise Exception(f"–û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è VM {clone_vmid} –≤ —à–∞–±–ª–æ–Ω")

            # 3. –ú–∏–≥—Ä–∞—Ü–∏—è –Ω–∞ —Ü–µ–ª–µ–≤—É—é –Ω–æ–¥—É (–µ—Å–ª–∏ –Ω–æ–¥—ã —Ä–∞–∑–Ω—ã–µ)
            if template_node != target_node:
                logger.info(f"–ú–∏–≥—Ä–∞—Ü–∏—è —à–∞–±–ª–æ–Ω–∞ VM {clone_vmid} —Å {template_node} –Ω–∞ {target_node}")
                migrate_task = self.proxmox.migrate_vm(
                    source_node=template_node,
                    target_node=target_node,
                    vmid=clone_vmid,
                    online=False  # –®–∞–±–ª–æ–Ω—ã –º–∏–≥—Ä–∞–∏—Ä—É–µ–º offline
                )

                if not self.proxmox.wait_for_task(migrate_task, target_node):
                    raise Exception(f"–û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ VM {clone_vmid}")

            logger.info(f"–®–∞–±–ª–æ–Ω VM {clone_vmid} –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω –Ω–∞ –Ω–æ–¥–µ {target_node}")
            return clone_vmid

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ —à–∞–±–ª–æ–Ω–∞ VM {original_vmid}: {e}")
            # –ü–æ–ø—ã—Ç–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            try:
                if 'clone_vmid' in locals():
                    self.proxmox.delete_vm(template_node, clone_vmid)
            except:
                pass
            raise

    def _find_existing_template_on_node(self, original_vmid: int, node: str) -> int:
        """
        –ù–∞–π—Ç–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–π —à–∞–±–ª–æ–Ω –Ω–∞ –Ω–æ–¥–µ

        Args:
            original_vmid: VMID –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞
            node: –ù–æ–¥–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞

        Returns:
            VMID –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞ –∏–ª–∏ None
        """
        try:
            vms = self.proxmox.get_vms_on_node(node)
            for vm in vms:
                vm_name = vm.get('name', '')
                if vm_name.startswith(f"template-clone-{original_vmid}-") and vm.get('template', 0) == 1:
                    return int(vm['vmid'])
            return None
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —à–∞–±–ª–æ–Ω–∞: {e}")
            return None

    def _deploy_parallel(self, distribution: Dict[str, List[str]],
                        config: Dict[str, Any], template_mappings: Dict[str, Dict[str, int]]) -> Dict[str, Dict]:
        """
        –†–∞–∑–≤–µ—Ä–Ω—É—Ç—å –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ –º–∞—à–∏–Ω—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –ø–æ –≤—Å–µ–º –Ω–æ–¥–∞–º

        Args:
            distribution: –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –Ω–æ–¥–∞–º
            config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
            template_mappings: Mapping —à–∞–±–ª–æ–Ω–æ–≤ –ø–æ –Ω–æ–¥–∞–º

        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –ø–æ –Ω–æ–¥–∞–º
        """
        results = {}

        for node, users in distribution.items():
            if users:
                logger.info(f"–ù–∞—á–∏–Ω–∞–µ—Ç—Å—è —É–º–Ω–æ–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –Ω–∞ –Ω–æ–¥–µ {node} –¥–ª—è {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")

                # –ü–æ–ª—É—á–∏—Ç—å mapping —à–∞–±–ª–æ–Ω–æ–≤ –¥–ª—è —ç—Ç–æ–π –Ω–æ–¥—ã
                node_template_mapping = template_mappings.get(node, {})

                # –†–∞–∑–≤–µ—Ä–Ω—É—Ç—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ —ç—Ç–æ–π –Ω–æ–¥–µ
                node_results = self._deploy_for_node(node, users, config, node_template_mapping)
                results[node] = node_results

        return results

    def _deploy_for_node(self, node: str, users: List[str],
                        config: Dict[str, Any], template_mapping: Dict[str, int]) -> Dict[str, str]:
        """
        –†–∞–∑–≤–µ—Ä–Ω—É—Ç—å –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ –º–∞—à–∏–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –Ω–æ–¥–µ

        Args:
            node: –¶–µ–ª–µ–≤–∞—è –Ω–æ–¥–∞
            users: –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
            template_mapping: Mapping —à–∞–±–ª–æ–Ω–æ–≤ –¥–ª—è –Ω–æ–¥—ã

        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è {–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: –ø–∞—Ä–æ–ª—å}
        """
        node_results = {}

        for user in users:
            try:
                # –°–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—É–ª
                success, password = self._create_user_and_pool(user)
                if not success:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user}")
                    continue

                # –°–æ–∑–¥–∞—Ç—å –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ –º–∞—à–∏–Ω—ã –∏–∑ –ª–æ–∫–∞–ª—å–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤
                pool_name = user.split('@')[0]
                for machine_config in config.get('machines', []):
                    self._create_machine_smart(machine_config, node, pool_name, template_mapping)

                node_results[user] = password
                logger.info(f"–£–º–Ω–æ–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user} –Ω–∞ –Ω–æ–¥–µ {node} –∑–∞–≤–µ—Ä—à–µ–Ω–æ")

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —É–º–Ω–æ–≥–æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user} –Ω–∞ –Ω–æ–¥–µ {node}: {e}")
                node_results[user] = ""  # –ü—É—Å—Ç–æ–π –ø–∞—Ä–æ–ª—å –∫–∞–∫ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –æ—à–∏–±–∫–∏

        return node_results

    def _create_machine_smart(self, machine_config: Dict[str, Any],
                             target_node: str, pool: str, template_mapping: Dict[str, int]) -> None:
        """
        –°–æ–∑–¥–∞—Ç—å –≤–∏—Ä—Ç—É–∞–ª—å–Ω—É—é –º–∞—à–∏–Ω—É –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞ —Å —É–º–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–µ–π

        Args:
            machine_config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–∞—à–∏–Ω—ã
            target_node: –¶–µ–ª–µ–≤–∞—è –Ω–æ–¥–∞
            pool: –ò–º—è –ø—É–ª–∞
            template_mapping: Mapping —à–∞–±–ª–æ–Ω–æ–≤
        """
        try:
            # –ü–æ–ª—É—á–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –º–∞—à–∏–Ω—ã
            original_vmid = machine_config['template_vmid']
            template_node = machine_config['template_node']
            template_key = f"{original_vmid}:{template_node}"
            device_type = machine_config.get('device_type', 'linux')
            name = machine_config.get('name', f"vm-{original_vmid}-{pool}")
            full_clone = machine_config.get('full_clone', False)

            # –ù–∞–π—Ç–∏ –ª–æ–∫–∞–ª—å–Ω—ã–π —à–∞–±–ª–æ–Ω
            local_template_vmid = template_mapping.get(template_key)
            if not local_template_vmid:
                raise Exception(f"–õ–æ–∫–∞–ª—å–Ω—ã–π —à–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è {template_key}")

            # –ü–æ–ª—É—á–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–π VMID
            new_vmid = self.proxmox.get_next_vmid()

            # –ö–ª–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞
            task_id = self.proxmox.clone_vm(
                template_node=target_node,
                template_vmid=local_template_vmid,
                target_node=target_node,
                new_vmid=new_vmid,
                name=name,
                pool=pool,
                full_clone=full_clone
            )

            # –û–∂–∏–¥–∞—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            if not self.proxmox.wait_for_task(task_id, target_node):
                raise Exception(f"–û—à–∏–±–∫–∞ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è VM {new_vmid}")

            # –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Å–µ—Ç—å –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞
            networks = machine_config.get('networks', [])
            if networks:
                self._configure_machine_network(new_vmid, target_node, networks, pool, device_type)

            logger.info(f"–ú–∞—à–∏–Ω–∞ {name} (VMID: {new_vmid}) —Å–æ–∑–¥–∞–Ω–∞ —É–º–Ω–æ –Ω–∞ –Ω–æ–¥–µ {target_node}")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —É–º–Ω–æ–π –º–∞—à–∏–Ω—ã: {e}")
            raise

    def _create_user_and_pool(self, user: str) -> tuple[bool, str]:
        """
        –°–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—É–ª

        Args:
            user: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        Returns:
            –ö–æ—Ä—Ç–µ–∂ (—É—Å–ø–µ—Ö, –ø–∞—Ä–æ–ª—å)
        """
        try:
            # –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä–æ–ª—å
            password = self._generate_password()

            # –°–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if not self.proxmox.create_user(user, password):
                return False, ""

            # –°–æ–∑–¥–∞—Ç—å –ø—É–ª
            pool_name = user.split('@')[0]
            if not self.proxmox.create_pool(pool_name, f"Pool for {user}"):
                # –ï—Å–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—É–ª–∞ –Ω–µ—É–¥–∞—á–Ω–æ, —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                self._cleanup_user(user)
                return False, ""

            # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –ø—É–ª
            permissions = ["PVEVMAdmin"]
            if not self.proxmox.set_pool_permissions(user, pool_name, permissions):
                # –ï—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∞–≤ –Ω–µ—É–¥–∞—á–Ω–∞, –æ—á–∏—Å—Ç–∏—Ç—å —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã
                self._cleanup_user_and_pool(user, pool_name)
                return False, ""

            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user} –∏ –ø—É–ª {pool_name} —Å–æ–∑–¥–∞–Ω—ã")
            return True, password

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—É–ª–∞: {e}")
            return False, ""

    def _configure_machine_network(self, vmid: int, node: str, networks: List[Dict],
                                 pool: str, device_type: str) -> None:
        """
        –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Å–µ—Ç—å –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π –º–∞—à–∏–Ω—ã

        Args:
            vmid: VMID –º–∞—à–∏–Ω—ã
            node: –ù–æ–¥–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
            networks: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–µ—Ç–µ–π
            pool: –ò–º—è –ø—É–ª–∞
            device_type: –¢–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        """
        try:
            network_configs = {}

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ ecorouter —É—Å—Ç—Ä–æ–π—Å—Ç–≤
            if device_type == 'ecorouter':
                # –°–æ–∑–¥–∞—Ç—å MAC –∞–¥—Ä–µ—Å –¥–ª—è —É–ø—Ä–∞–≤–ª—è—é—â–µ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
                mac = self._generate_mac_address()
                network_configs['net0'] = f'model=vmxnet3,bridge=vmbr0,macaddr={mac},link_down=1'

            # –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã
            for i, network in enumerate(networks):
                bridge = network.get('bridge', f'vmbr{i+1}')
                net_id = f"net{i+1}" if device_type != 'ecorouter' else f"net{i+2}"

                if device_type == 'ecorouter':
                    mac = self._generate_mac_address()
                    network_configs[net_id] = f'model=vmxnet3,bridge={bridge},macaddr={mac}'
                else:
                    network_configs[net_id] = f'model=virtio,bridge={bridge},firewall=1'

            # –ü—Ä–∏–º–µ–Ω–∏—Ç—å —Å–µ—Ç–µ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            if not self.proxmox.configure_vm_network(node, vmid, network_configs):
                raise Exception(f"–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ç–∏ VM {vmid}")

            logger.info(f"–°–µ—Ç—å VM {vmid} –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ç–∏ VM {vmid}: {e}")
            raise

    def _generate_password(self, length: int = 8) -> str:
        """–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è –æ–±—É—á–∞—é—â–∏—Ö —Å—Ç–µ–Ω–¥–æ–≤"""
        alphabet = string.ascii_letters + string.digits + "!@#$%^&*"
        return ''.join(secrets.choice(alphabet) for _ in range(length))

    def _generate_mac_address(self) -> str:
        """–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π MAC –∞–¥—Ä–µ—Å"""
        mac = [0x52, 0x54, 0x00]  # QEMU/Libvirt prefix
        mac.extend(secrets.randbelow(256) for _ in range(3))
        return ':'.join(f'{b:02x}' for b in mac)

    def _cleanup_user(self, user: str) -> None:
        """–û—á–∏—Å—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            logger.info(f"–û—á–∏—Å—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user}: {e}")

    def _cleanup_user_and_pool(self, user: str, pool: str) -> None:
        """–û—á–∏—Å—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—É–ª"""
        try:
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—É–ª–∞
            logger.info(f"–û—á–∏—Å—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user} –∏ –ø—É–ª–∞ {pool}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—É–ª–∞: {e}")

    def validate_config(self, config: Dict[str, Any]) -> bool:
        """
        –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è

        Args:
            config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏

        Returns:
            True –µ—Å–ª–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–∞–ª–∏–¥–Ω–∞
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Å–µ–∫—Ü–∏–∏ machines
            if 'machines' not in config:
                logger.error("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–µ–∫—Ü–∏—é 'machines'")
                return False

            machines = config['machines']
            if not isinstance(machines, list) or len(machines) == 0:
                logger.error("–°–µ–∫—Ü–∏—è 'machines' –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–µ–ø—É—Å—Ç—ã–º —Å–ø–∏—Å–∫–æ–º")
                return False

            # –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–∞–∂–¥–æ–π –º–∞—à–∏–Ω—ã
            for i, machine in enumerate(machines):
                if not self._validate_machine_config(machine, i):
                    return False

            return True

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            return False

    def _validate_machine_config(self, machine: Dict[str, Any], index: int) -> bool:
        """
        –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –æ–¥–Ω–æ–π –º–∞—à–∏–Ω—ã

        Args:
            machine: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–∞—à–∏–Ω—ã
            index: –ò–Ω–¥–µ–∫—Å –º–∞—à–∏–Ω—ã –≤ —Å–ø–∏—Å–∫–µ

        Returns:
            True –µ—Å–ª–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–∞–ª–∏–¥–Ω–∞
        """
        required_fields = ['template_vmid', 'template_node']
        optional_fields = ['device_type', 'name', 'networks', 'full_clone']

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        for field in required_fields:
            if field not in machine:
                logger.error(f"–ú–∞—à–∏–Ω–∞ {index}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ '{field}'")
                return False

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ template_vmid
        if not isinstance(machine['template_vmid'], int):
            logger.error(f"–ú–∞—à–∏–Ω–∞ {index}: –ø–æ–ª–µ 'template_vmid' –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º")
            return False

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        if 'device_type' in machine:
            if machine['device_type'] not in ['linux', 'ecorouter']:
                logger.error(f"–ú–∞—à–∏–Ω–∞ {index}: –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ç–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ '{machine['device_type']}'")
                return False

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ full_clone
        if 'full_clone' in machine:
            if not isinstance(machine['full_clone'], bool):
                logger.error(f"–ú–∞—à–∏–Ω–∞ {index}: –ø–æ–ª–µ 'full_clone' –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å true/false")
                return False

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ç–µ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        if 'networks' in machine:
            if not isinstance(machine['networks'], list):
                logger.error(f"–ú–∞—à–∏–Ω–∞ {index}: –ø–æ–ª–µ 'networks' –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å–ø–∏—Å–∫–æ–º")
                return False

            for j, network in enumerate(machine['networks']):
                if not isinstance(network, dict):
                    logger.error(f"–ú–∞—à–∏–Ω–∞ {index}, —Å–µ—Ç—å {j}: –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ–±—ä–µ–∫—Ç–æ–º")
                    return False

                if 'bridge' not in network:
                    logger.error(f"–ú–∞—à–∏–Ω–∞ {index}, —Å–µ—Ç—å {j}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ 'bridge'")
                    return False

        return True

    def _distribute_users_smart(self, users: List[str], nodes: List[str], config: Dict[str, Any]) -> Dict[str, List[str]]:
        """
        –†–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –Ω–æ–¥–∞–º —Å —É—á–µ—Ç–æ–º —Ç–µ–∫—É—â–µ–π –Ω–∞–≥—Ä—É–∑–∫–∏

        –í—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–π –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏

        Args:
            users: –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
            nodes: –î–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–æ–¥—ã
            config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è

        Returns:
            –°–ª–æ–≤–∞—Ä—å {–Ω–æ–¥–∞: [–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏]}
        """
        # –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –Ω–∞–≥—Ä—É–∑–∫—É –Ω–∞ –Ω–æ–¥—ã
        node_loads = self._get_node_loads(nodes)

        # –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—É—é –µ–º–∫–æ—Å—Ç—å –¥–ª—è –∫–∞–∂–¥–æ–π –Ω–æ–¥—ã (1.0 - –Ω–∞–≥—Ä—É–∑–∫–∞)
        node_capacity = {node: max(0.1, 1.0 - load) for node, load in node_loads.items()}

        # –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞—Ç—å –µ–º–∫–æ—Å—Ç—å –¥–ª—è —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤–µ—Å–æ–≤
        total_capacity = sum(node_capacity.values())
        if total_capacity == 0:
            # Fallback –Ω–∞ —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –µ—Å–ª–∏ –≤—Å–µ –Ω–æ–¥—ã –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω—ã
            node_weights = {node: 1.0 for node in nodes}
        else:
            node_weights = {node: capacity / total_capacity for node, capacity in node_capacity.items()}

        # –†–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —É—á–µ—Ç–æ–º –≤–µ—Å–æ–≤ –Ω–æ–¥
        distribution = {node: [] for node in nodes}
        users_per_node = {}

        # –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –∫–∞–∂–¥–æ–π –Ω–æ–¥—ã
        remaining_users = len(users)
        for node in nodes[:-1]:  # –í—Å–µ –Ω–æ–¥—ã –∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π
            node_users = int(len(users) * node_weights[node])
            users_per_node[node] = node_users
            remaining_users -= node_users

        # –ü–æ—Å–ª–µ–¥–Ω–µ–π –Ω–æ–¥–µ –æ—Ç–¥–∞—Ç—å –≤—Å–µ—Ö –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users_per_node[nodes[-1]] = remaining_users

        # –†–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        user_index = 0
        for node in nodes:
            for _ in range(users_per_node[node]):
                if user_index < len(users):
                    distribution[node].append(users[user_index])
                    user_index += 1

        logger.info(f"–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞: {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –ø–æ {len(nodes)} –Ω–æ–¥–∞–º")
        logger.info(f"–í–µ—Å–∞ –Ω–æ–¥: {node_weights}")
        return distribution

    def get_deployment_status(self, deployment_id: str) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å —É–º–Ω–æ–≥–æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è

        Args:
            deployment_id: ID —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è

        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
        """
        return {
            'deployment_id': deployment_id,
            'status': 'completed',
            'strategy': 'smart',
            'balancer': 'built-in',
            'message': '–£–º–Ω–æ–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ —Å –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ'
        }
