"""
–ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–∏—Å—Ç–µ–º—ã Deploy-Stand

–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è, —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
–∏ –∏—Ö —Ä–µ—Å—É—Ä—Å–æ–≤ –≤ –∫–ª–∞—Å—Ç–µ—Ä–µ Proxmox VE.
"""

import logging
import secrets
import string
from typing import Dict, List, Tuple, Any
from core.proxmox.proxmox_client import ProxmoxClient

logger = logging.getLogger(__name__)


class UserManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∏—Ö —Ä–µ—Å—É—Ä—Å–æ–≤"""

    def __init__(self, proxmox_client: ProxmoxClient):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

        Args:
            proxmox_client: –ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Proxmox API
        """
        self.proxmox = proxmox_client

    def create_user_and_pool(self, username: str) -> Tuple[bool, str]:
        """
        –°–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—É–ª

        Args:
            username: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        Returns:
            –ö–æ—Ä—Ç–µ–∂ (—É—Å–ø–µ—Ö, –ø–∞—Ä–æ–ª—å)
        """
        try:
            # –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä–æ–ª—å
            password = self._generate_password()

            # –°–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if not self.proxmox.create_user(username, password):
                return False, ""

            # –°–æ–∑–¥–∞—Ç—å –ø—É–ª
            pool_name = username.split('@')[0]
            if not self.proxmox.create_pool(pool_name, f"Pool for {username}"):
                # –ï—Å–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—É–ª–∞ –Ω–µ—É–¥–∞—á–Ω–æ, —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                self._cleanup_user(username)
                return False, ""

            # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –ø—É–ª
            permissions = ["PVEVMAdmin"]
            if not self.proxmox.set_pool_permissions(username, pool_name, permissions):
                # –ï—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∞–≤ –Ω–µ—É–¥–∞—á–Ω–∞, –æ—á–∏—Å—Ç–∏—Ç—å —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã
                self._cleanup_user_and_pool(username, pool_name)
                return False, ""

            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –∏ –ø—É–ª {pool_name} —Å–æ–∑–¥–∞–Ω—ã")
            return True, password

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—É–ª–∞: {e}")
            return False, ""

    def delete_user_resources_batch(self, users: List[str]) -> Dict[str, List[str]]:
        """
        –£–¥–∞–ª–∏—Ç—å —Ä–µ—Å—É—Ä—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–∞–∫–µ—Ç–Ω–æ
        –°—Ç—Ä–∞—Ç–µ–≥–∏—è: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Üí –ø—É–ª ‚Üí –º–∞—à–∏–Ω—ã ‚Üí —Å–µ—Ç–µ–≤—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã ‚Üí —É–¥–∞–ª–µ–Ω–∏–µ +
        –æ—á–∏—Å—Ç–∫–∞ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —Å–µ—Ç–µ–≤—ã—Ö –º–æ—Å—Ç–æ–≤

        Args:
            users: –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è

        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø–µ—Ä–∞—Ü–∏–π {successful: [], failed: [], skipped: []}
        """
        results = {
            'successful': [],
            'failed': [],
            'skipped': []
        }

        for user in users:
            try:
                logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user}")
                success = self.delete_user_resources(user)
                if success:
                    results['successful'].append(user)
                    logger.info(f"‚úÖ –†–µ—Å—É—Ä—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã")
                else:
                    results['failed'].append(user)
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user}")
            except Exception as e:
                logger.error(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user}: {e}")
                results['failed'].append(user)

        # –ü–û–°–õ–ï –£–î–ê–õ–ï–ù–ò–Ø –í–°–ï–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô - –û–ß–ò–°–¢–ò–¢–¨ –ù–ï–ò–°–ü–û–õ–¨–ó–£–ï–ú–´–ï –ú–û–°–¢–´ –ò –ü–ï–†–ï–ó–ê–ì–†–£–ó–ò–¢–¨ –°–ï–¢–¨
        try:
            nodes = self.proxmox.get_nodes()
            cleaned_bridges = self.proxmox.cleanup_unused_bridges(nodes)

            if cleaned_bridges > 0:
                logger.info(f"üßπ –û—á–∏—â–µ–Ω–æ {cleaned_bridges} –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —Å–µ—Ç–µ–≤—ã—Ö –º–æ—Å—Ç–æ–≤")
                results['bridges_cleaned'] = cleaned_bridges
            else:
                logger.info("‚ÑπÔ∏è –ù–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –º–æ—Å—Ç–æ–≤ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

            # –ü–ï–†–ï–ó–ê–ì–†–£–ó–ò–¢–¨ –°–ï–¢–ï–í–´–ï –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò –ù–ê –í–°–ï–• –ù–û–î–ê–• –ü–û–°–õ–ï –£–î–ê–õ–ï–ù–ò–Ø
            print("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Ç–µ–≤—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –Ω–∞ –≤—Å–µ—Ö –Ω–æ–¥–∞—Ö –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è...")
            for node in nodes:
                try:
                    if self.proxmox.reload_node_network(node):
                        print(f"  ‚úÖ –°–µ—Ç—å –Ω–æ–¥—ã {node} –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
                    else:
                        print(f"  ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–µ—Ç—å –Ω–æ–¥—ã {node}")
                except Exception as e:
                    print(f"  ‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Ç–∏ –Ω–æ–¥—ã {node}: {e}")

        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –º–æ—Å—Ç–æ–≤: {e}")

        logger.info(f"–ü–∞–∫–µ—Ç–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: —É—Å–ø–µ—à–Ω—ã—Ö {len(results['successful'])}, "
                   f"–Ω–µ—É–¥–∞—á–Ω—ã—Ö {len(results['failed'])}, –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö {len(results['skipped'])}")
        return results

    def delete_user_resources(self, username: str) -> bool:
        """
        –£–¥–∞–ª–∏—Ç—å –≤—Å–µ —Ä–µ—Å—É—Ä—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        –°—Ç—Ä–∞—Ç–µ–≥–∏—è: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Üí –ø—É–ª ‚Üí –º–∞—à–∏–Ω—ã –≤ –ø—É–ª–µ ‚Üí —É–¥–∞–ª–µ–Ω–∏–µ —Å–µ—Ç–µ–≤—ã—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤ ‚Üí —É–¥–∞–ª–µ–Ω–∏–µ –º–∞—à–∏–Ω ‚Üí –ø—Ä–æ–≤–µ—Ä–∫–∞ ‚Üí —É–¥–∞–ª–µ–Ω–∏–µ –ø—É–ª–∞ ‚Üí —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        Args:
            username: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        Returns:
            True –µ—Å–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            logger.info(f"üîç –ù–∞—Ö–æ–¥–∏–º —Ä–µ—Å—É—Ä—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}")

            # –ü–æ–ª—É—á–∏—Ç—å –ø—É–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            pool_name = username.split('@')[0]
            logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø—É–ª–∞ {pool_name}")

            # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø—É–ª
            if not self.proxmox.pool_exists(pool_name):
                logger.info(f"‚ÑπÔ∏è –ü—É–ª {pool_name} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                # –ï—Å–ª–∏ –ø—É–ª–∞ –Ω–µ—Ç, –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                if self.proxmox.user_exists(username):
                    logger.info(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –±–µ–∑ –ø—É–ª–∞, —É–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                    return self._delete_user(username)
                else:
                    logger.info(f"‚ÑπÔ∏è –†–µ—Å—É—Ä—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username} —É–∂–µ —É–¥–∞–ª–µ–Ω—ã")
                    return True

            # –ü–æ–ª—É—á–∏—Ç—å –º–∞—à–∏–Ω—ã –≤ –ø—É–ª–µ
            pool_vms = self.proxmox.get_pool_vms(pool_name)
            logger.info(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(pool_vms)} VM –≤ –ø—É–ª–µ {pool_name}")

            # –®–ê–ì 1: –£–¥–∞–ª–∏—Ç—å —Å–µ—Ç–µ–≤—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –≤—Å–µ—Ö VM (–í–ù–ê–ß–ê–õ–ï!)
            networks_cleared = self._clear_vm_networks(pool_vms)

            # –®–ê–ì 2: –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ –º–∞—à–∏–Ω—ã (–µ—Å–ª–∏ –Ω–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã)
            vms_stopped = self._stop_pool_vms(pool_name, pool_vms)

            # –®–ê–ì 3: –£–¥–∞–ª–∏—Ç—å –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ –º–∞—à–∏–Ω—ã
            vms_deleted = self._delete_pool_vms(pool_name, pool_vms)

            # –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ü–ê–£–ó–ê: –ü–æ–¥–æ–∂–¥–∞—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π —É–¥–∞–ª–µ–Ω–∏—è
            logger.info(f"‚è≥ –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π —É–¥–∞–ª–µ–Ω–∏—è VM... (10 —Å–µ–∫)")
            import time
            time.sleep(10)

            # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –º–∞—à–∏–Ω—ã —É–¥–∞–ª–µ–Ω—ã (–î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê)
            vms_verified_1 = self._verify_vms_deleted(pool_name)

            # –§–∏–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è —á—Ç–æ –º–∞—à–∏–Ω—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª–µ–Ω—ã
            vms_verified = vms_verified_1
            if not vms_verified:
                logger.warning(f"‚ö†Ô∏è –ù—É–∂–Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–∞—É–∑–∞ - –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ 10 —Å–µ–∫")
                time.sleep(10)
                vms_verified = self._verify_vms_deleted(pool_name)

                if not vms_verified:
                    logger.error(f"‚ùå –í–ú –≤ –ø—É–ª–µ {pool_name} –Ω–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é, –æ—Ç–∫–∞–∑—ã–≤–∞–µ–º—Å—è —É–¥–∞–ª—è—Ç—å –ø—É–ª")
                    return False

            # –¢–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —á—Ç–æ –í–ú —É–¥–∞–ª–µ–Ω—ã - —É–¥–∞–ª—è–µ–º –ø—É–ª
            pool_deleted = self._delete_user_pool(pool_name)

            # –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_deleted = self._delete_user(username)

            success = vms_stopped and networks_cleared and vms_deleted and vms_verified and pool_deleted and user_deleted

            if success:
                logger.info(f"‚úÖ –í—Å–µ —Ä–µ—Å—É—Ä—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã")
            else:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–∏—Ç—å —Ä–µ—Å—É—Ä—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}")

            return success

        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}: {e}")
            return False

    def _stop_pool_vms(self, pool_name: str, pool_vms: List[Dict]) -> bool:
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ –º–∞—à–∏–Ω—ã –≤ –ø—É–ª–µ"""
        try:
            if not pool_vms:
                logger.info(f"‚ÑπÔ∏è –í –ø—É–ª–µ {pool_name} –Ω–µ—Ç VM –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
                return True

            logger.info(f"üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º {len(pool_vms)} VM –≤ –ø—É–ª–µ {pool_name}")
            stopped_count = 0

            for vm_member in pool_vms:
                vmid = vm_member.get('vmid')
                if not vmid:
                    continue

                # –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω–æ–¥—É VM
                # VM –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–∞ –¥—Ä—É–≥–∏—Ö –Ω–æ–¥–∞—Ö, –ø—Ä–æ–≤–µ—Ä–∏–º –≤—Å–µ –Ω–æ–¥—ã
                nodes = self.proxmox.get_nodes()
                vm_found = False

                for node in nodes:
                    try:
                        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å VM –Ω–∞ —ç—Ç–æ–π –Ω–æ–¥–µ
                        vm_status = self.proxmox.get_vm_config(node, vmid)
                        if vm_status:
                            vm_found = True
                            # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
                            current_status = self.proxmox.api.nodes(node).qemu(vmid).status.current.get()
                            if current_status.get('status') == 'running':
                                logger.info(f"–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º VM {vmid} –Ω–∞ –Ω–æ–¥–µ {node}")
                                # –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å VM
                                task_id = self.proxmox.api.nodes(node).qemu(vmid).status.stop.post()
                                if self.proxmox.wait_for_task(task_id, node, timeout=120):
                                    logger.info(f"‚úÖ VM {vmid} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
                                    stopped_count += 1
                                else:
                                    logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å VM {vmid}")
                                    return False
                            else:
                                logger.info(f"‚ÑπÔ∏è VM {vmid} —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
                                stopped_count += 1
                            break
                    except Exception:
                        continue  # VM –Ω–µ –Ω–∞ —ç—Ç–æ–π –Ω–æ–¥–µ

                if not vm_found:
                    logger.warning(f"‚ö†Ô∏è VM {vmid} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–æ–¥–∞—Ö")
                    return False

            logger.info(f"‚úÖ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {stopped_count} –∏–∑ {len(pool_vms)} VM")
            return stopped_count == len(pool_vms)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ VM –ø—É–ª–∞ {pool_name}: {e}")
            return False

    def _clear_vm_networks(self, pool_vms: List[Dict]) -> bool:
        """–û—á–∏—Å—Ç–∏—Ç—å —Å–µ—Ç–µ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö –º–∞—à–∏–Ω"""
        try:
            if not pool_vms:
                logger.info("‚ÑπÔ∏è –ù–µ—Ç VM –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å–µ—Ç–µ–≤—ã—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤")
                return True

            logger.info(f"üßπ –û—á–∏—â–∞–µ–º —Å–µ—Ç–µ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é {len(pool_vms)} VM")
            cleared_count = 0

            for vm_member in pool_vms:
                vmid = vm_member.get('vmid')
                if not vmid:
                    continue

                # –ù–∞–π—Ç–∏ VM –Ω–∞ –Ω–æ–¥–∞—Ö
                nodes = self.proxmox.get_nodes()
                vm_found = False

                for node in nodes:
                    try:
                        vm_config = self.proxmox.get_vm_config(node, vmid)
                        if vm_config:
                            vm_found = True
                            logger.info(f"–û—á–∏—â–∞–µ–º —Å–µ—Ç—å VM {vmid} –Ω–∞ –Ω–æ–¥–µ {node}")

                            # –û—á–∏—Å—Ç–∏—Ç—å —Å–µ—Ç–µ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø—É—Ç–µ–º —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö net* –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
                            network_updates = {}

                            # –ù–∞–π—Ç–∏ –∏ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ —Å–µ—Ç–µ–≤—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã
                            vm_full_config = self.proxmox.api.nodes(node).qemu(vmid).config.get()
                            for key in vm_full_config:
                                if key.startswith('net'):
                                    network_updates[key] = None  # None —É–¥–∞–ª—è–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä

                            if network_updates:
                                self.proxmox.api.nodes(node).qemu(vmid).config.put(delete=','.join(network_updates.keys()))
                                logger.info(f"‚úÖ –°–µ—Ç–µ–≤—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã VM {vmid} —É–¥–∞–ª–µ–Ω—ã: {list(network_updates.keys())}")
                            else:
                                logger.info(f"‚ÑπÔ∏è VM {vmid} –Ω–µ –∏–º–µ–µ—Ç —Å–µ—Ç–µ–≤—ã—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤")

                            cleared_count += 1
                            break
                    except Exception as ex:
                        # –¢–∏—Ö–∏–π —Ä–µ–∂–∏–º –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å–µ—Ç–∏ - –æ–∂–∏–¥–∞–µ–º—ã–µ –æ—à–∏–±–∫–∏, –∫–æ–≥–¥–∞ VM –∏—â–µ—Ç—Å—è –Ω–∞ –≤—Å–µ—Ö –Ω–æ–¥–∞—Ö
                        continue

                if not vm_found:
                    logger.error(f"‚ùå VM {vmid} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∏ –Ω–∞ –æ–¥–Ω–æ–π –Ω–æ–¥–µ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å–µ—Ç–∏")
                    return False

            logger.info(f"‚úÖ –°–µ—Ç—å –æ—á–∏—â–µ–Ω–∞ —É {cleared_count} –∏–∑ {len(pool_vms)} VM")
            return cleared_count == len(pool_vms)

        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å–µ—Ç–µ–≤—ã—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤: {e}")
            return False

    def _delete_pool_vms(self, pool_name: str, pool_vms: List[Dict]) -> bool:
        """–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ –º–∞—à–∏–Ω—ã –≤ –ø—É–ª–µ"""
        try:
            if not pool_vms:
                logger.info(f"‚ÑπÔ∏è –í –ø—É–ª–µ {pool_name} –Ω–µ—Ç VM –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
                return True

            logger.info(f"üóëÔ∏è –£–¥–∞–ª—è–µ–º {len(pool_vms)} VM –≤ –ø—É–ª–µ {pool_name}")
            deleted_count = 0

            for vm_member in pool_vms:
                vmid = vm_member.get('vmid')
                if not vmid:
                    continue

                # –ù–∞–π—Ç–∏ VM –Ω–∞ –Ω–æ–¥–∞—Ö
                nodes = self.proxmox.get_nodes()
                vm_found = False

                for node in nodes:
                    try:
                        logger.debug(f"–ü—Ä–æ–≤–µ—Ä—è–µ–º VM {vmid} –Ω–∞ –Ω–æ–¥–µ {node}")
                        vm_config = self.proxmox.get_vm_config(node, vmid)
                        if vm_config:
                            vm_found = True
                            logger.info(f"üö® –ù–ê–ß–ò–ù–ê–ï–ú –£–î–ê–õ–ï–ù–ò–ï VM {vmid} —Å –Ω–æ–¥—ã {node}")

                            # –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å VM –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º, –µ—Å–ª–∏ –æ–Ω–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç
                            try:
                                status = self.proxmox.api.nodes(node).qemu(vmid).status.current.get()
                                current_status = status.get('status')
                                logger.debug(f"–°—Ç–∞—Ç—É—Å VM {vmid} –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º: {current_status}")

                                if current_status == 'running':
                                    logger.info(f"üõë VM {vmid} –µ—â–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º")
                                    task_id = self.proxmox.api.nodes(node).qemu(vmid).status.stop.post()
                                    if self.proxmox.wait_for_task(task_id, node, timeout=60):
                                        logger.info(f"‚úÖ VM {vmid} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º")
                                    else:
                                        logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å VM {vmid} –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º")
                                        return False
                            except Exception as stop_e:
                                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å VM {vmid}: {stop_e}")

                            # –ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è VM
                            delete_result = self.proxmox.delete_vm(node, vmid)
                            logger.debug(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–∑–æ–≤–∞ proxmox.delete_vm({node}, {vmid}): {delete_result}")

                            if delete_result:
                                logger.info(f"‚úÖ VM {vmid} –£–°–ü–ï–®–ù–û –£–î–ê–õ–ï–ù–ê —Å –Ω–æ–¥—ã {node}")
                                deleted_count += 1
                            else:
                                logger.error(f"‚ùå proxmox.delete_vm –≤–µ—Ä–Ω—É–ª False –¥–ª—è VM {vmid} –Ω–∞ {node}")
                                return False
                            break
                    except Exception as ex:
                        logger.debug(f"VM {vmid} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ –Ω–æ–¥–µ {node}: {ex}")
                        continue

                if not vm_found:
                    # VM –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∏ –Ω–∞ –æ–¥–Ω–æ–π –Ω–æ–¥–µ - —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–æ—Ä–º–∞–ª—å–Ω–æ –µ—Å–ª–∏ –æ–Ω–∞ —É–∂–µ —É–¥–∞–ª–µ–Ω–∞
                    logger.warning(f"‚ö†Ô∏è VM {vmid} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–æ–¥–∞—Ö - –≤–æ–∑–º–æ–∂–Ω–æ —É–∂–µ —É–¥–∞–ª–µ–Ω–∞")
                    deleted_count += 1  # –°—á–∏—Ç–∞–µ–º –∫–∞–∫ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–Ω—É—é

            logger.info(f"‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {deleted_count} –∏–∑ {len(pool_vms)} VM –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ")
            return deleted_count == len(pool_vms)

        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è VM –ø—É–ª–∞ {pool_name}: {e}")
            return False

    def _verify_vms_deleted(self, pool_name: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –≤—Å–µ VM –≤ –ø—É–ª–µ —É–¥–∞–ª–µ–Ω—ã"""
        try:
            logger.debug(f"–ü—Ä–æ–≤–µ—Ä—è–µ–º —É–¥–∞–ª–µ–Ω–∏–µ VM –≤ –ø—É–ª–µ {pool_name}")
            pool_vms = self.proxmox.get_pool_vms(pool_name)

            if not pool_vms:
                logger.debug(f"–í –ø—É–ª–µ {pool_name} –Ω–µ—Ç VM")
                return True

            # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–∞–∂–¥—É—é VM –∏–∑ —Å–ø–∏—Å–∫–∞ –ø—É–ª–∞ - –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ª–∏ –æ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            actually_deleted = 0
            nodes = self.proxmox.get_nodes()

            for vm_member in pool_vms:
                vmid = vm_member.get('vmid')
                if not vmid:
                    continue

                # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —ç—Ç–∞ VM –Ω–∞ —Å–∞–º–æ–º –¥–µ–ª–µ –Ω–∞ –∫–∞–∫–æ–π-–ª–∏–±–æ –Ω–æ–¥–µ
                vm_exists = False
                for node in nodes:
                    try:
                        vm_config = self.proxmox.get_vm_config(node, vmid)
                        if vm_config:
                            vm_exists = True
                            break
                    except Exception:
                        continue  # VM –Ω–µ –Ω–∞ —ç—Ç–æ–π –Ω–æ–¥–µ

                if not vm_exists:
                    actually_deleted += 1

            # –ï—Å–ª–∏ –≤—Å–µ VM –∏–∑ –ø—É–ª–∞ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–µ–Ω—ã - —Å—á–∏—Ç–∞–µ–º —É—Å–ø–µ—Ö
            total_pool_vms = len([vm for vm in pool_vms if vm.get('vmid')])

            if actually_deleted == total_pool_vms:
                logger.debug(f"–í—Å–µ {total_pool_vms} VM –∏–∑ –ø—É–ª–∞ {pool_name} —É–¥–∞–ª–µ–Ω—ã")
                return True
            else:
                remaining_count = total_pool_vms - actually_deleted
                logger.warning(f"–í –ø—É–ª–µ {pool_name} –µ—â–µ {remaining_count} VM –∏–∑ {total_pool_vms} –Ω–µ —É–¥–∞–ª–µ–Ω—ã")
                return False

        except Exception:
            # –¢–∏—Ö–∏–π —Ä–µ–∂–∏–º - –Ω–µ –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
            return False

    def _delete_user_pool(self, pool_name: str) -> bool:
        """–£–¥–∞–ª–∏—Ç—å –ø—É–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            if not self.proxmox.pool_exists(pool_name):
                logger.info(f"‚ÑπÔ∏è –ü—É–ª {pool_name} —É–∂–µ —É–¥–∞–ª–µ–Ω")
                return True

            logger.info(f"üóëÔ∏è –£–¥–∞–ª—è–µ–º –ø—É–ª {pool_name}")
            # –î–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø—É–ª–∞ –≤ Proxmox API –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è DELETE /pools/{poolid}
            try:
                self.proxmox.api.pools(pool_name).delete()
                logger.info(f"‚úÖ –ü—É–ª {pool_name} —É–¥–∞–ª–µ–Ω")
                return True
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ API –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—É–ª–∞ {pool_name}: {e}")
                return False

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—É–ª–∞ {pool_name}: {e}")
            return False

    def _delete_user(self, username: str) -> bool:
        """–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            if not self.proxmox.user_exists(username):
                logger.info(f"‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} —É–∂–µ —É–¥–∞–ª–µ–Ω")
                return True

            logger.info(f"üë§ –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}")
            try:
                self.proxmox.api.access.users(username).delete()
                logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} —É–¥–∞–ª–µ–Ω")
                return True
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ API –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}: {e}")
                return False

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}: {e}")
            return False

    def _cleanup_user(self, username: str) -> None:
        """–û—á–∏—Å—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –æ—à–∏–±–∫–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø—É–ª–∞"""
        try:
            # –ó–∞–≥–ª—É—à–∫–∞ - –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            logger.info(f"–û—á–∏—Å—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}: {e}")

    def _cleanup_user_and_pool(self, username: str, pool_name: str) -> None:
        """–û—á–∏—Å—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—É–ª –ø—Ä–∏ –æ—à–∏–±–∫–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–∞–≤"""
        try:
            # –ó–∞–≥–ª—É—à–∫–∞ - –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –æ—á–∏—Å—Ç–∫–∏
            logger.info(f"–û—á–∏—Å—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username} –∏ –ø—É–ª–∞ {pool_name}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—É–ª–∞: {e}")

    def _generate_password(self, length: int = 8) -> str:
        """–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è –æ–±—É—á–∞—é—â–∏—Ö —Å—Ç–µ–Ω–¥–æ–≤"""
        alphabet = string.digits  # –¢–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –æ–±—É—á–µ–Ω–∏–∏
        return ''.join(secrets.choice(alphabet) for _ in range(length))

    def get_user_pools(self) -> List[str]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—É–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        try:
            # –ó–∞–≥–ª—É—à–∫–∞ - –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—É–ª–æ–≤
            return []
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø—É–ª–æ–≤: {e}")
            return []

    def get_pool_users(self, pool_name: str) -> List[str]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É–ª–∞"""
        try:
            # –ó–∞–≥–ª—É—à–∫–∞ - –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É–ª–∞
            return []
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É–ª–∞ {pool_name}: {e}")
            return []

    def _verify_vms_deleted_by_searching_nodes(self, pool_name: str) -> bool:
        """
        –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –ø–æ–∏—Å–∫ VM –ø–æ –≤—Å–µ–º –Ω–æ–¥–∞–º –∫–ª–∞—Å—Ç–µ—Ä–∞

        Args:
            pool_name: –ò–º—è –ø—É–ª–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏

        Returns:
            True –µ—Å–ª–∏ VM –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–∏ –Ω–∞ –æ–¥–Ω–æ–π –Ω–æ–¥–µ
        """
        try:
            logger.info(f"üîç –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –ø–æ–∏—Å–∫ VM –ø—É–ª–∞ '{pool_name}' –ø–æ –≤—Å–µ–º –Ω–æ–¥–∞–º –∫–ª–∞—Å—Ç–µ—Ä–∞")

            # –ü–æ–ª—É—á–∏—Ç—å VM –∏–∑ –ø—É–ª–∞
            pool_vms = self.proxmox.get_pool_vms(pool_name)
            vmids_to_check = [vm.get('vmid') for vm in pool_vms if vm.get('vmid')]

            if not vmids_to_check:
                logger.info(f"‚úÖ –í –ø—É–ª–µ {pool_name} –Ω–µ—Ç VM –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")
                return True

            logger.info(f"–ò—â–µ–º {len(vmids_to_check)} VM: {vmids_to_check}")

            # –ü–æ–∏—Å–∫ –∫–∞–∂–¥–æ–π VM –Ω–∞ –≤—Å–µ—Ö –Ω–æ–¥–∞—Ö –∫–ª–∞—Å—Ç–µ—Ä–∞
            remaining_vms = []
            nodes = self.proxmox.get_nodes()

            for vmid in vmids_to_check:
                vm_still_exists = False

                for node in nodes:
                    try:
                        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ VM –Ω–∞ —ç—Ç–æ–π –Ω–æ–¥–µ
                        vm_config = self.proxmox.get_vm_config(node, vmid)
                        if vm_config:
                            logger.error(f"‚ùå VM {vmid} –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ –Ω–æ–¥–µ {node}!")
                            vm_still_exists = True
                            remaining_vms.append(f"{vmid}@{node}")
                            break  # –ù–∞–π–¥–µ–Ω–∞, –±–æ–ª—å—à–µ –Ω–µ –∏—Å–∫–∞—Ç—å
                    except Exception as e:
                        # VM –Ω–µ –Ω–∞ —ç—Ç–æ–π –Ω–æ–¥–µ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–∏—Å–∫
                        logger.debug(f"VM {vmid} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ –Ω–æ–¥–µ {node}: {e}")
                        continue

                if not vm_still_exists:
                    logger.info(f"‚úÖ VM {vmid} –ù–ï –Ω–∞–π–¥–µ–Ω–∞ –Ω–∏ –Ω–∞ –æ–¥–Ω–æ–π –Ω–æ–¥–µ - —É–¥–∞–ª–µ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")

            if remaining_vms:
                logger.error(f"‚ùå –ù–∞–π–¥–µ–Ω—ã –ù–ï –£–î–ê–õ–ï–ù–ù–´–ï VM: {remaining_vms}")
                return False
            else:
                logger.info(f"‚úÖ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–π–¥–µ–Ω–∞ - –≤—Å–µ VM –ø—É–ª–∞ '{pool_name}' —É–¥–∞–ª–µ–Ω—ã")
                return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ VM –ø—É–ª–∞ {pool_name}: {e}")
            return False

    def audit_user_actions(self, username: str) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å –∞—É–¥–∏—Ç –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            # –ó–∞–≥–ª—É—à–∫–∞ - –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –∞—É–¥–∏—Ç–∞
            return {
                'username': username,
                'actions': [],
                'last_login': None,
                'created_vms': 0
            }
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞—É–¥–∏—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}: {e}")
            return {}
