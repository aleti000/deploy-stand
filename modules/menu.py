#!/usr/bin/env python3
"""
–ú–æ–¥—É–ª—å –º–µ–Ω—é —Å–∏—Å—Ç–µ–º—ã —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è —Å—Ç–µ–Ω–¥–æ–≤ –í–ú
–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–º–∏ —Å—Ç–µ–Ω–¥–∞–º–∏
"""

import asyncio
import logging
import getpass
from typing import Dict, List, Optional, Any
from .connection_manager import get_connection_manager
from .proxmox_client import create_proxmox_client
from .user_list_manager import get_user_list_manager

logger = logging.getLogger(__name__)


class DeployStandMenu:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–µ–Ω—é —Å–∏—Å—Ç–µ–º—ã —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è —Å—Ç–µ–Ω–¥–æ–≤"""

    def __init__(self):
        self.proxmox: Optional[ProxmoxAPI] = None
        self.is_running = False
        self.connection_manager = get_connection_manager()
        self.user_list_manager = get_user_list_manager()

    async def initialize_proxmox_connection(self, config: Dict) -> bool:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Proxmox API"""
        try:
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç Proxmox
            client = create_proxmox_client(config)

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            if not client.connect():
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Proxmox API")
                return False

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª–∏–µ–Ω—Ç –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            self.proxmox = client

            logger.info(f"–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Proxmox —á–µ—Ä–µ–∑ –∫–ª–∏–µ–Ω—Ç")
            return True

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Proxmox: {e}")
            return False

    async def show_main_menu(self):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
        # –û—á–∏—â–∞–µ–º —ç–∫—Ä–∞–Ω –ø–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º –º–µ–Ω—é
        import os
        os.system('clear' if os.name != 'nt' else 'cls')

        print("\n" + "="*50)
        print("DEPLOY STAND - –°–∏—Å—Ç–µ–º–∞ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è —Å—Ç–µ–Ω–¥–æ–≤ –í–ú")
        print("="*50)
        print("1. –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏")
        print("2. –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö –º–∞—à–∏–Ω")
        print("3. –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Å—Ç–µ–Ω–¥")
        print("4. –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞–º–∏")
        print("5. –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        print("6. –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è–º–∏ –∫ —Å–µ—Ä–≤–µ—Ä–∞–º")
        print("0. –í—ã—Ö–æ–¥")
        print("-"*50)

    async def get_user_choice(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            choice = input("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ").strip()
            return choice
        except KeyboardInterrupt:
            return "0"

    async def handle_menu_choice(self, choice: str, config: Dict) -> bool:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if choice == "0":
            print("–í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã...")
            return False

        elif choice == "1":
            await self.manage_users()

        elif choice == "2":
            await self.show_vm_list()

        elif choice == "3":
            await self.create_stand()

        elif choice == "4":
            await self.manage_templates()

        elif choice == "5":
            await self.show_settings()

        elif choice == "6":
            await self.manage_server_connections()

        else:
            print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

        return True

    async def connect_to_proxmox(self, config: Dict):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Proxmox —Å–µ—Ä–≤–µ—Ä—É"""
        print("\n–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Proxmox —Å–µ—Ä–≤–µ—Ä—É...")
        success = await self.initialize_proxmox_connection(config)
        if success:
            print("‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Proxmox")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Proxmox")

    async def show_vm_list(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö –º–∞—à–∏–Ω"""
        # –û—á–∏—â–∞–µ–º —ç–∫—Ä–∞–Ω –ø–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º —Å–ø–∏—Å–∫–∞ –í–ú
        import os
        os.system('clear' if os.name != 'nt' else 'cls')

        if not self.proxmox:
            print("‚ùå –ö–ª–∏–µ–Ω—Ç Proxmox –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            print("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É Proxmox")
            return

        if not self.proxmox.is_connected():
            print("‚ùå –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ Proxmox —Å–µ—Ä–≤–µ—Ä—É")
            print("–°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å –∫ —Å–µ—Ä–≤–µ—Ä—É —á–µ—Ä–µ–∑ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è–º–∏")
            return

        try:
            print("\nüìã –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö –º–∞—à–∏–Ω...")

            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É–∑–ª–æ–≤ —á–µ—Ä–µ–∑ –∫–ª–∏–µ–Ω—Ç
            nodes = self.proxmox.get_nodes()
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —É–∑–ª–æ–≤: {len(nodes)}")

            if not nodes:
                print("‚ö†Ô∏è  –ù–∞ —Å–µ—Ä–≤–µ—Ä–µ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É–∑–ª–æ–≤")
                return

            total_vms = 0
            for node in nodes:
                node_name = node.get('node')
                print(f"\nüìÅ –£–∑–µ–ª: {node_name}")

                try:
                    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –í–ú –Ω–∞ —É–∑–ª–µ —á–µ—Ä–µ–∑ –∫–ª–∏–µ–Ω—Ç
                    vms = self.proxmox.get_vms(node_name)
                    node_vm_count = len(vms)

                    if node_vm_count == 0:
                        print("  üì≠ –ù–µ—Ç –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö –º–∞—à–∏–Ω")
                    else:
                        print(f"  üñ•Ô∏è  –í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ –º–∞—à–∏–Ω—ã ({node_vm_count}):")
                        for vm in vms:
                            vmid = vm.get('vmid')
                            name = vm.get('name', '–ë–µ–∑ –∏–º–µ–Ω–∏')
                            status = vm.get('status', 'unknown')
                            print(f"    ‚Ä¢ VM {vmid}: {name} - {status}")
                            total_vms += 1

                except Exception as node_error:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –í–ú –¥–ª—è —É–∑–ª–∞ {node_name}: {node_error}")
                    print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —É–∑–ª–∞ {node_name}")

            print(f"\nüìä –í—Å–µ–≥–æ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö –º–∞—à–∏–Ω: {total_vms}")

            # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—É–∑—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞
            print("\n" + "="*50)
            print("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...")
            print("="*50)
            input()

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –í–ú: {e}")
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö –º–∞—à–∏–Ω: {e}")
            print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É Proxmox")
            print("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...")
            input()

    async def create_stand(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å—Ç–µ–Ω–¥–∞"""
        # –û—á–∏—â–∞–µ–º —ç–∫—Ä–∞–Ω –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º —Å—Ç–µ–Ω–¥–∞
        import os
        os.system('clear' if os.name != 'nt' else 'cls')

        print("\n–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å—Ç–µ–Ω–¥–∞...")
        print("‚ö†Ô∏è  –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")

    async def manage_templates(self):
        """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞–º–∏"""
        # –û—á–∏—â–∞–µ–º —ç–∫—Ä–∞–Ω –ø–µ—Ä–µ–¥ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º —à–∞–±–ª–æ–Ω–∞–º–∏
        import os
        os.system('clear' if os.name != 'nt' else 'cls')

        print("\n–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞–º–∏...")
        print("‚ö†Ô∏è  –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")

    async def show_settings(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        # –û—á–∏—â–∞–µ–º —ç–∫—Ä–∞–Ω –ø–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º –Ω–∞—Å—Ç—Ä–æ–µ–∫
        import os
        os.system('clear' if os.name != 'nt' else 'cls')

        print("\n–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã:")
        print("‚ö†Ô∏è  –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")

    async def manage_users(self):
        """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        # –û—á–∏—â–∞–µ–º —ç–∫—Ä–∞–Ω –ø–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º –ø–æ–¥–º–µ–Ω—é
        import os
        os.system('clear' if os.name != 'nt' else 'cls')

        print("\n" + "="*50)
        print("–£–ü–†–ê–í–õ–ï–ù–ò–ï –°–ü–ò–°–ö–ê–ú–ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô")
        print("="*50)
        print("1. –í–≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)")
        print("2. –ò–º–ø–æ—Ä—Ç –∏–∑ —Å–ø–∏—Å–∫–∞")
        print("3. –í—ã–≤–µ—Å—Ç–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–ø–∏—Å–∫–∏")
        print("4. –£–¥–∞–ª–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        print("0. –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        print("-"*50)

        while True:
            choice = await self.get_user_input("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ")

            if choice == "0":
                print("–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...")
                break
            elif choice == "1":
                await self.create_user_list_interactive()
            elif choice == "2":
                await self.import_user_list_interactive()
            elif choice == "3":
                await self.show_user_lists()
                print("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
                input()
                # –û—á–∏—â–∞–µ–º —ç–∫—Ä–∞–Ω –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —Å–Ω–æ–≤–∞
                import os
                os.system('clear' if os.name != 'nt' else 'cls')
                print("\n" + "="*50)
                print("–£–ü–†–ê–í–õ–ï–ù–ò–ï –°–ü–ò–°–ö–ê–ú–ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô")
                print("="*50)
                print("1. –í–≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)")
                print("2. –ò–º–ø–æ—Ä—Ç –∏–∑ —Å–ø–∏—Å–∫–∞")
                print("3. –í—ã–≤–µ—Å—Ç–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–ø–∏—Å–∫–∏")
                print("4. –£–¥–∞–ª–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
                print("0. –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
                print("-"*50)
            elif choice == "4":
                await self.delete_user_list_interactive()
            else:
                print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

    async def create_user_list_interactive(self):
        """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        # –û—á–∏—â–∞–µ–º —ç–∫—Ä–∞–Ω –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º —Å–ø–∏—Å–∫–∞
        import os
        os.system('clear' if os.name != 'nt' else 'cls')

        print("\nüìù –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        print("–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: user1, user2, user3)")
        print("–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∫–∞–∑–∞–Ω –±–µ–∑ @pve, –æ–Ω –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")

        # –í–≤–æ–¥ –∏–º–µ–Ω–∏ —Å–ø–∏—Å–∫–∞
        list_name = await self.get_user_input("–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ")
        if not list_name:
            return

        # –í–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users_input = await self.get_user_input("–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é: ")
        if not users_input:
            print("‚ùå –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
            return

        # –ü–∞—Ä—Å–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users = self.user_list_manager.parse_user_input(users_input)
        if not users:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            return

        # –í–≤–æ–¥ –æ–ø–∏—Å–∞–Ω–∏—è
        description = await self.get_user_input("–û–ø–∏—Å–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ): ", required=False)

        # –°–æ–∑–¥–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞
        if self.user_list_manager.create_user_list(list_name, users, description):
            print(f"‚úÖ –°–ø–∏—Å–æ–∫ '{list_name}' —Å–æ–∑–¥–∞–Ω —Å {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–ø–∏—Å–∫–∞ '{list_name}'")
            return

        # –û—á–∏—â–∞–µ–º —ç–∫—Ä–∞–Ω –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
        import os
        os.system('clear' if os.name != 'nt' else 'cls')
        print("\n" + "="*50)
        print("–£–ü–†–ê–í–õ–ï–ù–ò–ï –°–ü–ò–°–ö–ê–ú–ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô")
        print("="*50)
        print("1. –í–≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)")
        print("2. –ò–º–ø–æ—Ä—Ç –∏–∑ —Å–ø–∏—Å–∫–∞")
        print("3. –í—ã–≤–µ—Å—Ç–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–ø–∏—Å–∫–∏")
        print("4. –£–¥–∞–ª–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        print("0. –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        print("-"*50)

    async def import_user_list_interactive(self):
        """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –∏–º–ø–æ—Ä—Ç —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        # –û—á–∏—â–∞–µ–º —ç–∫—Ä–∞–Ω –ø–µ—Ä–µ–¥ –∏–º–ø–æ—Ä—Ç–æ–º
        import os
        os.system('clear' if os.name != 'nt' else 'cls')

        print("\nüì• –ò–º–ø–æ—Ä—Ç —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞")
        print("–§–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–ø–æ –æ–¥–Ω–æ–º—É –Ω–∞ —Å—Ç—Ä–æ–∫—É)")
        print("–°—Ç—Ä–æ–∫–∏ –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å # —Å—á–∏—Ç–∞—é—Ç—Å—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏")
        print("–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∫–∞–∑–∞–Ω –±–µ–∑ @pve, –æ–Ω –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")

        # –í–≤–æ–¥ –∏–º–µ–Ω–∏ —Å–ø–∏—Å–∫–∞
        list_name = await self.get_user_input("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –Ω–æ–≤–æ–≥–æ —Å–ø–∏—Å–∫–∞: ")
        if not list_name:
            return

        # –í–≤–æ–¥ –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª—É
        file_path = await self.get_user_input("–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å–æ —Å–ø–∏—Å–∫–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ")
        if not file_path:
            print("‚ùå –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
        from pathlib import Path
        if not Path(file_path).exists():
            print(f"‚ùå –§–∞–π–ª '{file_path}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        # –í–≤–æ–¥ –æ–ø–∏—Å–∞–Ω–∏—è
        description = await self.get_user_input("–û–ø–∏—Å–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ): ", required=False)

        # –ò–º–ø–æ—Ä—Ç —Å–ø–∏—Å–∫–∞ –∏–∑ —Ñ–∞–π–ª–∞
        if self.user_list_manager.import_user_list_from_file(list_name, file_path, description):
            print(f"‚úÖ –°–ø–∏—Å–æ–∫ '{list_name}' –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –∏–∑ —Ñ–∞–π–ª–∞ '{file_path}'")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ —Å–ø–∏—Å–∫–∞ '{list_name}' –∏–∑ —Ñ–∞–π–ª–∞ '{file_path}'")

    async def show_user_lists(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Å–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        # –û—á–∏—â–∞–µ–º —ç–∫—Ä–∞–Ω –ø–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º
        import os
        os.system('clear' if os.name != 'nt' else 'cls')

        print("\nüìã –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:")

        user_lists = self.user_list_manager.get_user_lists()

        if not user_lists:
            print("üì≠ –ù–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Å–ø–∏—Å–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            return

        for list_name, list_data in user_lists.items():
            print(f"\nüìÅ {list_name}")
            print(f"   –û–ø–∏—Å–∞–Ω–∏–µ: {list_data.get('description', '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è')}")
            print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {list_data.get('count', 0)}")

            users = list_data.get('users', [])
            if users:
                print("   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:")
                for i, user in enumerate(users[:5], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã—Ö 5
                    print(f"     {i}. {user}")
                if len(users) > 5:
                    print(f"     ... –∏ –µ—â–µ {len(users) - 5} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")

    async def delete_user_list_interactive(self):
        """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        # –û—á–∏—â–∞–µ–º —ç–∫—Ä–∞–Ω –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
        import os
        os.system('clear' if os.name != 'nt' else 'cls')

        print("\nüóëÔ∏è  –£–¥–∞–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ø–∏—Å–∫–∏
        list_names = self.user_list_manager.get_user_list_names()
        if not list_names:
            print("‚ùå –ù–µ—Ç —Å–ø–∏—Å–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            return

        print("\n–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:")
        for i, list_name in enumerate(list_names, 1):
            print(f"{i}. {list_name}")

        while True:
            choice = await self.get_user_input("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (–Ω–æ–º–µ—Ä) –∏–ª–∏ 0 –¥–ª—è –æ—Ç–º–µ–Ω—ã: ")

            if choice == "0":
                print("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
                # –û—á–∏—â–∞–µ–º —ç–∫—Ä–∞–Ω –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
                import os
                os.system('clear' if os.name != 'nt' else 'cls')
                print("\n" + "="*50)
                print("–£–ü–†–ê–í–õ–ï–ù–ò–ï –°–ü–ò–°–ö–ê–ú–ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô")
                print("="*50)
                print("1. –í–≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)")
                print("2. –ò–º–ø–æ—Ä—Ç –∏–∑ —Å–ø–∏—Å–∫–∞")
                print("3. –í—ã–≤–µ—Å—Ç–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–ø–∏—Å–∫–∏")
                print("4. –£–¥–∞–ª–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
                print("0. –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
                print("-"*50)
                return

            try:
                list_index = int(choice) - 1
                if 0 <= list_index < len(list_names):
                    list_to_delete = list_names[list_index]

                    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
                    confirm = await self.get_user_input(
                        f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–ø–∏—Å–æ–∫ '{list_to_delete}'? (y/n): ",
                        required=False, default="n"
                    )

                    if confirm.lower() in ['y', 'yes', '–¥–∞', '–¥']:
                        if self.user_list_manager.delete_user_list(list_to_delete):
                            print(f"‚úÖ –°–ø–∏—Å–æ–∫ '{list_to_delete}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω")
                            # –û—á–∏—â–∞–µ–º —ç–∫—Ä–∞–Ω –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
                            import os
                            os.system('clear' if os.name != 'nt' else 'cls')
                            print("\n" + "="*50)
                            print("–£–ü–†–ê–í–õ–ï–ù–ò–ï –°–ü–ò–°–ö–ê–ú–ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô")
                            print("="*50)
                            print("1. –í–≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)")
                            print("2. –ò–º–ø–æ—Ä—Ç –∏–∑ —Å–ø–∏—Å–∫–∞")
                            print("3. –í—ã–≤–µ—Å—Ç–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–ø–∏—Å–∫–∏")
                            print("4. –£–¥–∞–ª–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
                            print("0. –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
                            print("-"*50)
                        else:
                            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ '{list_to_delete}'")
                    else:
                        print("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")

                    return
                else:
                    print(f"‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –æ—Ç 1 –¥–æ {len(list_names)}")
            except ValueError:
                print("‚ùå –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å–ø–∏—Å–∫–∞ –∏–ª–∏ 0 –¥–ª—è –æ—Ç–º–µ–Ω—ã")

    async def manage_server_connections(self):
        """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è–º–∏ –∫ —Å–µ—Ä–≤–µ—Ä–∞–º Proxmox"""
        # –û—á–∏—â–∞–µ–º —ç–∫—Ä–∞–Ω –ø–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º –ø–æ–¥–º–µ–Ω—é
        import os
        os.system('clear' if os.name != 'nt' else 'cls')

        print("\n" + "="*60)
        print("–£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø–ú–ò –ö –°–ï–†–í–ï–†–ê–ú PROXMOX")
        print("="*60)
        print("1. –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ")
        print("2. –£–¥–∞–ª–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ")
        print("3. –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π")
        print("0. –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        print("-"*60)

        while True:
            choice = await self.get_user_input("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ")

            if choice == "0":
                print("–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...")
                break
            elif choice == "1":
                await self.create_server_connection()
            elif choice == "2":
                await self.delete_server_connection()
            elif choice == "3":
                await self.show_server_list()
                print("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
                input()
                # –û—á–∏—â–∞–µ–º —ç–∫—Ä–∞–Ω –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —Å–Ω–æ–≤–∞
                import os
                os.system('clear' if os.name != 'nt' else 'cls')
                print("\n" + "="*60)
                print("–£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø–ú–ò –ö –°–ï–†–í–ï–†–ê–ú PROXMOX")
                print("="*60)
                print("1. –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ")
                print("2. –£–¥–∞–ª–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ")
                print("3. –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π")
                print("0. –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
                print("-"*60)
            else:
                print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

    async def create_server_connection(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É"""
        # –û—á–∏—â–∞–µ–º —ç–∫—Ä–∞–Ω –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        import os
        os.system('clear' if os.name != 'nt' else 'cls')

        print("\nüìù –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É Proxmox")
        new_config = await self.create_new_connection_interactive()

        if new_config:
            print(f"üíæ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ '{new_config.get('name')}' —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é")
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ")

    async def delete_server_connection(self):
        """–£–¥–∞–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        # –û—á–∏—â–∞–µ–º —ç–∫—Ä–∞–Ω –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        import os
        os.system('clear' if os.name != 'nt' else 'cls')

        print("\nüóëÔ∏è  –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤
        servers = self.connection_manager.get_proxmox_servers()
        if not servers:
            print("‚ùå –ù–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            return

        print("\n–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
        for i, (server_name, server_config) in enumerate(servers.items(), 1):
            name = server_config.get('name', '–ë–µ–∑ –∏–º–µ–Ω–∏')
            host = server_config.get('host', '–ù–µ —É–∫–∞–∑–∞–Ω')
            print(f"{i}. {server_name} - {name} ({host})")

        while True:
            choice = await self.get_user_input("–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (–Ω–æ–º–µ—Ä) –∏–ª–∏ 0 –¥–ª—è –æ—Ç–º–µ–Ω—ã: ")

            if choice == "0":
                print("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
                # –û—á–∏—â–∞–µ–º —ç–∫—Ä–∞–Ω –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è–º–∏
                import os
                os.system('clear' if os.name != 'nt' else 'cls')
                print("\n" + "="*60)
                print("–£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø–ú–ò –ö –°–ï–†–í–ï–†–ê–ú PROXMOX")
                print("="*60)
                print("1. –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ")
                print("2. –£–¥–∞–ª–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ")
                print("3. –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π")
                print("0. –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
                print("-"*60)
                return

            try:
                server_index = int(choice) - 1
                if 0 <= server_index < len(servers):
                    server_names = list(servers.keys())
                    server_to_delete = server_names[server_index]
                    server_config = servers[server_to_delete]

                    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
                    confirm = await self.get_user_input(
                        f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–µ—Ä–≤–µ—Ä '{server_to_delete}'? (y/n): ",
                        required=False, default="n"
                    )

                    if confirm.lower() in ['y', 'yes', '–¥–∞', '–¥']:
                        if self.connection_manager.remove_server(server_to_delete):
                            print(f"‚úÖ –°–µ—Ä–≤–µ—Ä '{server_to_delete}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω")
                        else:
                            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞ '{server_to_delete}'")
                    else:
                        print("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")

                    return
                else:
                    print(f"‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –æ—Ç 1 –¥–æ {len(servers)}")
            except ValueError:
                print("‚ùå –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å–µ—Ä–≤–µ—Ä–∞ –∏–ª–∏ 0 –¥–ª—è –æ—Ç–º–µ–Ω—ã")

    async def show_server_list(self) -> List[str]:
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤"""
        print("\n" + "="*60)
        print("–î–û–°–¢–£–ü–ù–´–ï –°–ï–†–í–ï–†–´ PROXMOX")
        print("="*60)

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        if not self.connection_manager.load_config():
            print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            return []

        servers = self.connection_manager.get_proxmox_servers()
        enabled_servers = []

        if not servers:
            print("üì≠ –ù–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤")
            return []

        for server_name, server_config in servers.items():
            enabled = server_config.get('enabled', False)
            status = "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω" if enabled else "‚ùå –û—Ç–∫–ª—é—á–µ–Ω"
            name = server_config.get('name', '–ë–µ–∑ –∏–º–µ–Ω–∏')
            host = server_config.get('host', '–ù–µ —É–∫–∞–∑–∞–Ω')
            description = server_config.get('description', '')

            print(f"\nüñ•Ô∏è  {server_name}")
            print(f"   –ù–∞–∑–≤–∞–Ω–∏–µ: {name}")
            print(f"   –ê–¥—Ä–µ—Å: {host}")
            print(f"   –°—Ç–∞—Ç—É—Å: {status}")
            if description:
                print(f"   –û–ø–∏—Å–∞–Ω–∏–µ: {description}")

            if enabled:
                enabled_servers.append(server_name)

        print("\n" + "-"*60)
        return enabled_servers

    async def get_user_input(self, prompt: str, required: bool = True, default: str = "") -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤–≤–æ–¥–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        while True:
            try:
                value = input(f"{prompt}").strip()
                if not value and required and not default:
                    print("‚ùå –≠—Ç–æ –ø–æ–ª–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è")
                    continue
                if not value and default:
                    return default
                return value
            except KeyboardInterrupt:
                print("\n\n‚èπÔ∏è  –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
                return ""

    async def check_and_add_realm(self, username: str) -> str:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ realm –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Proxmox"""
        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ realms –≤ Proxmox
        common_realms = ['pam', 'pve']

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –ª–æ–≥–∏–Ω realm
        if '@' in username:
            # –õ–æ–≥–∏–Ω —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç realm, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
            return username

        # –õ–æ–≥–∏–Ω –±–µ–∑ realm, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å
        print(f"\n–í–≤–µ–¥–µ–Ω –ª–æ–≥–∏–Ω –±–µ–∑ realm: '{username}'")
        print("–í—ã–±–µ—Ä–∏—Ç–µ realm –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")

        for i, realm in enumerate(common_realms, 1):
            print(f"{i}. @{realm}")

        print("0. –í–≤–µ—Å—Ç–∏ realm –≤—Ä—É—á–Ω—É—é")

        while True:
            choice = await self.get_user_input("–í—ã–±–æ—Ä (0-2): ")

            if choice == "0":
                # –í–≤–æ–¥ realm –≤—Ä—É—á–Ω—É—é
                realm = await self.get_user_input("–í–≤–µ–¥–∏—Ç–µ realm (–Ω–∞–ø—Ä–∏–º–µ—Ä, pam): ")
                if realm:
                    return f"{username}@{realm}"
                else:
                    print("‚ùå Realm –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
                    continue

            try:
                realm_index = int(choice) - 1
                if 0 <= realm_index < len(common_realms):
                    selected_realm = common_realms[realm_index]
                    print(f"‚úÖ –í—ã–±—Ä–∞–Ω realm: @{selected_realm}")
                    return f"{username}@{selected_realm}"
                else:
                    print(f"‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –æ—Ç 0 –¥–æ {len(common_realms)}")
            except ValueError:
                print("‚ùå –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∏–ª–∏ 0 –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞")

    async def create_new_connection_interactive(self) -> Optional[Dict[str, Any]]:
        """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        print("\n" + "="*60)
        print("–°–û–ó–î–ê–ù–ò–ï –ù–û–í–û–ì–û –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø –ö PROXMOX")
        print("="*60)

        # –í–≤–æ–¥ –∏–º–µ–Ω–∏ —Å–µ—Ä–≤–µ—Ä–∞
        server_name = await self.get_user_input("–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Å–µ—Ä–≤–µ—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, main, backup): ")
        if not server_name:
            return None

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞
        if self.connection_manager.get_server_config(server_name):
            print(f"‚ùå –°–µ—Ä–≤–µ—Ä —Å –∏–º–µ–Ω–µ–º '{server_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            return None

        # –í–≤–æ–¥ –∞–¥—Ä–µ—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞
        host = await self.get_user_input("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞ Proxmox: ")
        if not host:
            return None

        # –í–≤–æ–¥ –ø–æ—Ä—Ç–∞
        port_input = await self.get_user_input("–í–≤–µ–¥–∏—Ç–µ –ø–æ—Ä—Ç (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 8006): ", required=False, default="8006")
        try:
            port = int(port_input)
            if not (1 <= port <= 65535):
                print("‚ùå –ü–æ—Ä—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 1-65535")
                return None
        except ValueError:
            print("‚ùå –ü–æ—Ä—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
            return None

        # –í–≤–æ–¥ –ª–æ–≥–∏–Ω–∞
        user = await self.get_user_input("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ")
        if not user:
            return None

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ realm –µ—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
        user = await self.check_and_add_realm(user)
        if not user:
            return None

        # –í—ã–±–æ—Ä –º–µ—Ç–æ–¥–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        print("\n–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:")
        print("1. –ü–∞—Ä–æ–ª—å")
        print("2. –¢–æ–∫–µ–Ω API")

        auth_choice = await self.get_user_input("–í—ã–±–æ—Ä (1-2): ")
        if auth_choice not in ["1", "2"]:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä –º–µ—Ç–æ–¥–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏")
            return None

        password = ""
        token_name = ""
        token_value = ""

        if auth_choice == "1":
            # –í–≤–æ–¥ –ø–∞—Ä–æ–ª—è
            print("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å (–≤–≤–æ–¥ —Å–∫—Ä—ã—Ç): ")
            try:
                password = getpass.getpass()
                if not password:
                    print("‚ùå –ü–∞—Ä–æ–ª—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
                    return None
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è: {e}")
                return None
        else:
            # –í–≤–æ–¥ —Ç–æ–∫–µ–Ω–∞
            token_name = await self.get_user_input("–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Ç–æ–∫–µ–Ω–∞: ")
            if not token_name:
                return None

            print("–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ (–≤–≤–æ–¥ —Å–∫—Ä—ã—Ç): ")
            try:
                token_value = getpass.getpass()
                if not token_value:
                    print("‚ùå –ó–Ω–∞—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
                    return None
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ —Ç–æ–∫–µ–Ω–∞: {e}")
                return None

        # –í–≤–æ–¥ –æ–ø–∏—Å–∞–Ω–∏—è
        description = await self.get_user_input("–û–ø–∏—Å–∞–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ): ", required=False)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ SSL
        ssl_choice = await self.get_user_input("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å SSL –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é? (y/n, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é n): ", required=False, default="n")
        verify_ssl = ssl_choice.lower() in ['y', 'yes', '–¥–∞', '–¥']

        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞
        server_config = {
            'name': server_name,
            'host': host,
            'port': port,
            'user': user,
            'password': password if password else "",
            'token_name': token_name if token_name else "",
            'token_value': token_value if token_value else "",
            'verify_ssl': verify_ssl,
            'description': description,
            'enabled': True
        }

        # –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        errors = self.connection_manager.validate_server_config(server_config)
        if errors:
            print("‚ùå –û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:")
            for error in errors:
                print(f"   ‚Ä¢ {error}")
            return None

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞
        if self.connection_manager.add_server(server_name, server_config):
            print(f"‚úÖ –°–µ—Ä–≤–µ—Ä '{server_name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω")
            return server_config
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞ '{server_name}'")
            return None

    async def select_server_interactive(self, available_servers: List[str]) -> Optional[str]:
        """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≤—ã–±–æ—Ä —Å–µ—Ä–≤–µ—Ä–∞ –∏–∑ —Å–ø–∏—Å–∫–∞"""
        if not available_servers:
            return None

        print(f"\n–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä—ã: {len(available_servers)}")
        for i, server_name in enumerate(available_servers, 1):
            server_config = self.connection_manager.get_server_config(server_name)
            name = server_config.get('name', '–ë–µ–∑ –∏–º–µ–Ω–∏') if server_config else '–ë–µ–∑ –∏–º–µ–Ω–∏'
            host = server_config.get('host', '–ù–µ —É–∫–∞–∑–∞–Ω') if server_config else '–ù–µ —É–∫–∞–∑–∞–Ω'
            print(f"{i}. {server_name} - {name} ({host})")

        while True:
            choice = await self.get_user_input("–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä (–Ω–æ–º–µ—Ä) –∏–ª–∏ 'n' –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ: ")

            if choice.lower() in ['n', 'new', '–Ω–æ–≤—ã–π']:
                return None  # –°–∏–≥–Ω–∞–ª –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞

            try:
                server_index = int(choice) - 1
                if 0 <= server_index < len(available_servers):
                    selected_server = available_servers[server_index]
                    server_config = self.connection_manager.get_server_config(selected_server)

                    print(f"‚úÖ –í—ã–±—Ä–∞–Ω —Å–µ—Ä–≤–µ—Ä: {selected_server}")
                    if server_config:
                        print(f"   –ù–∞–∑–≤–∞–Ω–∏–µ: {server_config.get('name', '–ë–µ–∑ –∏–º–µ–Ω–∏')}")
                        print(f"   –ê–¥—Ä–µ—Å: {server_config.get('host')}:{server_config.get('port', 8006)}")

                    return selected_server
                else:
                    print(f"‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –æ—Ç 1 –¥–æ {len(available_servers)}")
            except ValueError:
                print("‚ùå –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å–µ—Ä–≤–µ—Ä–∞ –∏–ª–∏ 'n' –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ")

    async def run_server_selection_wizard(self) -> Optional[Dict[str, Any]]:
        """–ú–∞—Å—Ç–µ—Ä –≤—ã–±–æ—Ä–∞/—Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞"""
        # –û—á–∏—â–∞–µ–º —ç–∫—Ä–∞–Ω –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        import os
        os.system('clear' if os.name != 'nt' else 'cls')

        print("üöÄ –ú–∞—Å—Ç–µ—Ä –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ Proxmox")

        while True:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤
            available_servers = await self.show_server_list()

            if available_servers:
                # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å–µ—Ä–≤–µ—Ä
                selected_server = await self.select_server_interactive(available_servers)
                if selected_server:
                    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
                    server_config = self.connection_manager.get_server_config(selected_server)
                    if server_config:
                        return server_config

            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            print("\nüìù –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...")
            new_config = await self.create_new_connection_interactive()

            if new_config:
                # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
                save_choice = await self.get_user_input("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é? (y/n): ", required=False, default="y")
                if save_choice.lower() in ['y', 'yes', '–¥–∞', '–¥']:
                    print(f"üíæ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∫–∞–∫ '{list(self.connection_manager.get_proxmox_servers().keys())[-1]}'")
                return new_config
            else:
                # –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–ª–∏ –æ—Ç–º–µ–Ω–∞
                retry_choice = await self.get_user_input("–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞? (y/n): ", required=False, default="y")
                if retry_choice.lower() not in ['y', 'yes', '–¥–∞', '–¥']:
                    print("üëã –í—ã—Ö–æ–¥ –∏–∑ –º–∞—Å—Ç–µ—Ä–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π")
                    return None
                else:
                    # –û—á–∏—â–∞–µ–º —ç–∫—Ä–∞–Ω –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
                    import os
                    os.system('clear' if os.name != 'nt' else 'cls')
                    print("üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...")

    async def run(self, config: Dict):
        """–ó–∞–ø—É—Å–∫ –≥–ª–∞–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –º–µ–Ω—é"""
        self.is_running = True

        print("üöÄ –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è —Å—Ç–µ–Ω–¥–æ–≤ –í–ú")

        try:
            while self.is_running:
                await self.show_main_menu()
                choice = await self.get_user_choice()

                if not await self.handle_menu_choice(choice, config):
                    break

        except KeyboardInterrupt:
            print("\n\n–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è. –í—ã—Ö–æ–¥...")

        finally:
            self.is_running = False
            print("üëã –°–∏—Å—Ç–µ–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")


async def run_menu(config: Dict):
    """–§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –º–µ–Ω—é –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –≤ main.py"""
    menu = DeployStandMenu()

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Proxmox –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –º–µ–Ω—é
    print("üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Proxmox —Å–µ—Ä–≤–µ—Ä—É...")
    if await menu.initialize_proxmox_connection(config):
        print("‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Proxmox")
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Proxmox")
        print("–ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±—É–¥—É—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")

    # –ó–∞–ø—É—Å–∫–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await menu.run(config)
