#!/usr/bin/env python3
"""
–ú–æ–¥—É–ª—å –º–µ–Ω—é —Å–∏—Å—Ç–µ–º—ã —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è —Å—Ç–µ–Ω–¥–æ–≤ –í–ú
–û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –≤ main.py - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –º–æ–¥—É–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
"""

import asyncio
import logging
from typing import Dict, List, Optional, Any
from proxmoxer import ProxmoxAPI

from modules.menu.base_menu import BaseMenu
from modules.menu.user_management import get_user_management_menu
from modules.menu.server_management import get_server_management_menu
from modules.connection_manager import get_connection_manager
from modules.proxmox_client import create_proxmox_client
from modules.user_list_manager import get_user_list_manager
from modules.stand_configure import get_stand_configurer, StandConfigMenu

logger = logging.getLogger(__name__)


class DeployStandMenu(BaseMenu):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å–∏—Å—Ç–µ–º—ã —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è —Å—Ç–µ–Ω–¥–æ–≤"""

    def __init__(self):
        super().__init__()
        self.proxmox: Optional[ProxmoxAPI] = None
        self.is_running = False
        self.connection_manager = get_connection_manager()
        self.user_list_manager = get_user_list_manager()

    async def initialize_proxmox_connection(self, config: Dict) -> bool:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Proxmox API"""
        try:
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç Proxmox
            client = create_proxmox_client(config)

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            if not client.connect():
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Proxmox API")
                return False

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª–∏–µ–Ω—Ç –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            self.proxmox = client

            logger.info(f"–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Proxmox —á–µ—Ä–µ–∑ –∫–ª–∏–µ–Ω—Ç")
            return True

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Proxmox: {e}")
            return False

    async def show_menu(self):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
        self.clear_screen()

        print("\n" + "="*50)
        print("DEPLOY STAND - –°–∏—Å—Ç–µ–º–∞ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è —Å—Ç–µ–Ω–¥–æ–≤ –í–ú")
        print("="*50)
        print("1. –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏")
        print("2. –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å—Ç–µ–Ω–¥–∞")
        print("3. –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö –º–∞—à–∏–Ω")
        print("4. –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Å—Ç–µ–Ω–¥")
        print("5. –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞–º–∏")
        print("6. –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        print("7. –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è–º–∏ –∫ —Å–µ—Ä–≤–µ—Ä–∞–º")
        print("0. –í—ã—Ö–æ–¥")
        print("-"*50)

    async def handle_choice(self, choice: str) -> bool:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if choice == "0":
            print("–í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã...")
            return False

        elif choice == "1":
            await self.manage_users()
        elif choice == "2":
            await self.manage_stand_config()
        elif choice == "3":
            await self.show_vm_list()
        elif choice == "4":
            await self.create_stand()
        elif choice == "5":
            await self.manage_templates()
        elif choice == "6":
            await self.show_settings()
        elif choice == "7":
            await self.manage_server_connections()
        else:
            print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

        return True

    async def show_vm_list(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö –º–∞—à–∏–Ω"""
        self.clear_screen()

        if not self.proxmox:
            print("‚ùå –ö–ª–∏–µ–Ω—Ç Proxmox –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            print("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É Proxmox")
            return

        if not self.proxmox.is_connected():
            print("‚ùå –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ Proxmox —Å–µ—Ä–≤–µ—Ä—É")
            print("–°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å –∫ —Å–µ—Ä–≤–µ—Ä—É —á–µ—Ä–µ–∑ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è–º–∏")
            return

        try:
            print("\nüìã –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö –º–∞—à–∏–Ω...")

            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É–∑–ª–æ–≤ —á–µ—Ä–µ–∑ –∫–ª–∏–µ–Ω—Ç
            nodes = self.proxmox.get_nodes()
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —É–∑–ª–æ–≤: {len(nodes)}")

            if not nodes:
                print("‚ö†Ô∏è  –ù–∞ —Å–µ—Ä–≤–µ—Ä–µ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É–∑–ª–æ–≤")
                await self.show_message("", pause=True)
                return

            total_vms = 0
            for node in nodes:
                node_name = node.get('node')
                print(f"\nüìÅ –£–∑–µ–ª: {node_name}")

                try:
                    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –í–ú –Ω–∞ —É–∑–ª–µ —á–µ—Ä–µ–∑ –∫–ª–∏–µ–Ω—Ç
                    vms = self.proxmox.get_vms(node_name)
                    node_vm_count = len(vms)

                    if node_vm_count == 0:
                        print("  üì≠ –ù–µ—Ç –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö –º–∞—à–∏–Ω")
                    else:
                        print(f"  üñ•Ô∏è  –í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ –º–∞—à–∏–Ω—ã ({node_vm_count}):")
                        for vm in vms:
                            vmid = vm.get('vmid')
                            name = vm.get('name', '–ë–µ–∑ –∏–º–µ–Ω–∏')
                            status = vm.get('status', 'unknown')
                            print(f"    ‚Ä¢ VM {vmid}: {name} - {status}")
                            total_vms += 1

                except Exception as node_error:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –í–ú –¥–ª—è —É–∑–ª–∞ {node_name}: {node_error}")
                    print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —É–∑–ª–∞ {node_name}")

            print(f"\nüìä –í—Å–µ–≥–æ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö –º–∞—à–∏–Ω: {total_vms}")
            await self.show_message("", pause=True)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –í–ú: {e}")
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö –º–∞—à–∏–Ω: {e}")
            print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É Proxmox")
            await self.show_message("", pause=True)

    async def create_stand(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å—Ç–µ–Ω–¥–∞"""
        self.clear_screen()
        print("\n–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å—Ç–µ–Ω–¥–∞...")
        print("‚ö†Ô∏è  –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
        await self.show_message("", pause=True)

    async def manage_templates(self):
        """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞–º–∏"""
        self.clear_screen()
        print("\n–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞–º–∏...")
        print("‚ö†Ô∏è  –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
        await self.show_message("", pause=True)

    async def show_settings(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        self.clear_screen()
        print("\n–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã:")
        print("‚ö†Ô∏è  –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
        await self.show_message("", pause=True)

    async def manage_users(self):
        """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        user_menu = get_user_management_menu()
        await user_menu.run()

    async def manage_stand_config(self):
        """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è–º–∏ —Å—Ç–µ–Ω–¥–æ–≤"""
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–µ—Ä —Å—Ç–µ–Ω–¥–æ–≤
        configurer = get_stand_configurer()

        # –ü–µ—Ä–µ–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç Proxmox –µ—Å–ª–∏ –æ–Ω –¥–æ—Å—Ç—É–ø–µ–Ω
        if self.proxmox and self.proxmox.is_connected():
            configurer.set_proxmox_client(self.proxmox)

        # –°–æ–∑–¥–∞–µ–º –º–µ–Ω—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–æ–≤–∞–Ω–∏—è
        config_menu = StandConfigMenu(configurer)

        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–µ–Ω—é
        await config_menu.run()

    async def manage_server_connections(self):
        """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è–º–∏ –∫ —Å–µ—Ä–≤–µ—Ä–∞–º Proxmox"""
        server_menu = get_server_management_menu()
        await server_menu.run()

    async def run_server_selection_wizard(self) -> Optional[Dict[str, Any]]:
        """–ú–∞—Å—Ç–µ—Ä –≤—ã–±–æ—Ä–∞/—Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞"""
        server_menu = get_server_management_menu()

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤
        available_servers = await server_menu.show_server_list()

        if available_servers:
            # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å–µ—Ä–≤–µ—Ä
            selected_server = await server_menu.select_server_interactive(available_servers)
            if selected_server:
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
                server_config = self.connection_manager.get_server_config(selected_server)
                if server_config:
                    return server_config

        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        print("\nüìù –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...")
        new_config = await server_menu.create_new_connection_interactive()

        if new_config:
            # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            save_choice = await self.get_user_input("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é? (y/n): ", required=False, default="y")
            if save_choice.lower() in ['y', 'yes', '–¥–∞', '–¥']:
                print(f"üíæ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∫–∞–∫ '{list(self.connection_manager.get_proxmox_servers().keys())[-1]}'")
            return new_config
        else:
            # –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–ª–∏ –æ—Ç–º–µ–Ω–∞
            retry_choice = await self.get_user_input("–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞? (y/n): ", required=False, default="y")
            if retry_choice.lower() not in ['y', 'yes', '–¥–∞', '–¥']:
                print("üëã –í—ã—Ö–æ–¥ –∏–∑ –º–∞—Å—Ç–µ—Ä–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π")
                return None
            else:
                self.clear_screen()
                print("üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...")
                return await self.run_server_selection_wizard()

    async def run(self, config: Dict):
        """–ó–∞–ø—É—Å–∫ –≥–ª–∞–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –º–µ–Ω—é"""
        self.is_running = True

        print("üöÄ –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è —Å—Ç–µ–Ω–¥–æ–≤ –í–ú")

        try:
            while self.is_running:
                await self.show_menu()
                choice = await self.get_user_input("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ")

                if not await self.handle_choice(choice):
                    break

        except KeyboardInterrupt:
            print("\n\n–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è. –í—ã—Ö–æ–¥...")

        finally:
            self.is_running = False
            print("üëã –°–∏—Å—Ç–µ–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")


async def run_menu(config: Dict):
    """–§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –º–µ–Ω—é –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –≤ main.py"""
    menu = DeployStandMenu()
    await menu.run(config)
