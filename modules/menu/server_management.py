#!/usr/bin/env python3
"""
–ú–æ–¥—É–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞–º–∏ Proxmox
–û—Ç–¥–µ–ª—å–Ω—ã–π –º–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è–º–∏ –∫ —Å–µ—Ä–≤–µ—Ä–∞–º
"""

import asyncio
import logging
import getpass
from typing import Dict, List, Optional, Any
from .base_menu import BaseMenu
from ..connection_manager import get_connection_manager

logger = logging.getLogger(__name__)


class ServerManagementMenu(BaseMenu):
    """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è–º–∏ –∫ —Å–µ—Ä–≤–µ—Ä–∞–º Proxmox"""

    def __init__(self):
        super().__init__()
        self.connection_manager = get_connection_manager()

    async def show_menu(self):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞–º–∏"""
        self.clear_screen()

        print("\n" + "="*60)
        print("–£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø–ú–ò –ö –°–ï–†–í–ï–†–ê–ú PROXMOX")
        print("="*60)
        print("1. –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ")
        print("2. –£–¥–∞–ª–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ")
        print("3. –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π")
        print("0. –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        print("-"*60)

    async def handle_choice(self, choice: str) -> bool:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if choice == "0":
            print("–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...")
            return False

        elif choice == "1":
            await self.create_server_connection()
        elif choice == "2":
            await self.delete_server_connection()
        elif choice == "3":
            await self.show_server_list()
            await self.show_message("", pause=True)
        else:
            print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

        return True

    async def create_server_connection(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É"""
        self.clear_screen()

        print("\nüìù –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É Proxmox")
        new_config = await self.create_new_connection_interactive()

        if new_config:
            print(f"üíæ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ '{new_config.get('name')}' —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é")
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ")

    async def delete_server_connection(self):
        """–£–¥–∞–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        self.clear_screen()

        print("\nüóëÔ∏è  –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤
        servers = self.connection_manager.get_proxmox_servers()
        if not servers:
            print("‚ùå –ù–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            return

        print("\n–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
        for i, (server_name, server_config) in enumerate(servers.items(), 1):
            name = server_config.get('name', '–ë–µ–∑ –∏–º–µ–Ω–∏')
            host = server_config.get('host', '–ù–µ —É–∫–∞–∑–∞–Ω')
            print(f"{i}. {server_name} - {name} ({host})")

        while True:
            choice = await self.get_user_input("–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (–Ω–æ–º–µ—Ä) –∏–ª–∏ 0 –¥–ª—è –æ—Ç–º–µ–Ω—ã: ")

            if choice == "0":
                print("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
                await self.show_menu()
                return

            try:
                server_index = int(choice) - 1
                if 0 <= server_index < len(servers):
                    server_names = list(servers.keys())
                    server_to_delete = server_names[server_index]
                    server_config = servers[server_to_delete]

                    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
                    confirm = await self.get_user_input(
                        f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–µ—Ä–≤–µ—Ä '{server_to_delete}'? (y/n): ",
                        required=False, default="n"
                    )

                    if confirm.lower() in ['y', 'yes', '–¥–∞', '–¥']:
                        if self.connection_manager.remove_server(server_to_delete):
                            print(f"‚úÖ –°–µ—Ä–≤–µ—Ä '{server_to_delete}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω")
                        else:
                            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞ '{server_to_delete}'")
                    else:
                        print("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")

                    await self.show_menu()
                    return
                else:
                    print(f"‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –æ—Ç 1 –¥–æ {len(servers)}")
            except ValueError:
                print("‚ùå –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å–µ—Ä–≤–µ—Ä–∞ –∏–ª–∏ 0 –¥–ª—è –æ—Ç–º–µ–Ω—ã")

    async def show_server_list(self) -> List[str]:
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤"""
        print("\n" + "="*60)
        print("–î–û–°–¢–£–ü–ù–´–ï –°–ï–†–í–ï–†–´ PROXMOX")
        print("="*60)

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        if not self.connection_manager.load_config():
            print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            return []

        servers = self.connection_manager.get_proxmox_servers()
        enabled_servers = []

        if not servers:
            print("üì≠ –ù–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤")
            return []

        for server_name, server_config in servers.items():
            enabled = server_config.get('enabled', False)
            status = "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω" if enabled else "‚ùå –û—Ç–∫–ª—é—á–µ–Ω"
            name = server_config.get('name', '–ë–µ–∑ –∏–º–µ–Ω–∏')
            host = server_config.get('host', '–ù–µ —É–∫–∞–∑–∞–Ω')
            description = server_config.get('description', '')

            print(f"\nüñ•Ô∏è  {server_name}")
            print(f"   –ù–∞–∑–≤–∞–Ω–∏–µ: {name}")
            print(f"   –ê–¥—Ä–µ—Å: {host}")
            print(f"   –°—Ç–∞—Ç—É—Å: {status}")
            if description:
                print(f"   –û–ø–∏—Å–∞–Ω–∏–µ: {description}")

            if enabled:
                enabled_servers.append(server_name)

        print("\n" + "-"*60)
        return enabled_servers

    async def check_and_add_realm(self, username: str) -> str:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ realm –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Proxmox"""
        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ realms –≤ Proxmox
        common_realms = ['pam', 'pve']

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –ª–æ–≥–∏–Ω realm
        if '@' in username:
            # –õ–æ–≥–∏–Ω —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç realm, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
            return username

        # –õ–æ–≥–∏–Ω –±–µ–∑ realm, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å
        print(f"\n–í–≤–µ–¥–µ–Ω –ª–æ–≥–∏–Ω –±–µ–∑ realm: '{username}'")
        print("–í—ã–±–µ—Ä–∏—Ç–µ realm –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")

        for i, realm in enumerate(common_realms, 1):
            print(f"{i}. @{realm}")

        print("0. –í–≤–µ—Å—Ç–∏ realm –≤—Ä—É—á–Ω—É—é")

        while True:
            choice = await self.get_user_input("–í—ã–±–æ—Ä (0-2): ")

            if choice == "0":
                # –í–≤–æ–¥ realm –≤—Ä—É—á–Ω—É—é
                realm = await self.get_user_input("–í–≤–µ–¥–∏—Ç–µ realm (–Ω–∞–ø—Ä–∏–º–µ—Ä, pam): ")
                if realm:
                    return f"{username}@{realm}"
                else:
                    print("‚ùå Realm –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
                    continue

            try:
                realm_index = int(choice) - 1
                if 0 <= realm_index < len(common_realms):
                    selected_realm = common_realms[realm_index]
                    print(f"‚úÖ –í—ã–±—Ä–∞–Ω realm: @{selected_realm}")
                    return f"{username}@{selected_realm}"
                else:
                    print(f"‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –æ—Ç 0 –¥–æ {len(common_realms)}")
            except ValueError:
                print("‚ùå –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∏–ª–∏ 0 –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞")

    async def create_new_connection_interactive(self) -> Optional[Dict[str, Any]]:
        """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        print("\n" + "="*60)
        print("–°–û–ó–î–ê–ù–ò–ï –ù–û–í–û–ì–û –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø –ö PROXMOX")
        print("="*60)

        # –í–≤–æ–¥ –∏–º–µ–Ω–∏ —Å–µ—Ä–≤–µ—Ä–∞
        server_name = await self.get_user_input("–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Å–µ—Ä–≤–µ—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, main, backup): ")
        if not server_name:
            return None

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞
        if self.connection_manager.get_server_config(server_name):
            print(f"‚ùå –°–µ—Ä–≤–µ—Ä —Å –∏–º–µ–Ω–µ–º '{server_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            return None

        # –í–≤–æ–¥ –∞–¥—Ä–µ—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞
        host = await self.get_user_input("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞ Proxmox: ")
        if not host:
            return None

        # –í–≤–æ–¥ –ø–æ—Ä—Ç–∞
        port_input = await self.get_user_input("–í–≤–µ–¥–∏—Ç–µ –ø–æ—Ä—Ç (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 8006): ", required=False, default="8006")
        try:
            port = int(port_input)
            if not (1 <= port <= 65535):
                print("‚ùå –ü–æ—Ä—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 1-65535")
                return None
        except ValueError:
            print("‚ùå –ü–æ—Ä—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
            return None

        # –í–≤–æ–¥ –ª–æ–≥–∏–Ω–∞
        user = await self.get_user_input("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ")
        if not user:
            return None

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ realm –µ—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
        user = await self.check_and_add_realm(user)
        if not user:
            return None

        # –í—ã–±–æ—Ä –º–µ—Ç–æ–¥–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        print("\n–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:")
        print("1. –ü–∞—Ä–æ–ª—å")
        print("2. –¢–æ–∫–µ–Ω API")

        auth_choice = await self.get_user_input("–í—ã–±–æ—Ä (1-2): ")
        if auth_choice not in ["1", "2"]:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä –º–µ—Ç–æ–¥–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏")
            return None

        password = ""
        token_name = ""
        token_value = ""

        if auth_choice == "1":
            # –í–≤–æ–¥ –ø–∞—Ä–æ–ª—è
            print("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å (–≤–≤–æ–¥ —Å–∫—Ä—ã—Ç): ")
            try:
                password = getpass.getpass()
                if not password:
                    print("‚ùå –ü–∞—Ä–æ–ª—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
                    return None
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è: {e}")
                return None
        else:
            # –í–≤–æ–¥ —Ç–æ–∫–µ–Ω–∞
            token_name = await self.get_user_input("–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Ç–æ–∫–µ–Ω–∞: ")
            if not token_name:
                return None

            print("–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ (–≤–≤–æ–¥ —Å–∫—Ä—ã—Ç): ")
            try:
                token_value = getpass.getpass()
                if not token_value:
                    print("‚ùå –ó–Ω–∞—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
                    return None
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ —Ç–æ–∫–µ–Ω–∞: {e}")
                return None

        # –í–≤–æ–¥ –æ–ø–∏—Å–∞–Ω–∏—è
        description = await self.get_user_input("–û–ø–∏—Å–∞–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ): ", required=False)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ SSL
        ssl_choice = await self.get_user_input("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å SSL –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é? (y/n, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é n): ", required=False, default="n")
        verify_ssl = ssl_choice.lower() in ['y', 'yes', '–¥–∞', '–¥']

        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞
        server_config = {
            'name': server_name,
            'host': host,
            'port': port,
            'user': user,
            'password': password if password else "",
            'token_name': token_name if token_name else "",
            'token_value': token_value if token_value else "",
            'verify_ssl': verify_ssl,
            'description': description,
            'enabled': True
        }

        # –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        errors = self.connection_manager.validate_server_config(server_config)
        if errors:
            print("‚ùå –û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:")
            for error in errors:
                print(f"   ‚Ä¢ {error}")
            return None

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞
        if self.connection_manager.add_server(server_name, server_config):
            print(f"‚úÖ –°–µ—Ä–≤–µ—Ä '{server_name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω")
            return server_config
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞ '{server_name}'")
            return None

    async def select_server_interactive(self, available_servers: List[str]) -> Optional[str]:
        """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≤—ã–±–æ—Ä —Å–µ—Ä–≤–µ—Ä–∞ –∏–∑ —Å–ø–∏—Å–∫–∞"""
        if not available_servers:
            return None

        print(f"\n–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä—ã: {len(available_servers)}")
        for i, server_name in enumerate(available_servers, 1):
            server_config = self.connection_manager.get_server_config(server_name)
            name = server_config.get('name', '–ë–µ–∑ –∏–º–µ–Ω–∏') if server_config else '–ë–µ–∑ –∏–º–µ–Ω–∏'
            host = server_config.get('host', '–ù–µ —É–∫–∞–∑–∞–Ω') if server_config else '–ù–µ —É–∫–∞–∑–∞–Ω'
            print(f"{i}. {server_name} - {name} ({host})")

        while True:
            choice = await self.get_user_input("–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä (–Ω–æ–º–µ—Ä) –∏–ª–∏ 'n' –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ: ")

            if choice.lower() in ['n', 'new', '–Ω–æ–≤—ã–π']:
                return None  # –°–∏–≥–Ω–∞–ª –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞

            try:
                server_index = int(choice) - 1
                if 0 <= server_index < len(available_servers):
                    selected_server = available_servers[server_index]
                    server_config = self.connection_manager.get_server_config(selected_server)

                    print(f"‚úÖ –í—ã–±—Ä–∞–Ω —Å–µ—Ä–≤–µ—Ä: {selected_server}")
                    if server_config:
                        print(f"   –ù–∞–∑–≤–∞–Ω–∏–µ: {server_config.get('name', '–ë–µ–∑ –∏–º–µ–Ω–∏')}")
                        print(f"   –ê–¥—Ä–µ—Å: {server_config.get('host')}:{server_config.get('port', 8006)}")

                    return selected_server
                else:
                    print(f"‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –æ—Ç 1 –¥–æ {len(available_servers)}")
            except ValueError:
                print("‚ùå –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å–µ—Ä–≤–µ—Ä–∞ –∏–ª–∏ 'n' –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ")


def get_server_management_menu() -> ServerManagementMenu:
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞–º–∏"""
    return ServerManagementMenu()
