#!/usr/bin/env python3
"""
–ú–æ–¥—É–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
–û—Ç–¥–µ–ª—å–Ω—ã–π –º–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å–ø–∏—Å–∫–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
"""

import asyncio
import logging
from typing import Dict, List, Optional, Any
from pathlib import Path
from .base_menu import BaseMenu
from ..user_list_manager import get_user_list_manager

logger = logging.getLogger(__name__)


class UserManagementMenu(BaseMenu):
    """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""

    def __init__(self):
        super().__init__()
        self.user_list_manager = get_user_list_manager()

    async def show_menu(self):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
        self.clear_screen()

        print("\n" + "="*50)
        print("–£–ü–†–ê–í–õ–ï–ù–ò–ï –°–ü–ò–°–ö–ê–ú–ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô")
        print("="*50)
        print("1. –í–≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)")
        print("2. –ò–º–ø–æ—Ä—Ç –∏–∑ —Å–ø–∏—Å–∫–∞")
        print("3. –í—ã–≤–µ—Å—Ç–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–ø–∏—Å–∫–∏")
        print("4. –£–¥–∞–ª–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        print("0. –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        print("-"*50)

    async def handle_choice(self, choice: str) -> bool:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if choice == "0":
            print("–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...")
            return False

        elif choice == "1":
            await self.create_user_list_interactive()
        elif choice == "2":
            await self.import_user_list_interactive()
        elif choice == "3":
            await self.show_user_lists()
            await self.show_message("", pause=True)
        elif choice == "4":
            await self.delete_user_list_interactive()
        else:
            print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

        return True

    async def create_user_list_interactive(self):
        """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        self.clear_screen()

        print("\nüìù –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        print("–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: user1, user2, user3)")
        print("–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∫–∞–∑–∞–Ω –±–µ–∑ @pve, –æ–Ω –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")

        # –í–≤–æ–¥ –∏–º–µ–Ω–∏ —Å–ø–∏—Å–∫–∞
        list_name = await self.get_user_input("–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ")
        if not list_name:
            return

        # –í–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users_input = await self.get_user_input("–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é: ")
        if not users_input:
            print("‚ùå –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
            return

        # –ü–∞—Ä—Å–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users = self.user_list_manager.parse_user_input(users_input)
        if not users:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            return

        # –í–≤–æ–¥ –æ–ø–∏—Å–∞–Ω–∏—è
        description = await self.get_user_input("–û–ø–∏—Å–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ): ", required=False)

        # –°–æ–∑–¥–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞
        if self.user_list_manager.create_user_list(list_name, users, description):
            print(f"‚úÖ –°–ø–∏—Å–æ–∫ '{list_name}' —Å–æ–∑–¥–∞–Ω —Å {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–ø–∏—Å–∫–∞ '{list_name}'")
            return

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –º–µ–Ω—é
        await self.show_menu()

    async def import_user_list_interactive(self):
        """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –∏–º–ø–æ—Ä—Ç —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        self.clear_screen()

        print("\nüì• –ò–º–ø–æ—Ä—Ç —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞")
        print("–§–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–ø–æ –æ–¥–Ω–æ–º—É –Ω–∞ —Å—Ç—Ä–æ–∫—É)")
        print("–°—Ç—Ä–æ–∫–∏ –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å # —Å—á–∏—Ç–∞—é—Ç—Å—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏")
        print("–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∫–∞–∑–∞–Ω –±–µ–∑ @pve, –æ–Ω –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")

        # –í–≤–æ–¥ –∏–º–µ–Ω–∏ —Å–ø–∏—Å–∫–∞
        list_name = await self.get_user_input("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –Ω–æ–≤–æ–≥–æ —Å–ø–∏—Å–∫–∞: ")
        if not list_name:
            return

        # –í–≤–æ–¥ –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª—É
        file_path = await self.get_user_input("–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å–æ —Å–ø–∏—Å–∫–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ")
        if not file_path:
            print("‚ùå –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
        if not Path(file_path).exists():
            print(f"‚ùå –§–∞–π–ª '{file_path}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        # –í–≤–æ–¥ –æ–ø–∏—Å–∞–Ω–∏—è
        description = await self.get_user_input("–û–ø–∏—Å–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ): ", required=False)

        # –ò–º–ø–æ—Ä—Ç —Å–ø–∏—Å–∫–∞ –∏–∑ —Ñ–∞–π–ª–∞
        if self.user_list_manager.import_user_list_from_file(list_name, file_path, description):
            print(f"‚úÖ –°–ø–∏—Å–æ–∫ '{list_name}' –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –∏–∑ —Ñ–∞–π–ª–∞ '{file_path}'")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ —Å–ø–∏—Å–∫–∞ '{list_name}' –∏–∑ —Ñ–∞–π–ª–∞ '{file_path}'")

    async def show_user_lists(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Å–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        self.clear_screen()

        print("\nüìã –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:")

        user_lists = self.user_list_manager.get_user_lists()

        if not user_lists:
            print("üì≠ –ù–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Å–ø–∏—Å–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            return

        for list_name, list_data in user_lists.items():
            print(f"\nüìÅ {list_name}")
            print(f"   –û–ø–∏—Å–∞–Ω–∏–µ: {list_data.get('description', '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è')}")
            print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {list_data.get('count', 0)}")

            users = list_data.get('users', [])
            if users:
                print("   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:")
                for i, user in enumerate(users[:5], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã—Ö 5
                    print(f"     {i}. {user}")
                if len(users) > 5:
                    print(f"     ... –∏ –µ—â–µ {len(users) - 5} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")

    async def delete_user_list_interactive(self):
        """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        self.clear_screen()

        print("\nüóëÔ∏è  –£–¥–∞–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ø–∏—Å–∫–∏
        list_names = self.user_list_manager.get_user_list_names()
        if not list_names:
            print("‚ùå –ù–µ—Ç —Å–ø–∏—Å–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            return

        print("\n–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:")
        for i, list_name in enumerate(list_names, 1):
            print(f"{i}. {list_name}")

        while True:
            choice = await self.get_user_input("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (–Ω–æ–º–µ—Ä) –∏–ª–∏ 0 –¥–ª—è –æ—Ç–º–µ–Ω—ã: ")

            if choice == "0":
                print("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
                await self.show_menu()
                return

            try:
                list_index = int(choice) - 1
                if 0 <= list_index < len(list_names):
                    list_to_delete = list_names[list_index]

                    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
                    confirm = await self.get_user_input(
                        f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–ø–∏—Å–æ–∫ '{list_to_delete}'? (y/n): ",
                        required=False, default="n"
                    )

                    if confirm.lower() in ['y', 'yes', '–¥–∞', '–¥']:
                        if self.user_list_manager.delete_user_list(list_to_delete):
                            print(f"‚úÖ –°–ø–∏—Å–æ–∫ '{list_to_delete}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω")
                        else:
                            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ '{list_to_delete}'")
                    else:
                        print("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")

                    await self.show_menu()
                    return
                else:
                    print(f"‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –æ—Ç 1 –¥–æ {len(list_names)}")
            except ValueError:
                print("‚ùå –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å–ø–∏—Å–∫–∞ –∏–ª–∏ 0 –¥–ª—è –æ—Ç–º–µ–Ω—ã")


def get_user_management_menu() -> UserManagementMenu:
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
    return UserManagementMenu()
