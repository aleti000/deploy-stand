#!/usr/bin/env python3
"""
–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è–º–∏
–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è–º–∏ –∫ Proxmox –∫–ª–∞—Å—Ç–µ—Ä–∞–º
"""

from ..utils import Logger, ConfigValidator
import os
import yaml as yaml_module
from typing import Dict, List, Any, Optional


class ConnectionsMenu:
    """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è–º–∏"""

    CONNECTIONS_DIR = "data"
    CONNECTIONS_FILE = "data/connections_config.yml"

    def __init__(self, logger_instance):
        self.logger = logger_instance
        self.validator = ConfigValidator()
        self._ensure_directories()

    def _ensure_directories(self):
        """–°–æ–∑–¥–∞—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç"""
        try:
            os.makedirs(self.CONNECTIONS_DIR, exist_ok=True)
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {e}")

    def show(self) -> str:
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è–º–∏"""
        print("\nüîå –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è–º–∏")
        print("=" * 50)

        # –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        saved_connections = self._get_saved_connections()

        if saved_connections:
            print("üìã –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:")
            for i, conn in enumerate(saved_connections, 1):
                name = conn.get('name', '–±–µ–∑ –∏–º–µ–Ω–∏')
                host = conn.get('host', '–Ω–µ —É–∫–∞–∑–∞–Ω')
                print(f"  [{i}] {name} - {host}")
            print()

        print("–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:")
        print("  [1] –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ")
        print("  [2] –í—ã–±—Ä–∞—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ")
        print("  [3] –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
        print("  [4] –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ")
        print("  [5] –£–¥–∞–ª–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ")
        print("  [0] –ù–∞–∑–∞–¥")

        choice = input("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ").strip()

        if choice == "1":
            result = self._create_connection()
            return result
        elif choice == "2":
            result = self._select_active_connection(saved_connections)
            return result
        elif choice == "3":
            result = self._show_connections(saved_connections)
            return result
        elif choice == "4":
            result = self._test_connection()
            return result
        elif choice == "5":
            result = self._delete_connection(saved_connections)
            return result
        elif choice == "0":
            return "back"
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!")
            return "repeat"

    def _get_saved_connections(self) -> list:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π"""
        try:
            connections_data = self._load_yaml_file(self.CONNECTIONS_FILE) or {}
            # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º –∏ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª–µ 'name'
            connections = []
            for name, config in connections_data.items():
                config['name'] = name
                connections.append(config)
            return connections
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π: {e}")
            return []

    def _create_connection(self) -> str:
        """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Proxmox API"""
        print("\n‚ûï –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Proxmox")
        print("-" * 40)

        try:
            # –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Proxmox API
            name = input("–ò–º—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ").strip()
            host = input("–ê–¥—Ä–µ—Å Proxmox —Å–µ—Ä–≤–µ—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 192.168.1.100): ").strip()
            port = input("API –ø–æ—Ä—Ç (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 8006): ").strip() or "8006"
            username = input("–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è API (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, root@pam): ").strip() or "root@pam"
            password = input("–ü–∞—Ä–æ–ª—å API –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ").strip()

            # –í–∞–ª–∏–¥–∞—Ü–∏—è
            if not all([name, host, username, password]):
                print("‚ùå –í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Proxmox API!")
                return "repeat"

            # –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ URL –¥–ª—è API
            api_host = f"{host}:{port}"

            # –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            new_connection = {
                'name': name,
                'host': api_host,
                'username': username,
                'password': password
            }

            # TODO: –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤ persistent storage

            # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Proxmox API...")
            from ..utils import ProxmoxClient
            client = ProxmoxClient(api_host, username, password)
            if client.connect():
                nodes = client.get_nodes()
                print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ! –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –Ω–æ–¥:")
                print(f"   {', '.join(nodes) if nodes else '–Ω–æ–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã'}")

                # –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
                save_confirm = input("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —ç—Ç—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è? (Y/n): ").strip().lower()
                if save_confirm in ['', 'y', 'yes']:
                    # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–¥–æ–±–Ω–æ create_connection_config –∏–∑ —Å—Ç–∞—Ä–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
                    try:
                        connections = self._load_yaml_file(self.CONNECTIONS_FILE) or {}

                        connection_config = {
                            'host': api_host,
                            'user': username,
                            'password': password,
                            'use_token': False  # –ü–æ–∫–∞ —Ç–æ–ª—å–∫–æ –ø–∞—Ä–æ–ª—å–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
                        }

                        connections[name] = connection_config

                        success = self._save_yaml_file(self.CONNECTIONS_FILE, connections)
                        if success:
                            print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
                        else:
                            print("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
                    except Exception as e:
                        self.logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
                        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
                else:
                    print("‚ÑπÔ∏è  –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")

                return "success"
            else:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Proxmox API")
                return "error"

        except ValueError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")
            return "error"
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            return "error"

    def _select_active_connection(self, connections: list) -> str:
        """–í—ã–±—Ä–∞—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ"""
        if not connections:
            print("‚ùå –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π")
            return "repeat"

        print("\nüéØ –í—ã–±–æ—Ä –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")

        try:
            choice = input(f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ (1-{len(connections)}) –∏–ª–∏ 0 –¥–ª—è –æ—Ç–º–µ–Ω—ã: ").strip()

            if choice == "0":
                return "repeat"
            elif not choice.isdigit() or int(choice) - 1 not in range(len(connections)):
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
                return "repeat"

            selected = connections[int(choice) - 1]
            # TODO: –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–∞–∫ –∞–∫—Ç–∏–≤–Ω–æ–µ
            print(f"‚úÖ –í—ã–±—Ä–∞–Ω–æ –∞–∫—Ç–∏–≤–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: {selected['name']}")
            return "success"

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            return "error"

    def _show_connections(self, connections: list) -> str:
        """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        print("\nüìã –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:")
        print("-" * 40)

        if not connections:
            print("‚ÑπÔ∏è  –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π")
        else:
            for i, conn in enumerate(connections, 1):
                print(f"{i}. {conn.get('name', f'–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ {i}')}")
                print(f"   üìç {conn.get('host', '–Ω–µ —É–∫–∞–∑–∞–Ω')}")
                print(f"   üë§ {conn.get('user', '–Ω–µ —É–∫–∞–∑–∞–Ω')}")
                print()

        input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
        return "repeat"

    def _test_connection(self) -> str:
        """–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ"""
        print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
        print("-" * 30)
        print("–§—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö")
        input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
        return "repeat"

    def _delete_connection(self, connections: list) -> str:
        """–£–¥–∞–ª–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ"""
        if not connections:
            print("‚ùå –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            return "repeat"

        print("\nüóëÔ∏è  –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")

        try:
            choice = input(f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (1-{len(connections)}) –∏–ª–∏ 0 –¥–ª—è –æ—Ç–º–µ–Ω—ã: ").strip()

            if choice == "0":
                return "repeat"
            elif not choice.isdigit() or int(choice) - 1 not in range(len(connections)):
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
                return "repeat"

            conn_to_delete = connections[int(choice) - 1]
            confirm = input(f"–£–¥–∞–ª–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ '{conn_to_delete['name']}'? (y/N): ").strip().lower()

            if confirm == 'y':
                # –£–¥–∞–ª–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏–∑ —Ñ–∞–π–ª–∞ —Ö—Ä–∞–Ω–µ–Ω–∏—è (–ø–æ–¥–æ–±–Ω–æ delete_connection_config)
                try:
                    connections_data = self._load_yaml_file(self.CONNECTIONS_FILE) or {}

                    # –ù–∞–π—Ç–∏ –∏–º—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
                    conn_name_to_delete = None
                    for name, config in connections_data.items():
                        if config.get('name') == conn_to_delete.get('name'):
                            conn_name_to_delete = name
                            break

                    if conn_name_to_delete:
                        del connections_data[conn_name_to_delete]
                        success = self._save_yaml_file(self.CONNECTIONS_FILE, connections_data)
                        if success:
                            print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ '{conn_to_delete['name']}' —É–¥–∞–ª–µ–Ω–æ")
                            return "success"
                        else:
                            print("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è")
                            return "error"
                    else:
                        print("‚ùå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
                        return "error"
                except Exception as e:
                    self.logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞: {e}")
                    print(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {e}")
                    return "error"
            else:
                print("–û—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è")
                return "repeat"
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            return "error"

    def _load_yaml_file(self, file_path: str) -> Optional[Dict[str, Any]]:
        """
        –ó–∞–≥—Ä—É–∑–∏—Ç—å YAML —Ñ–∞–π–ª

        Args:
            file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É

        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        try:
            if not os.path.exists(file_path):
                return {}

            with open(file_path, 'r', encoding='utf-8') as file:
                content = file.read()
                if not content.strip():
                    return {}

                data = yaml_module.safe_load(content)
                return data if data is not None else {}

        except yaml_module.YAMLError as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ YAML —Ñ–∞–π–ª–∞ {file_path}: {e}")
            return {}
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {file_path}: {e}")
            return {}

    def _save_yaml_file(self, file_path: str, data: Dict[str, Any]) -> bool:
        """
        –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ YAML —Ñ–∞–π–ª

        Args:
            file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
            data: –î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è

        Returns:
            True –µ—Å–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            os.makedirs(os.path.dirname(file_path), exist_ok=True)

            with open(file_path, 'w', encoding='utf-8') as file:
                yaml_module.dump(
                    data,
                    file,
                    default_flow_style=False,
                    allow_unicode=True
                )

            self.logger.info(f"–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {file_path}")
            return True

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {file_path}: {e}")
            return False
