#!/usr/bin/env python3
"""
–ú–µ–Ω—é —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–µ–Ω–¥–æ–≤
–£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–µ–Ω–¥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –æ–ø—Ü–∏—è–º–∏
"""

import logging
from typing import List, Dict, Any
from ..utils.user_manager import UserManager
from ..utils.pool_manager import PoolManager
from ..utils.vm_manager import VMManager
from ..utils.network_manager import NetworkManager
from ..utils.proxmox_client import ProxmoxClient


class DeleteStandMenu:
    """–ú–µ–Ω—é —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–µ–Ω–¥–æ–≤"""

    def __init__(self, logger_instance, proxmox_client: ProxmoxClient = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω—é —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–µ–Ω–¥–æ–≤

        Args:
            logger_instance: –≠–∫–∑–µ–º–ø–ª—è—Ä –ª–æ–≥–≥–µ—Ä–∞
            proxmox_client: –ö–ª–∏–µ–Ω—Ç Proxmox (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        """
        self.logger = logger_instance
        self.proxmox_client = proxmox_client

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä—ã –µ—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –¥–æ—Å—Ç—É–ø–µ–Ω
        if self.proxmox_client:
            self.user_manager = UserManager(self.proxmox_client)
            self.pool_manager = PoolManager(self.proxmox_client)
            self.vm_manager = VMManager(self.proxmox_client)
            self.network_manager = NetworkManager(self.proxmox_client)

    def show(self) -> str:
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–µ–Ω–¥–æ–≤"""
        print("\nüóëÔ∏è  –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–µ–Ω–¥–æ–≤")
        print("=" * 50)

        print("–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:")
        print("  [1] üóëÔ∏è  –£–¥–∞–ª–∏—Ç—å —Å—Ç–µ–Ω–¥—ã –ø–æ —Å–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        print("  [2] üóëÔ∏è  –£–¥–∞–ª–∏—Ç—å —Å—Ç–µ–Ω–¥ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        print("  [0] –ù–∞–∑–∞–¥")

        choice = input("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ").strip()

        if choice == "1":
            return self._delete_stands_by_user_list()
        elif choice == "2":
            return self._delete_single_user_stand()
        elif choice == "0":
            return "back"
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!")
            return "repeat"

    def _delete_stands_by_user_list(self) -> str:
        """–£–¥–∞–ª–∏—Ç—å —Å—Ç–µ–Ω–¥—ã –ø–æ —Å–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        try:
            print("\nüóëÔ∏è  –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–µ–Ω–¥–æ–≤ –ø–æ —Å–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            print("=" * 50)

            # –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            user_lists = self._get_user_lists()
            if not user_lists:
                print("‚ÑπÔ∏è  –ù–µ—Ç —Å–ø–∏—Å–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
                return "repeat"

            print("–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:")
            for i, user_list in enumerate(user_lists, 1):
                users_in_list = self._get_users_from_list(user_list)
                print(f"  [{i}] {user_list} ({len(users_in_list)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)")

            # –í—ã–±–æ—Ä —Å–ø–∏—Å–∫–∞
            choice = input(f"\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–∏—Å–æ–∫ (1-{len(user_lists)}) –∏–ª–∏ 0 –¥–ª—è –æ—Ç–º–µ–Ω—ã: ").strip()

            if choice == "0":
                return "repeat"

            if not choice.isdigit() or int(choice) < 1 or int(choice) > len(user_lists):
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!")
                return "repeat"

            selected_list = user_lists[int(choice) - 1]
            users_to_delete = self._get_users_from_list(selected_list)

            print(f"\nüìã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏–∑ —Å–ø–∏—Å–∫–∞ '{selected_list}':")
            for user in users_to_delete:
                print(f"  üë§ {user}")

            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            confirm = input(f"\n–£–¥–∞–ª–∏—Ç—å —Å—Ç–µ–Ω–¥—ã {len(users_to_delete)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π? (yes/no): ").strip().lower()
            if confirm != "yes":
                print("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
                return "repeat"

            # –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            success_count = 0
            for user in users_to_delete:
                print(f"\nüîÑ –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user}...")
                if self._delete_user_stand_complete(user):
                    success_count += 1
                    print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user} —É–¥–∞–ª–µ–Ω")
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user}")

            # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–µ—Ç—å
            if success_count > 0:
                print(f"\nüîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Å–µ—Ç–∏...")
                self._reload_network_after_deletion()

            print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {success_count}/{len(users_to_delete)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —É–¥–∞–ª–µ–Ω–æ")
            return "repeat"

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ —Å–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            return "repeat"

    def _get_user_lists(self) -> List[str]:
        """–ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        # –ó–∞–≥–ª—É—à–∫–∞ - –≤ –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —á—Ç–µ–Ω–∏–µ –∏–∑ —Ñ–∞–π–ª–æ–≤
        return ["test"]

    def _get_users_from_list(self, user_list: str) -> List[str]:
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Å–ø–∏—Å–∫–∞"""
        # –ó–∞–≥–ª—É—à–∫–∞ - –≤ –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —á—Ç–µ–Ω–∏–µ –∏–∑ —Ñ–∞–π–ª–æ–≤
        if user_list == "test":
            return ["user1@pve", "user2@pve", "user3@pve"]
        return []

    def _delete_single_user_stand(self) -> str:
        """–£–¥–∞–ª–∏—Ç—å —Å—Ç–µ–Ω–¥ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            print("\nüóëÔ∏è  –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–µ–Ω–¥–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            print("=" * 50)

            # –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —É –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å –ø—É–ª—ã
            users_with_pools = self._get_users_with_pools()
            if not users_with_pools:
                print("‚ÑπÔ∏è  –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø—É–ª–∞–º–∏")
                return "repeat"

            print("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –ø—É–ª–∞–º–∏:")
            for i, user in enumerate(users_with_pools, 1):
                print(f"  [{i}] {user}")

            # –í—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            choice = input(f"\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (1-{len(users_with_pools)}) –∏–ª–∏ 0 –¥–ª—è –æ—Ç–º–µ–Ω—ã: ").strip()

            if choice == "0":
                return "repeat"

            if not choice.isdigit() or int(choice) < 1 or int(choice) > len(users_with_pools):
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!")
                return "repeat"

            selected_user = users_with_pools[int(choice) - 1]
            print(f"üë§ –í—ã–±—Ä–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {selected_user}")

            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            confirm = input(f"–£–¥–∞–ª–∏—Ç—å —Å—Ç–µ–Ω–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {selected_user}? (yes/no): ").strip().lower()
            if confirm != "yes":
                print("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
                return "repeat"

            # –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if self._delete_user_stand_complete(selected_user):
                print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {selected_user} —É–¥–∞–ª–µ–Ω")
                self._reload_network_after_deletion()
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {selected_user}")

            return "repeat"

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            return "repeat"

    def _get_users_with_pools(self) -> List[str]:
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —É –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å –ø—É–ª—ã"""
        try:
            if not self.proxmox_client:
                return []

            all_users = self._get_all_users()
            users_with_pools = []

            for user in all_users:
                pool_name = self.pool_manager.extract_pool_name(user)
                if self.pool_manager.check_pool_exists(pool_name):
                    users_with_pools.append(user)

            return users_with_pools

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø—É–ª–∞–º–∏: {e}")
            return []

    def _delete_selected_stands(self) -> str:
        """–£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å—Ç–µ–Ω–¥—ã"""
        try:
            print("\nüóëÔ∏è  –£–¥–∞–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å—Ç–µ–Ω–¥–æ–≤")
            print("=" * 50)

            # –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            all_users = self._get_all_users()
            if not all_users:
                print("‚ÑπÔ∏è  –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
                return "repeat"

            print("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (–≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):")
            for i, user in enumerate(all_users, 1):
                print(f"  [{i}] {user}")

            # –í—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            choice = input(f"\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ (1-{len(all_users)}) —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é: ").strip()

            if not choice:
                print("‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ")
                return "repeat"

            try:
                selected_indices = [int(x.strip()) - 1 for x in choice.split(",")]
                selected_users = [all_users[i] for i in selected_indices if 0 <= i < len(all_users)]
            except:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞")
                return "repeat"

            if not selected_users:
                print("‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ")
                return "repeat"

            print(f"\nüë§ –í—ã–±—Ä–∞–Ω–æ {len(selected_users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:")
            for user in selected_users:
                print(f"  ‚Ä¢ {user}")

            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            confirm = input(f"–£–¥–∞–ª–∏—Ç—å {len(selected_users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π? (yes/no): ").strip().lower()
            if confirm != "yes":
                print("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
                return "repeat"

            # –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            success_count = 0
            for user in selected_users:
                if self._delete_user_stand_complete(user):
                    success_count += 1
                    print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user} —É–¥–∞–ª–µ–Ω")
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user}")

            # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–µ—Ç—å
            if success_count > 0:
                self._reload_network_after_deletion()

            print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {success_count}/{len(selected_users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —É–¥–∞–ª–µ–Ω–æ")
            return "repeat"

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            return "repeat"

    def _check_existing_stands(self) -> str:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å—Ç–µ–Ω–¥—ã"""
        try:
            print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å—Ç–µ–Ω–¥–æ–≤")
            print("=" * 50)

            # –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            all_users = self._get_all_users()
            if not all_users:
                print("‚ÑπÔ∏è  –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
                return "repeat"

            print(f"üìã –ù–∞–π–¥–µ–Ω–æ {len(all_users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:")
            for user in all_users:
                pool_name = self.pool_manager.extract_pool_name(user)
                vm_count = self.vm_manager.list_user_vms(pool_name)
                print(f"  üë§ {user} - {len(vm_count)} VM")

            return "repeat"

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–µ–Ω–¥–æ–≤: {e}")
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            return "repeat"

    def _delete_user_stand_complete(self, user: str) -> bool:
        """
        –ü–æ–ª–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–µ–Ω–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        Args:
            user: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        Returns:
            True –µ—Å–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            # 1. –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø—É–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            pool_name = self.pool_manager.extract_pool_name(user)
            self.logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user} -> –ø—É–ª {pool_name}")

            # 2. –ù–∞–π—Ç–∏ –≤—Å–µ VM –ø—É–ª–∞
            pool_vms = self.vm_manager.list_user_vms(pool_name)
            self.logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(pool_vms)} VM –≤ –ø—É–ª–µ {pool_name}")

            # 3. –ù–∞–π—Ç–∏ bridge –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ –∫ –º–∞—à–∏–Ω–∞–º –∏ —É–¥–∞–ª–∏—Ç—å –∏—Ö
            deleted_bridges = set()
            for vm_info in pool_vms:
                vmid = vm_info.get('vmid')
                node = vm_info.get('node')

                if vmid and node:
                    # –ü–æ–ª—É—á–∏—Ç—å —Å–µ—Ç–µ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é VM
                    network_info = self.network_manager.get_network_info(node, vmid)

                    # –ù–∞–π—Ç–∏ bridge'—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
                    for net_config in network_info.values():
                        # –ò–∑–≤–ª–µ—á—å –∏–º—è bridge –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–µ—Ç–∏
                        if 'bridge=' in net_config:
                            bridge_name = net_config.split('bridge=')[1].split(',')[0]
                            if bridge_name.startswith('vmbr') and bridge_name not in ['vmbr0']:
                                deleted_bridges.add((node, bridge_name))

            # –£–¥–∞–ª–∏—Ç—å –Ω–∞–π–¥–µ–Ω–Ω—ã–µ bridge'—ã
            for node, bridge_name in deleted_bridges:
                if self.network_manager.bridge_in_use(node, bridge_name):
                    self.logger.info(f"–£–¥–∞–ª—è–µ–º bridge {bridge_name} –Ω–∞ –Ω–æ–¥–µ {node}")
                    if self.network_manager.delete_bridge(node, bridge_name):
                        self.logger.info(f"‚úÖ Bridge {bridge_name} —É–¥–∞–ª–µ–Ω")
                    else:
                        self.logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å bridge {bridge_name}")

            # 4. –£–¥–∞–ª–∏—Ç—å VM –ø—É–ª–∞
            for vm_info in pool_vms:
                vmid = vm_info.get('vmid')
                node = vm_info.get('node')

                if vmid and node:
                    self.logger.info(f"–£–¥–∞–ª—è–µ–º VM {vmid} –Ω–∞ –Ω–æ–¥–µ {node}")
                    if self.vm_manager.delete_vm(node, vmid):
                        self.logger.info(f"‚úÖ VM {vmid} —É–¥–∞–ª–µ–Ω–∞")
                    else:
                        self.logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å VM {vmid}")

            # 5. –£–¥–∞–ª–∏—Ç—å –ø—É–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            self.logger.info(f"–£–¥–∞–ª—è–µ–º –ø—É–ª {pool_name}")
            if self.pool_manager.delete_pool(pool_name):
                self.logger.info(f"‚úÖ –ü—É–ª {pool_name} —É–¥–∞–ª–µ–Ω")
            else:
                self.logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø—É–ª {pool_name}")

            # 6. –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            self.logger.info(f"–£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user}")
            if self.user_manager.delete_user(user):
                self.logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user} —É–¥–∞–ª–µ–Ω")
            else:
                self.logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user}")

            return True

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user}: {e}")
            return False

    def _get_all_users(self) -> List[str]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        try:
            if not self.proxmox_client:
                return []

            users = self.proxmox_client.api.access.users.get()
            return [user.get('userid') for user in users if user.get('userid')]

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
            return []

    def _reload_network_after_deletion(self) -> None:
        """–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–µ—Ç—å –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è"""
        try:
            if not self.proxmox_client:
                return

            # –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –Ω–æ–¥—ã
            nodes = self.proxmox_client.get_nodes()

            for node in nodes:
                self.logger.info(f"–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–µ—Ç—å –Ω–∞ –Ω–æ–¥–µ {node}")
                if self.network_manager.reload_network(node):
                    self.logger.info(f"‚úÖ –°–µ—Ç—å –Ω–æ–¥—ã {node} –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω–∞")
                else:
                    self.logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–µ—Ç—å –Ω–æ–¥—ã {node}")

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Ç–∏: {e}")
