#!/usr/bin/env python3
"""
–ú–µ–Ω—é —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–µ–Ω–¥–æ–≤
–û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ —É–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–µ–Ω–¥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Ü–µ–ª–∏–∫–æ–º
"""

import os
import logging
from typing import Dict, List, Any, Optional, Tuple

from ..utils import Logger, UserManager, PoolManager, VMManager, NetworkManager, ConfigValidator, OtherUtils


class DeleteStandMenu:
    """–ú–µ–Ω—é —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–µ–Ω–¥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""

    def __init__(self, logger_instance):
        self.logger = logger_instance
        self.validator = ConfigValidator()
        self.other_utils = OtherUtils()

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ (–±—É–¥—É—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –ø—Ä–∏ –≤—ã–∑–æ–≤–µ show)
        self.user_manager = None
        self.pool_manager = None
        self.vm_manager = None
        self.network_manager = None

        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        self._user_lists_dir = "data"

    def show(self) -> str:
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–µ–Ω–¥–æ–≤"""
        print("\nüóëÔ∏è  –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–µ–Ω–¥–æ–≤")
        print("=" * 50)

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ —Å —Ç–µ–∫—É—â–∏–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º
        try:
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
            try:
                from main import get_current_proxmox_client
                proxmox_client = get_current_proxmox_client()
            except ImportError:
                # Fallback: –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
                try:
                    import sys
                    main_module = sys.modules.get('main') or sys.modules.get('__main__')
                    if hasattr(main_module, 'current_connection'):
                        # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
                        from ..utils.connection_manager import ConnectionManager
                        from ..utils.proxmox_client import ProxmoxClient
                        conn_manager = ConnectionManager()
                        connections = conn_manager.load_connections()
                        if connections:
                            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤–æ–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
                            conn_data = list(connections.values())[0]
                            proxmox_client = ProxmoxClient(
                                host=conn_data['host'],
                                user=conn_data['user'],
                                password=conn_data.get('password'),
                                token_name=conn_data.get('token_name'),
                                token_value=conn_data.get('token_value')
                            )
                        else:
                            proxmox_client = None
                    else:
                        proxmox_client = None
                except Exception:
                    proxmox_client = None

            if not proxmox_client:
                print("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Proxmox")
                return "back"

            self.user_manager = UserManager(proxmox_client)
            self.pool_manager = PoolManager(proxmox_client)
            self.vm_manager = VMManager(proxmox_client)
            self.network_manager = NetworkManager(proxmox_client)

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤: {e}")
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
            return "back"

        print("–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:")
        print("  [1] –£–¥–∞–ª–∏—Ç—å —Å—Ç–µ–Ω–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Å–ø–∏—Å–∫—É")
        print("  [2] –£–¥–∞–ª–∏—Ç—å —Å—Ç–µ–Ω–¥ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        print("  [0] –ù–∞–∑–∞–¥")

        choice = input("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ").strip()

        if choice == "1":
            result = self._delete_stands_by_list()
            return result
        elif choice == "2":
            result = self._delete_single_user_stand()
            return result
        elif choice == "0":
            return "back"
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!")
            return "repeat"

    def _delete_stands_by_list(self) -> str:
        """–£–¥–∞–ª–∏—Ç—å —Å—Ç–µ–Ω–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Å–ø–∏—Å–∫—É"""
        print("\nüìã –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–µ–Ω–¥–æ–≤ –ø–æ —Å–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        print("-" * 50)

        try:
            # –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ø–∏—Å–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            lists = self._get_user_lists()
            if not lists:
                print("‚ÑπÔ∏è  –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Å–ø–∏—Å–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
                input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
                return "repeat"

            print("–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:")
            for i, list_name in enumerate(lists, 1):
                users = self._load_user_list(list_name)
                print(f"  [{i}] {list_name} ({len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)")

            # –í—ã–±–æ—Ä —Å–ø–∏—Å–∫–∞
            while True:
                choice_input = input(f"–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–∏—Å–æ–∫ (1-{len(lists)}) –∏–ª–∏ 0 –¥–ª—è –æ—Ç–º–µ–Ω—ã: ").strip()
                if choice_input == "0":
                    return "repeat"
                try:
                    choice = int(choice_input) - 1
                    if 0 <= choice < len(lists):
                        break
                    else:
                        print(f"‚ùå –í—ã–±–µ—Ä–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ {len(lists)}")
                except ValueError:
                    print("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ!")

            list_name = lists[choice]
            users = self._load_user_list(list_name)

            # –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–≤—å—é —Å–ø–∏—Å–∫–∞
            self._show_deletion_preview(list_name, users)

            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
            confirm = input(f"\n–£–¥–∞–ª–∏—Ç—å —Å—Ç–µ–Ω–¥—ã –¥–ª—è {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Å–ø–∏—Å–∫–∞ '{list_name}'? (y/N): ").strip().lower()
            if confirm != 'y':
                print("‚ÑπÔ∏è  –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
                return "repeat"

            # –ó–∞–ø—É—Å–∫ —É–¥–∞–ª–µ–Ω–∏—è
            return self._execute_batch_deletion(users, list_name)

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–µ–Ω–¥–æ–≤ –ø–æ —Å–ø–∏—Å–∫—É: {e}")
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            return "error"

    def _delete_single_user_stand(self) -> str:
        """–£–¥–∞–ª–∏—Ç—å —Å—Ç–µ–Ω–¥ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        print("\nüë§ –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–µ–Ω–¥–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        print("-" * 50)

        try:
            # –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–∏–∑ –≤—Å–µ—Ö –ø—É–ª–æ–≤)
            all_users = self._get_all_users()

            if not all_users:
                print("‚ÑπÔ∏è  –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø—É–ª–∞–º–∏")
                input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
                return "repeat"

            print("–ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:")
            for i, user_info in enumerate(all_users, 1):
                user_name = user_info['user']
                pool_name = user_info['pool']
                vm_count = user_info['vm_count']
                print(f"  [{i}] {user_name} (–ø—É–ª: {pool_name}, VM: {vm_count})")

            # –í—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            while True:
                choice_input = input(f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (1-{len(all_users)}) –∏–ª–∏ 0 –¥–ª—è –æ—Ç–º–µ–Ω—ã: ").strip()
                if choice_input == "0":
                    return "repeat"
                try:
                    choice = int(choice_input) - 1
                    if 0 <= choice < len(all_users):
                        break
                    else:
                        print(f"‚ùå –í—ã–±–µ—Ä–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ {len(all_users)}")
                except ValueError:
                    print("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ!")

            selected_user = all_users[choice]

            # –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            self._show_user_deletion_preview(selected_user)

            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
            user_name = selected_user['user']
            confirm = input(f"\n–£–¥–∞–ª–∏—Ç—å —Å—Ç–µ–Ω–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è '{user_name}'? (y/N): ").strip().lower()
            if confirm != 'y':
                print("‚ÑπÔ∏è  –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
                return "repeat"

            # –ó–∞–ø—É—Å–∫ —É–¥–∞–ª–µ–Ω–∏—è –¥–ª—è –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            users = [user_name]
            return self._execute_batch_deletion(users, f"–æ–¥–∏–Ω–æ—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_name}")

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–µ–Ω–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            return "error"

    def _execute_batch_deletion(self, users: List[str], operation_name: str) -> str:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –ø–∞–∫–µ—Ç–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–µ–Ω–¥–æ–≤"""
        print(f"\nüöÄ –ù–∞—á–∏–Ω–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–µ–Ω–¥–æ–≤ ({operation_name})")
        print("=" * 60)

        total_users = len(users)
        successful_deletions = 0
        failed_deletions = []

        for i, user in enumerate(users, 1):
            print(f"\n[{i}/{total_users}] –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user}")
            print("-" * 40)

            try:
                if self._delete_user_stand(user):
                    successful_deletions += 1
                    print(f"‚úÖ –°—Ç–µ–Ω–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω")
                else:
                    failed_deletions.append(user)
                    print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Ç–µ–Ω–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user}")
            except Exception as e:
                failed_deletions.append(user)
                print(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–µ–Ω–¥–∞ {user}: {e}")
                self.logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–µ–Ω–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user}: {e}")

        # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        print(f"\nüìä –ò—Ç–æ–≥–∏ —É–¥–∞–ª–µ–Ω–∏—è ({operation_name}):")
        print("=" * 60)
        print(f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}")
        print(f"–£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ: {successful_deletions}")
        print(f"–û—à–∏–±–æ–∫: {len(failed_deletions)}")

        if failed_deletions:
            print("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Ç–µ–Ω–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:")
            for user in failed_deletions:
                print(f"  ‚ùå {user}")

        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
        return "success"

    def _delete_user_stand(self, user: str) -> bool:
        """
        –£–¥–∞–ª–∏—Ç—å —Å—Ç–µ–Ω–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∞–ª–≥–æ—Ä–∏—Ç–º—É:
        1. –ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø—É–ª
        2. –ù–∞–π—Ç–∏ –≤—Å–µ –º–∞—à–∏–Ω—ã –≤ —ç—Ç–æ–º –ø—É–ª–µ
        3. –ù–∞–π—Ç–∏ –≤—Å–µ —Å–µ—Ç–µ–≤—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∫ –í–ú
        4. –£–¥–∞–ª–∏—Ç—å —Å–µ—Ç–µ–≤—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã, —É–¥–∞–ª–∏—Ç—å –≤–º
        5. –ö–æ–≥–¥–∞ –≤—Å–µ —Å–µ—Ç–µ–≤—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –∏ –≤—Å–µ –≤–º —É–¥–∞–ª–µ–Ω—ã - —É–¥–∞–ª–∏—Ç—å –ø—É–ª –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        try:
            logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–µ–Ω–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user}")

            # –®–ê–ì 1: –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø—É–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            pool_name = self.pool_manager.extract_pool_name(user)
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user} –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø—É–ª—É {pool_name}")

            # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø—É–ª–∞
            if not self.pool_manager.pool_exists(pool_name):
                logger.warning(f"–ü—É–ª {pool_name} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                # –ï—Å–ª–∏ –ø—É–ª–∞ –Ω–µ—Ç, –Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - —É–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                return self._delete_user_only(user)

            # –®–ê–ì 2: –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ VM –≤ –ø—É–ª–µ
            pool_vms = self.pool_manager.get_pool_vms(pool_name)
            if not pool_vms:
                logger.info(f"–í –ø—É–ª–µ {pool_name} –Ω–µ—Ç –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö –º–∞—à–∏–Ω")
                # –ù–µ—Ç VM, —É–¥–∞–ª—è–µ–º –ø—É–ª –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                return self._delete_pool_and_user(pool_name, user)

            logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(pool_vms)} VM –≤ –ø—É–ª–µ {pool_name}")

            # –®–ê–ì 3-4: –£–¥–∞–ª–∏—Ç—å –≤—Å–µ VM –∏ –∏—Ö —Å–µ—Ç–µ–≤—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã
            deleted_vms = 0
            for vm_info in pool_vms:
                vmid = vm_info.get('vmid')
                node = vm_info.get('node')

                if vmid and node:
                    # –®–ê–ì 3: –ù–∞–π—Ç–∏ —Å–µ—Ç–µ–≤—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã VM
                    network_interfaces = self._get_vm_network_interfaces(node, vmid)

                    # –®–ê–ì 4: –£–¥–∞–ª–∏—Ç—å —Å–µ—Ç–µ–≤—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã (–≤ Proxmox —ç—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ VM)
                    # –£–¥–∞–ª—è–µ–º VM —Ü–µ–ª–∏–∫–æ–º
                    if self.vm_manager.delete_vm(node, vmid):
                        logger.info(f"VM {vmid} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user} —É–¥–∞–ª–µ–Ω–∞")
                        deleted_vms += 1

                        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏
                        task_up = False
                        try:
                            task_up = self.other_utils.wait_for_task_completion("", node, timeout=60)
                        except:
                            pass

                        if not task_up:
                            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–∂–¥–∞—Ç—å—Å—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è VM {vmid}")
                    else:
                        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å VM {vmid} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user}")
                        return False

            logger.info(f"–£–¥–∞–ª–µ–Ω–æ VM –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user}: {deleted_vms}/{len(pool_vms)}")

            # –®–ê–ì 5: –ö–æ–≥–¥–∞ –≤—Å–µ VM —É–¥–∞–ª–µ–Ω—ã - —É–¥–∞–ª–∏—Ç—å –ø—É–ª –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            return self._delete_pool_and_user(pool_name, user)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–µ–Ω–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user}: {e}")
            return False

    def _get_vm_network_interfaces(self, node: str, vmid: int) -> List[str]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–µ—Ç–µ–≤—ã—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤ VM"""
        try:
            network_info = self.network_manager.get_network_info(node, vmid)
            interfaces = [net_id for net_id in network_info.keys() if net_id.startswith('net')]
            logger.debug(f"VM {vmid} –∏–º–µ–µ—Ç —Å–µ—Ç–µ–≤—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã: {interfaces}")
            return interfaces
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Ç–µ–≤—ã—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤ VM {vmid}: {e}")
            return []

    def _delete_pool_and_user(self, pool_name: str, user: str) -> bool:
        """–£–¥–∞–ª–∏—Ç—å –ø—É–ª –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            success = True

            # –£–¥–∞–ª–∏—Ç—å –ø—É–ª
            if self.pool_manager.delete_pool(pool_name):
                logger.info(f"–ü—É–ª {pool_name} —É–¥–∞–ª–µ–Ω")
            else:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø—É–ª {pool_name}")
                success = False

            # –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if self.user_manager.delete_user(user):
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user} —É–¥–∞–ª–µ–Ω")
            else:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user}")
                success = False

            return success

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—É–ª–∞ {pool_name} –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user}: {e}")
            return False

    def _delete_user_only(self, user: str) -> bool:
        """–£–¥–∞–ª–∏—Ç—å —Ç–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –ø—É–ª–∞ –Ω–µ—Ç)"""
        try:
            if self.user_manager.delete_user(user):
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user} —É–¥–∞–ª–µ–Ω")
                return True
            else:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user}")
                return False
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user}: {e}")
            return False

    def _get_all_users(self) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø—É–ª–∞–º–∏"""
        try:
            users_info = []

            # –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ø—É–ª—ã
            pools = self.pool_manager.list_pools()

            for pool_name in pools:
                pool_vms = self.pool_manager.get_pool_vms(pool_name)
                vm_count = len(pool_vms)

                # –ò–∑–≤–ª–µ—á—å –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ø—É–ª–∞
                user_name = self.user_manager.extract_user_name(pool_name)

                users_info.append({
                    'user': f"{user_name}@pve",
                    'pool': pool_name,
                    'vm_count': vm_count
                })

            # –°–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            users_info.sort(key=lambda x: x['user'])
            return users_info

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
            return []

    def _get_user_lists(self) -> List[str]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ø–∏—Å–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        try:
            if not os.path.exists(self._user_lists_dir):
                return []

            lists = []
            for file in os.listdir(self._user_lists_dir):
                if file.startswith('users_') and file.endswith('.yml'):
                    list_name = file[6:-4]  # –£–±—Ä–∞—Ç—å –ø—Ä–µ—Ñ–∏–∫—Å 'users_' –∏ —Å—É—Ñ—Ñ–∏–∫—Å '.yml'
                    lists.append(list_name)
            return sorted(lists)
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
            return []

    def _load_user_list(self, list_name: str) -> List[str]:
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        try:
            config = self._load_yaml_file(os.path.join(self._user_lists_dir, f"users_{list_name}.yml"))
            if config and 'users' in config:
                return config['users']
            return []
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π {list_name}: {e}")
            return []

    def _load_yaml_file(self, file_path: str) -> Optional[Dict[str, Any]]:
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å YAML —Ñ–∞–π–ª"""
        try:
            import yaml
            if not os.path.exists(file_path):
                return None

            with open(file_path, 'r', encoding='utf-8') as file:
                data = yaml.safe_load(file)
                return data if data is not None else None

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {file_path}: {e}")
            return None

    def _show_deletion_preview(self, list_name: str, users: List[str]) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–≤—å—é —É–¥–∞–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        print(f"\nüìã –ü—Ä–µ–≤—å—é —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ —Å–ø–∏—Å–∫–∞ '{list_name}' ({len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π):")
        print("-" * 70)

        # –ü–æ–∫–∞–∑–∞—Ç—å –ø–µ—Ä–≤—ã—Ö 5 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        max_preview = min(5, len(users))
        for i, user in enumerate(users[:max_preview], 1):
            print(f"  {i:2d}. {user}")

        if len(users) > max_preview:
            print(f"  ... –∏ –µ—â–µ {len(users) - max_preview} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")

        print("-" * 70)

        # –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        print(f"üìä –ë—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —É–¥–∞–ª–µ–Ω–∏–µ {len(users)} —Å—Ç–µ–Ω–¥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")

    def _show_user_deletion_preview(self, user_info: Dict[str, Any]) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–≤—å—é —É–¥–∞–ª–µ–Ω–∏—è –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_name = user_info['user']
        pool_name = user_info['pool']
        vm_count = user_info['vm_count']

        print(f"\nüë§ –î–µ—Ç–∞–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è '{user_name}':")
        print("-" * 50)
        print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_name}")
        print(f"–ü—É–ª: {pool_name}")
        print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ VM: {vm_count}")
        print("-" * 50)

        if vm_count > 0:
            print(f"‚ö†Ô∏è  –ë—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã –≤—Å–µ {vm_count} –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ –º–∞—à–∏–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        print("–ë—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã —Å–µ—Ç–µ–≤—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã, –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ –º–∞—à–∏–Ω—ã, –ø—É–ª –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
