#!/usr/bin/env python3
"""
–°–∏—Å—Ç–µ–º–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
–†–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º –Ω–∞ –ø–æ–¥–º–µ–Ω—é
"""

import logging
import os
import yaml as yaml_module
from typing import Dict, List, Any, Optional

from .stand_config_menu import StandConfigMenu
from .user_list_menu import UserListMenu
from .stand_deploy_menu import StandDeployMenu
from .delete_stand_menu import DeleteStandMenu
from .connections_menu import ConnectionsMenu


class MainMenu:
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å–∏—Å—Ç–µ–º—ã Deploy-Stand"""

    def __init__(self, logger_instance: logging.Logger):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é

        Args:
            logger_instance: –≠–∫–∑–µ–º–ø–ª—è—Ä –ª–æ–≥–≥–µ—Ä–∞
        """
        self.logger = logger_instance
        self.current_connection = None  # –ê–∫—Ç–∏–≤–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–º–µ–Ω—é
        self.stand_config_menu = StandConfigMenu(logger_instance)
        self.user_list_menu = UserListMenu(logger_instance)
        self.stand_deploy_menu = StandDeployMenu(logger_instance)
        self.delete_stand_menu = DeleteStandMenu(logger_instance)
        self.connections_menu = ConnectionsMenu(logger_instance)

    def show(self) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        # –ü–ï–†–í–´–ú –î–ï–õ–û–ú - –ù–ê–°–¢–†–û–ô–ö–ê –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø
        if not self._ensure_connection():
            print("‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
            return

        # –ë—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø –∫ —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–º —Ñ—É–Ω–∫—Ü–∏—è–º
        quick_actions = {
            'd': '3',  # d = deploy (—Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—å)
            'c': '1',  # c = create config (—Å–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é)
            'u': '2',  # u = users (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏)
            'x': '4',  # x = cleanup (–æ—á–∏—Å—Ç–∫–∞)
            'n': '5',  # n = connections (–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è)
        }

        while True:
            try:
                # –û—á–∏—Å—Ç–∫–∞ —ç–∫—Ä–∞–Ω–∞ –ø–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º –º–µ–Ω—é
                os.system('clear')

                # –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–µ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
                current_connection = self._get_current_connection_info()

                # –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–µ–Ω—é —Å –≥–æ—Ä—è—á–∏–º–∏ –∫–ª–∞–≤–∏—à–∞–º–∏
                print("üöÄ Deploy-Stand - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
                print("=" * 50)
                print(f"üîå –¢–µ–∫—É—â–µ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: {current_connection}")
                print("=" * 50)
                print("üìã –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:")
                print("  [1] üõ†Ô∏è  –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è–º–∏ —Å—Ç–µ–Ω–¥–æ–≤")
                print("  [2] üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏")
                print("  [3] üöÄ –†–∞–∑–≤–µ—Ä–Ω—É—Ç—å —Å—Ç–µ–Ω–¥")
                print("  [4] üóëÔ∏è  –£–¥–∞–ª–∏—Ç—å —Å—Ç–µ–Ω–¥—ã")
                print("  [5] üîå –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è–º–∏")
                print("  [0] –í—ã—Ö–æ–¥")
                print("\n‚ö° –ë—ã—Å—Ç—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã:")
                print("  c = –ö–æ–Ω—Ñ–∏–≥–∏ | u = –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ | d = –†–∞–∑–≤–µ—Ä–Ω—É—Ç—å | x = –û—á–∏—Å—Ç–∫–∞ | n = –ü–æ–¥–∫–ª—é—á–µ–Ω–∏—è")

                # –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤–≤–æ–¥ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –±—ã—Å—Ç—Ä—ã—Ö –∫–æ–º–∞–Ω–¥
                choice = input("\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ").strip().lower()

                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –±—ã—Å—Ç—Ä—ã—Ö –∫–æ–º–∞–Ω–¥
                if choice in quick_actions:
                    choice = quick_actions[choice]

                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π
                action_result = self._handle_menu_choice(choice)
                if action_result == "exit":
                    break
                elif action_result == "repeat":
                    continue

            except KeyboardInterrupt:
                print("\n\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                break
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é: {e}")
                print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
                input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")

    def _handle_menu_choice(self, choice: str) -> str:
        """–¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–µ–Ω—é —Å –ø–µ—Ä–µ—Ö–æ–¥–æ–º –∫ –ø–æ–¥–º–µ–Ω—é"""
        menu_actions = {
            "1": lambda: self.stand_config_menu.show(),
            "2": lambda: self.user_list_menu.show(),
            "3": lambda: self.stand_deploy_menu.show(),
            "4": lambda: self.delete_stand_menu.show(),
            "5": lambda: self.connections_menu.show(),
            "0": lambda: "exit"
        }

        action = menu_actions.get(choice)
        if action:
            try:
                result = action() if callable(action) else action
                return result if result != "back" else "repeat"
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è {choice}: {e}")
                print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
                return "repeat"
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ü–∏—Ñ—Ä—ã 0-5 –∏–ª–∏ –±—ã—Å—Ç—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã (c, u, d, x, n)")
            return "repeat"

    def _ensure_connection(self) -> bool:
        """–û–±–µ—Å–ø–µ—á–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        try:
            # –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
            available_connections = self.connections_menu._get_saved_connections()

            if available_connections:
                print("‚úÖ –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:")
                for i, conn in enumerate(available_connections, 1):
                    print(f"  [{i}] {conn['name']} - {conn.get('host', '–Ω–µ —É–∫–∞–∑–∞–Ω')}")

                while True:
                    choice = input(f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ (1-{len(available_connections)}) –∏–ª–∏ [n] –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ: ").strip().lower()

                    if choice == 'n':
                        result = self.connections_menu._create_connection()
                        if result == "success":
                            # –ü–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
                            updated_connections = self.connections_menu._get_saved_connections()
                            if updated_connections:
                                self.current_connection = updated_connections[-1]
                                # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω–æ–µ
                                try:
                                    from main import set_current_connection
                                    set_current_connection(self.current_connection)
                                except ImportError:
                                    pass
                        return result == "success"

                    elif choice.isdigit():
                        idx = int(choice) - 1
                        if 0 <= idx < len(available_connections):
                            self.current_connection = available_connections[idx]
                            try:
                                from main import set_current_connection
                                set_current_connection(self.current_connection)
                            except ImportError:
                                pass
                            print(f"‚úÖ –í—ã–±—Ä–∞–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: {self.current_connection['name']}")
                            return True
                        else:
                            print(f"‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ {len(available_connections)}")
                    elif choice == "0":
                        return False
                    else:
                        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥")

            else:
                print("‚ÑπÔ∏è  –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ...")
                result = self.connections_menu._create_connection()
                return result == "success"

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π: {e}")
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            return False

    def _get_current_connection_info(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏"""
        if self.current_connection:
            name = self.current_connection.get('name', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            host = self.current_connection.get('host', '–Ω–µ —É–∫–∞–∑–∞–Ω')
            return f"{name} ({host})"
        return "–ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω"
