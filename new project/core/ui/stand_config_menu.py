#!/usr/bin/env python3
"""
–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è–º–∏ —Å—Ç–µ–Ω–¥–æ–≤
–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è–º–∏ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è —Å—Ç–µ–Ω–¥–æ–≤
"""

import os
import yaml as yaml_module
from typing import Dict, List, Any, Optional

from ..utils import Logger, ConfigValidator


class StandConfigMenu:
    """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è–º–∏ —Å—Ç–µ–Ω–¥–æ–≤"""

    CONFIGS_DIR = "data/configs"

    def __init__(self, logger_instance):
        self.logger = logger_instance
        self.validator = ConfigValidator()
        self._ensure_directories()

    def _ensure_directories(self):
        """–°–æ–∑–¥–∞—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç"""
        try:
            os.makedirs(self.CONFIGS_DIR, exist_ok=True)
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {e}")

    def show(self) -> str:
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è–º–∏ —Å—Ç–µ–Ω–¥–æ–≤"""
        print("\nüõ†Ô∏è  –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è–º–∏ —Å—Ç–µ–Ω–¥–æ–≤")
        print("=" * 50)

        print("–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:")
        print("  [1] –°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å—Ç–µ–Ω–¥–∞")
        print("  [2] –ü–æ–∫–∞–∑–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
        print("  [3] –£–¥–∞–ª–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å—Ç–µ–Ω–¥–∞")
        print("  [0] –ù–∞–∑–∞–¥")

        choice = input("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ").strip()

        if choice == "1":
            result = self._create_stand_config()
            return result
        elif choice == "2":
            result = self._show_stand_configs()
            return result
        elif choice == "3":
            result = self._delete_stand_config()
            return result
        elif choice == "0":
            return "back"
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!")
            return "repeat"

    def _create_stand_config(self) -> str:
        """–°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å—Ç–µ–Ω–¥–∞ –ø–æ –∞–Ω–∞–ª–æ–≥–∏–∏ —Å–æ —Å—Ç–∞—Ä—ã–º –ø—Ä–æ–µ–∫—Ç–æ–º"""
        print("\nüìã –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å—Ç–µ–Ω–¥–∞")
        print("-" * 40)

        try:
            # –ó–∞–ø—Ä–æ—Å –∏–º—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            config_name = input("–ò–º—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: ").strip()
            if not config_name:
                print("‚ùå –ò–º—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ!")
                return "repeat"

            # –í–∏–¥ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—â–∏–π –¥–ª—è –≤—Å–µ–≥–æ —Å—Ç–µ–Ω–¥–∞
            print("\n–¢–∏–ø –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:")
            print("  [1] Linked clone (—Å–≤—è–∑–∞–Ω–Ω–æ–µ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ)")
            print("  [2] Full clone (–ø–æ–ª–Ω–æ–µ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ)")
            clone_choice = input("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è [1]: ").strip() or "1"

            if clone_choice == "1":
                default_full_clone = False
                clone_type_name = "linked clone"
            elif clone_choice == "2":
                default_full_clone = True
                clone_type_name = "full clone"
            else:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä —Ç–∏–ø–∞ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è!")
                return "repeat"

            print(f"‚úÖ –í—ã–±—Ä–∞–Ω–æ: {clone_type_name}")
            print()

            config_filename = f"{config_name}.yml"
            config_path = os.path.join(self.CONFIGS_DIR, config_filename)

            if os.path.exists(config_path):
                overwrite = input(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è '{config_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å? (y/N): ").strip().lower()
                if overwrite != 'y':
                    return "repeat"

            # –ó–∞–ø—Ä–æ—Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–∞—à–∏–Ω
            while True:
                num_machines_input = input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—à–∏–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ [1]: ").strip() or "1"
                try:
                    num_machines = int(num_machines_input)
                    if num_machines <= 0:
                        print("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—à–∏–Ω –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º!")
                        continue
                    break
                except ValueError:
                    print("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ!")

            machines = []

            for i in range(num_machines):
                print(f"\nüîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–∞—à–∏–Ω—ã {i+1}:")
                print("-" * 30)

                # –¢–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ - –≤—ã–±–æ—Ä –∏–∑ —Å–ø–∏—Å–∫–∞
                print("–¢–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:")
                print("  [1] Linux")
                print("  [2] Ecorouter")
                device_choice = input("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ [1]: ").strip() or "1"

                if device_choice == "1":
                    device_type = "linux"
                    device_name = "Linux"
                elif device_choice == "2":
                    device_type = "ecorouter"
                    device_name = "Ecorouter"
                else:
                    print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä —Ç–∏–ø–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞!")
                    return "repeat"

                print(f"‚úÖ –í—ã–±—Ä–∞–Ω–æ: {device_name}")

                # –ò–º—è –º–∞—à–∏–Ω—ã
                machine_name = input(f"–ò–º—è –º–∞—à–∏–Ω—ã [vm-{i+1}]: ").strip() or f"vm-{i+1}"

                # –í—ã–±–æ—Ä –Ω–æ–¥—ã –∏ —à–∞–±–ª–æ–Ω–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
                print("üîç –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤ —á–µ—Ä–µ–∑ —Ç–µ–∫—É—â–µ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...")

                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç ProxmoxAPI —á–µ—Ä–µ–∑EXISTING_CONNECTION
                from ..utils.proxmox_client import ProxmoxClient

                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞
                connections_file = os.path.join(os.path.dirname(os.path.dirname(os.path.dirname(__file__))), "data", "connections_config.yml")

                try:
                    with open(connections_file, 'r', encoding='utf-8') as f:
                        conn_data = yaml_module.safe_load(f)
                        if conn_data and isinstance(conn_data, dict):
                            # –ë–µ—Ä–µ–º –∞–∫—Ç–∏–≤–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
                            active_conn_name = list(conn_data.keys())[0]
                            conn_config = conn_data[active_conn_name]
                            if conn_config:
                                client = ProxmoxClient(
                                    host=conn_config['host'],
                                    user=conn_config['user'],
                                    password=conn_config['password']
                                )

                                if not client.connect():
                                    raise Exception("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å")

                                # –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –Ω–æ–¥
                                nodes = client.get_nodes()
                                if not nodes:
                                    raise Exception("–ù–æ–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

                                # –í—ã–±–æ—Ä –Ω–æ–¥—ã
                                print("\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–æ–¥—ã:")
                                for idx, node in enumerate(nodes, 1):
                                    print(f"  [{idx}] {node}")

                                while True:
                                    node_choice = input(f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–¥—É (1-{len(nodes)}) [1]: ").strip() or "1"
                                    try:
                                        node_idx = int(node_choice) - 1
                                        if 0 <= node_idx < len(nodes):
                                            selected_node = nodes[node_idx]
                                            break
                                        else:
                                            print(f"‚ùå –í—ã–±–µ—Ä–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ {len(nodes)}")
                                    except ValueError:
                                        print("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ!")

                                # –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –í–ú –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –Ω–æ–¥–µ (—à–∞–±–ª–æ–Ω—ã)
                                vms = client.get_vms(selected_node)
                                templates = []
                                for vm in vms:
                                    if vm.get('template') == 1:  # –≠—Ç–æ —à–∞–±–ª–æ–Ω
                                        templates.append(vm)

                                if not templates:
                                    raise Exception(f"–ù–∞ –Ω–æ–¥–µ '{selected_node}' –Ω–µ—Ç —à–∞–±–ª–æ–Ω–æ–≤")

                                # –í—ã–±–æ—Ä —à–∞–±–ª–æ–Ω–∞
                                print(f"\n–®–∞–±–ª–æ–Ω—ã –Ω–∞ –Ω–æ–¥–µ '{selected_node}':")
                                for idx, template in enumerate(templates, 1):
                                    name = template.get('name', f'VM{template.get("vmid", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")}')
                                    vmid = template.get('vmid', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                                    print(f"  [{idx}] {name} (VMID: {vmid})")

                                while True:
                                    template_choice = input(f"–í—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω (1-{len(templates)}) [1]: ").strip() or "1"
                                    try:
                                        template_idx = int(template_choice) - 1
                                        if 0 <= template_idx < len(templates):
                                            selected_template = templates[template_idx]
                                            template_vmid = selected_template['vmid']
                                            template_node = selected_node
                                            print(f"‚úÖ –í—ã–±—Ä–∞–Ω–∞ –Ω–æ–¥–∞: {selected_node}")
                                            print(f"‚úÖ –í—ã–±—Ä–∞–Ω —à–∞–±–ª–æ–Ω: {selected_template.get('name', f'VMID:{template_vmid}')} (VMID: {template_vmid})")
                                            break
                                        else:
                                            print(f"‚ùå –í—ã–±–µ—Ä–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ {len(templates)}")
                                    except ValueError:
                                        print("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ!")

                            else:
                                raise Exception("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∞")
                        else:
                            raise Exception("–§–∞–π–ª –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –ø—É—Å—Ç")

                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å Proxmox API: {e}")
                    print("üîÑ –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Ä—É—á–Ω–æ–º—É –≤–≤–æ–¥—É –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
                    # –†—É—á–Ω–æ–π –≤–≤–æ–¥ –∫–∞–∫ fallback
                    while True:
                        template_vmid_input = input("VMID —à–∞–±–ª–æ–Ω–∞: ").strip()
                        try:
                            template_vmid = int(template_vmid_input)
                            break
                        except ValueError:
                            print("‚ùå VMID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º!")
                    template_node = input("–ù–æ–¥–∞ —à–∞–±–ª–æ–Ω–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ): ").strip() or None

                # –°–µ—Ç–µ–≤—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã
                networks = []
                print("\nüåê –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Ç–µ–≤—ã—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤:")
                print("-" * 35)
                while True:
                    bridge = input("–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Å–µ—Ç–µ–≤–æ–≥–æ –º–æ—Å—Ç–∞ (–ø—É—Å—Ç–æ–π –≤–≤–æ–¥ –¥–ª—è –≤—ã—Ö–æ–¥–∞): ").strip()
                    if not bridge:
                        break
                    networks.append({'bridge': bridge})
                    print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –º–æ—Å—Ç: {bridge}")

                machine_config = {
                    'device_type': device_type,
                    'name': machine_name,
                    'template_vmid': template_vmid,
                    'template_node': template_node,
                    'networks': networks,
                    'full_clone': default_full_clone
                }

                machines.append(machine_config)

            # –°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–æ –∞–Ω–∞–ª–æ–≥–∏–∏ —Å–æ —Å—Ç–∞—Ä—ã–º –ø—Ä–æ–µ–∫—Ç–æ–º
            config = {
                'machines': machines
            }

            # –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            if not self.validator.validate_deployment_config(config):
                print("‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –ø—Ä–æ—à–ª–∞ –≤–∞–ª–∏–¥–∞—Ü–∏—é!")
                return "repeat"

            # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            success = self._save_yaml_file(config_path, config)
            if success:
                print(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è '{config_name}' —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
                self.logger.info(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç–µ–Ω–¥–∞ '{config_name}' —Å–æ–∑–¥–∞–Ω–∞")
                return "success"
            else:
                print("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
                return "error"

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å—Ç–µ–Ω–¥–∞: {e}")
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            return "error"

    def _show_stand_configs(self) -> str:
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å—Ç–µ–Ω–¥–æ–≤"""
        print("\nüìã –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å—Ç–µ–Ω–¥–æ–≤:")
        print("-" * 45)

        try:
            configs = self._list_configs()
            if not configs:
                print("‚ÑπÔ∏è  –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π")
            else:
                for i, config_name in enumerate(configs, 1):
                    config_path = os.path.join(self.CONFIGS_DIR, config_name)
                    config = self._load_yaml_file(config_path)
                    if config and 'machines' in config:
                        num_machines = len(config['machines'])
                        print(f"{i}. {config_name} ({num_machines} –º–∞—à–∏–Ω)")
                    else:
                        print(f"{i}. {config_name} (–Ω–µ–≤–∞–ª–∏–¥–Ω–∞—è)")
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π: {e}")
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
        return "repeat"

    def _delete_stand_config(self) -> str:
        """–£–¥–∞–ª–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å—Ç–µ–Ω–¥–∞"""
        print("\nüóëÔ∏è  –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å—Ç–µ–Ω–¥–∞")
        print("-" * 35)

        try:
            configs = self._list_configs()
            if not configs:
                print("‚ÑπÔ∏è  –ù–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
                return "repeat"

            print("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:")
            for i, config_name in enumerate(configs, 1):
                print(f"  [{i}] {config_name}")

            while True:
                choice_input = input(f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (1-{len(configs)}) –∏–ª–∏ 0 –¥–ª—è –æ—Ç–º–µ–Ω—ã: ").strip()
                if choice_input == "0":
                    return "repeat"
                try:
                    choice = int(choice_input) - 1
                    if 0 <= choice < len(configs):
                        break
                    else:
                        print(f"‚ùå –í—ã–±–µ—Ä–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ {len(configs)}")
                except ValueError:
                    print("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ!")

            config_name = configs[choice]
            confirm = input(f"–£–¥–∞–ª–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é '{config_name}'? (y/N): ").strip().lower()

            if confirm == 'y':
                config_path = os.path.join(self.CONFIGS_DIR, config_name)
                success = self._delete_config_file(config_path)
                if success:
                    print(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è '{config_name}' —É–¥–∞–ª–µ–Ω–∞")
                    self.logger.info(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç–µ–Ω–¥–∞ '{config_name}' —É–¥–∞–ª–µ–Ω–∞")
                    return "success"
                else:
                    print("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
                    return "error"
            else:
                print("‚ÑπÔ∏è  –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
                return "repeat"

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            return "error"

    def _list_configs(self) -> List[str]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π"""
        try:
            if not os.path.exists(self.CONFIGS_DIR):
                return []

            configs = []
            for file in os.listdir(self.CONFIGS_DIR):
                if file.endswith('.yml') or file.endswith('.yaml'):
                    configs.append(file)
            return sorted(configs)
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π: {e}")
            return []

    def _load_yaml_file(self, file_path: str) -> Optional[Dict[str, Any]]:
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å YAML —Ñ–∞–π–ª"""
        try:
            if not os.path.exists(file_path):
                return None

            with open(file_path, 'r', encoding='utf-8') as file:
                content = file.read()
                if not content.strip():
                    return None

                data = yaml_module.safe_load(content)
                return data if data is not None else None

        except yaml_module.YAMLError as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ YAML —Ñ–∞–π–ª–∞ {file_path}: {e}")
            return None
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {file_path}: {e}")
            return None

    def _save_yaml_file(self, file_path: str, data: Dict[str, Any]) -> bool:
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ YAML —Ñ–∞–π–ª"""
        try:
            os.makedirs(os.path.dirname(file_path), exist_ok=True)

            with open(file_path, 'w', encoding='utf-8') as file:
                yaml_module.dump(
                    data,
                    file,
                    default_flow_style=False,
                    allow_unicode=True
                )

            self.logger.info(f"–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {file_path}")
            return True

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {file_path}: {e}")
            return False

    def _delete_config_file(self, config_path: str) -> bool:
        """–£–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        try:
            if os.path.exists(config_path):
                os.remove(config_path)
                return True
            return False
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {config_path}: {e}")
            return False
