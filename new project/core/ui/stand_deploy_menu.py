
#!/usr/bin/env python3
"""
–ú–µ–Ω—é —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è —Å—Ç–µ–Ω–¥–æ–≤
–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π —Å—Ç–µ–Ω–¥–æ–≤ –ø–æ —Ä–∞–∑–ª–∏—á–Ω—ã–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º
"""

import os
import yaml as yaml_module
from typing import Dict, List, Any, Optional

from ..utils import Logger, ConfigValidator


class StandDeployMenu:
    """–ú–µ–Ω—é —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è —Å—Ç–µ–Ω–¥–æ–≤"""

    CONFIGS_DIR = "data/configs"
    USERS_DIR = "data"  # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–ø–∏—Å–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

    def __init__(self, logger_instance):
        self.logger = logger_instance
        self.validator = ConfigValidator()
        self._ensure_directories()

    def _ensure_directories(self):
        """–°–æ–∑–¥–∞—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç"""
        try:
            for directory in [self.CONFIGS_DIR, self.USERS_DIR]:
                os.makedirs(directory, exist_ok=True)
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π: {e}")

    def show(self) -> str:
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è —Å—Ç–µ–Ω–¥–æ–≤"""
        print("\nüöÄ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ —Å—Ç–µ–Ω–¥–æ–≤")
        print("=" * 50)

        # –®–∞–≥ 1: –í—ã–±–æ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å—Ç–µ–Ω–¥–∞
        selected_config = self._select_stand_config()
        if not selected_config:
            return "repeat"

        # –®–∞–≥ 2: –í—ã–±–æ—Ä —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        selected_users = self._select_users_list()
        if not selected_users:
            return "repeat"

        # –®–∞–≥ 3: –í—ã–±–æ—Ä —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
        strategy = self._select_deployment_strategy()
        if not strategy:
            return "repeat"

        # –®–∞–≥ 4: –ó–∞–ø—É—Å–∫ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
        return self._execute_deployment(selected_config, selected_users, strategy)

    def _select_stand_config(self) -> Optional[str]:
        """–í—ã–±–æ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å—Ç–µ–Ω–¥–∞ –¥–ª—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è"""
        print("\nüìã –®–∞–≥ 1: –í—ã–±–æ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å—Ç–µ–Ω–¥–∞")
        print("-" * 45)

        try:
            configs = self._list_configs()
            if not configs:
                print("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π —Å—Ç–µ–Ω–¥–æ–≤!")
                print("–°–æ–∑–¥–∞–π—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ –º–µ–Ω—é '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è–º–∏ —Å—Ç–µ–Ω–¥–æ–≤'")
                input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
                return None

            print("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:")
            for i, config_name in enumerate(configs, 1):
                config_path = os.path.join(self.CONFIGS_DIR, config_name)
                config = self._load_yaml_file(config_path)
                if config and 'machines' in config:
                    num_machines = len(config['machines'])
                    print(f"  [{i}] {config_name} ({num_machines} –º–∞—à–∏–Ω)")
                else:
                    print(f"  [{i}] {config_name} (–Ω–µ–≤–∞–ª–∏–¥–Ω–∞—è)")

            print("  [0] –û—Ç–º–µ–Ω–∞")

            while True:
                choice_input = input(f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é (1-{len(configs)}) –∏–ª–∏ 0 –¥–ª—è –æ—Ç–º–µ–Ω—ã: ").strip()
                if choice_input == "0":
                    return None
                try:
                    choice = int(choice_input) - 1
                    if 0 <= choice < len(configs):
                        selected_config = configs[choice]
                        print(f"‚úÖ –í—ã–±—Ä–∞–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {selected_config}")
                        return selected_config
                    else:
                        print(f"‚ùå –í—ã–±–µ—Ä–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ {len(configs)}")
                except ValueError:
                    print("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ!")

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            return None

    def _select_users_list(self) -> Optional[List[str]]:
        """–í—ã–±–æ—Ä —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è"""
        print("\nüë• –®–∞–≥ 2: –í—ã–±–æ—Ä —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        print("-" * 42)

        try:
            users_lists = self._get_users_lists()
            if not users_lists:
                print("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ø–∏—Å–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!")
                print("–°–æ–∑–¥–∞–π—Ç–µ —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –º–µ–Ω—é '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏'")
                input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
                return None

            print("–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:")
            for i, list_name in enumerate(users_lists, 1):
                users = self._load_users_list(list_name)
                num_users = len(users)
                print(f"  [{i}] {list_name} ({num_users} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)")

                # –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–≤—å—é –ø–µ—Ä–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                if num_users > 0:
                    preview_users = users[:2]  # –ü–æ–∫–∞–∑–∞—Ç—å –ø–µ—Ä–≤—ã—Ö 2
                    preview = ", ".join(preview_users)
                    if num_users > 2:
                        preview += f" ... –∏ –µ—â–µ {num_users - 2}"
                    print(f"      üë§ {preview}")

            print("  [0] –û—Ç–º–µ–Ω–∞")

            while True:
                choice_input = input(f"–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–∏—Å–æ–∫ (1-{len(users_lists)}) –∏–ª–∏ 0 –¥–ª—è –æ—Ç–º–µ–Ω—ã: ").strip()
                if choice_input == "0":
                    return None
                try:
                    choice = int(choice_input) - 1
                    if 0 <= choice < len(users_lists):
                        selected_list = users_lists[choice]
                        users = self._load_users_list(selected_list)
                        print(f"‚úÖ –í—ã–±—Ä–∞–Ω —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {selected_list} ({len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)")
                        return users
                    else:
                        print(f"‚ùå –í—ã–±–µ—Ä–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ {len(users_lists)}")
                except ValueError:
                    print("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ!")

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            return None

    def _select_deployment_strategy(self) -> Optional[str]:
        """–í—ã–±–æ—Ä —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è"""
        print("\nüéØ –®–∞–≥ 3: –í—ã–±–æ—Ä —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è")
        print("-" * 42)

        print("–°—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è:")
        print("  [1] üöÄ –õ–æ–∫–∞–ª—å–Ω–æ–µ - —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –Ω–∞ –Ω–æ–¥–µ —Å —à–∞–±–ª–æ–Ω–∞–º–∏")
        print("  [2] üåê –£–¥–∞–ª–µ–Ω–Ω–æ–µ - –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤ –¥–ª—è —Ü–µ–ª–µ–≤–æ–π –Ω–æ–¥—ã")
        print("  [3] ‚öñÔ∏è  –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ - —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ")
        print("  [4] üéØ –£–º–Ω–æ–µ - —Å —É—á–µ—Ç–æ–º —Ç–µ–∫—É—â–µ–π –Ω–∞–≥—Ä—É–∑–∫–∏")
        print("  [0] –ù–∞–∑–∞–¥")

        while True:
            choice = input("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏—é —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è: ").strip()
            if choice == "0":
                return None
            elif choice in ["1", "2", "3", "4"]:
                strategy_names = {
                    "1": "–ª–æ–∫–∞–ª—å–Ω–∞—è",
                    "2": "—É–¥–∞–ª–µ–Ω–Ω–∞—è",
                    "3": "—Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è",
                    "4": "—É–º–Ω–∞—è"
                }
                print(f"‚úÖ –í—ã–±—Ä–∞–Ω–∞ {strategy_names[choice]} —Å—Ç—Ä–∞—Ç–µ–≥–∏—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è")
                return choice
            else:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏!")

    def _execute_deployment(self, config_name: str, users: List[str], strategy: str) -> str:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è —Å—Ç–µ–Ω–¥–∞"""
        print("\n‚öôÔ∏è –®–∞–≥ 4: –ó–∞–ø—É—Å–∫ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è")
        print("-" * 35)

        try:
            # –ó–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            config_path = os.path.join(self.CONFIGS_DIR, config_name)
            config = self._load_yaml_file(config_path)

            if not config:
                print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏!")
                return "error"

            # –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            if not self.validator.validate_deployment_config(config):
                print("‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –ø—Ä–æ—à–ª–∞ –≤–∞–ª–∏–¥–∞—Ü–∏—é!")
                return "error"

            # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            if not self.validator.validate_users_list(users):
                print("‚ùå –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –ø—Ä–æ—à–µ–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é!")
                return "error"

            print(f"üöÄ –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ —Å—Ç–µ–Ω–¥–∞ '{config_name}'")
            print(f"üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}")
            print(f"üéØ –°—Ç—Ä–∞—Ç–µ–≥–∏—è: {strategy}")

            # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å—Å—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –¥–µ–ø–ª–æ–π–µ—Ä
            result = self._deploy_with_strategy(config, users, strategy)

            if result == "success":
                print("‚úÖ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ —Å—Ç–µ–Ω–¥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
                self.logger.info(f"–£—Å–ø–µ—à–Ω–æ–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ —Å—Ç–µ–Ω–¥–∞ '{config_name}' –¥–ª—è {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            else:
                print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–∏ —Å—Ç–µ–Ω–¥–∞!")

            input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
            return result

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–∏ —Å—Ç–µ–Ω–¥–∞: {e}")
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            return "error"

    def _deploy_with_strategy(self, config: Dict[str, Any], users: List[str], strategy: str) -> str:
        """–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        try:
            if strategy == "1":
                # –õ–æ–∫–∞–ª—å–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π LocalDeployer
                from ..modules.local_deployer import LocalDeployer

                # –ü–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
                connections_file = os.path.join(self.USERS_DIR, "connections_config.yml")
                conn_config = self._load_yaml_file(connections_file)

                if not conn_config:
                    print("‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
                    return "error"

                # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–µ—Ä–≤—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π –∫–æ–Ω–Ω–µ–∫—Ç
                active_conn = list(conn_config.values())[0]
                host = active_conn.get('host', 'localhost')
                user = active_conn.get('user', 'root')
                password = active_conn.get('password', '')

                # –°–æ–∑–¥–∞—Ç—å –¥–µ–ø–ª–æ–π–µ—Ä
                deployer = LocalDeployer(host=host, user=user, password=password)

                # –í—ã–ø–æ–ª–Ω–∏—Ç—å —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ
                results = deployer.deploy_configuration(users, config)

                # –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                self._show_deployment_results(results)

                return "success"  # –ü–æ–∫–∞ –≤—Å–µ–≥–¥–∞ —É—Å–ø–µ—Ö –¥–ª—è —Ç–µ—Å—Ç–∞

            else:
                # –î—Ä—É–≥–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã
                print(f"–°—Ç—Ä–∞—Ç–µ–≥–∏—è {strategy} –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞")
                return "repeat"

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è: {e}")
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            return "error"

    def _show_deployment_results(self, results: Dict[str, Any]) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è"""
        try:
            print("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è:")
            print("-" * 30)

            success_count = 0
            total_count = len(results)

            for user, result in results.items():
                if result == "success":
                    print(f"‚úÖ {user}: –£—Å–ø–µ—à–Ω–æ")
                    success_count += 1
                else:
                    print(f"‚ùå {user}: –û—à–∏–±–∫–∞ - {result}")

            print("-" * 30)
            print(f"–ò—Ç–æ–≥–æ: {success_count}/{total_count} —É—Å–ø–µ—à–Ω–æ")

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")

    # –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã (–∫–æ–ø–∏—è–º–∏ –∏–∑ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª–µ–π)
    def _list_configs(self) -> List[str]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π"""
        try:
            if not os.path.exists(self.CONFIGS_DIR):
                return []

            configs = []
            for file in os.listdir(self.CONFIGS_DIR):
                if file.endswith('.yml') or file.endswith('.yaml'):
                    configs.append(file)
            return sorted(configs)
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π: {e}")
            return []

    def _get_users_lists(self) -> List[str]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ø–∏—Å–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        try:
            if not os.path.exists(self.USERS_DIR):
                return []

            lists = []
            for file in os.listdir(self.USERS_DIR):
                if file.startswith('users_') and file.endswith('.yml'):
                    list_name = file[6:-4]  # –£–±—Ä–∞—Ç—å –ø—Ä–µ—Ñ–∏–∫—Å 'users_' –∏ —Å—É—Ñ—Ñ–∏–∫—Å '.yml'
                    lists.append(list_name)
            return sorted(lists)
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
            return []

    def _load_users_list(self, list_name: str) -> List[str]:
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        try:
            file_path = os.path.join(self.USERS_DIR, f"users_{list_name}.yml")
            config = self._load_yaml_file(file_path)
            if config and 'users' in config:
                return config['users']
            return []
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π {list_name}: {e}")
            return []

    def _load_yaml_file(self, file_path: str) -> Optional[Dict[str, Any]]:
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å YAML —Ñ–∞–π–ª"""
        try:
            if not os.path.exists(file_path):
                return None

            with open(file_path, 'r', encoding='utf-8') as file:
                content = file.read()
                if not content.strip():
                    return None

                data = yaml_module.safe_load(content)
                return data if data is not None else None

        except yaml_module.YAMLError as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ YAML —Ñ–∞–π–ª–∞ {file_path}: {e}")
            return None
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {file_path}: {e}")
            return None
