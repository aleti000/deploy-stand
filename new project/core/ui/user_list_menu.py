#!/usr/bin/env python3
"""
–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –∏ —Å–ø–∏—Å–∫–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
"""

import os
import yaml as yaml_module
from typing import Dict, List, Any, Optional

from ..utils import Logger, ConfigValidator


class UserListMenu:
    """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""

    CONFIG_DIR = "data"

    def __init__(self, logger_instance):
        self.logger = logger_instance
        self.validator = ConfigValidator()
        self._ensure_directories()

    def _ensure_directories(self):
        """–°–æ–∑–¥–∞—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç"""
        try:
            os.makedirs(self.CONFIG_DIR, exist_ok=True)
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {e}")

    def show(self) -> str:
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
        print("\nüë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏")
        print("=" * 50)

        print("–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:")
        print("  [1] –°–æ–∑–¥–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        print("  [2] –ü–æ–∫–∞–∑–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–ø–∏—Å–∫–∏")
        print("  [3] –£–¥–∞–ª–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        print("  [0] –ù–∞–∑–∞–¥")

        choice = input("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ").strip()

        if choice == "1":
            return self._create_users_list()
        elif choice == "2":
            return self._show_users_lists()
        elif choice == "3":
            return self._delete_users_list()
        elif choice == "0":
            return "back"
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!")
            return "repeat"

    def _create_users_list(self) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        print("\nüìù –°–æ–∑–¥–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        print("-" * 40)

        try:
            # –í–≤–æ–¥ –∏–º–µ–Ω–∏ —Å–ø–∏—Å–∫–∞
            list_name = input("–ò–º—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ").strip()
            if not list_name:
                print("‚ùå –ò–º—è —Å–ø–∏—Å–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ!")
                return "repeat"

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Å–ø–∏—Å–∫–∞
            if self._list_exists(list_name):
                overwrite = input(f"–°–ø–∏—Å–æ–∫ '{list_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å? (y/N): ").strip().lower()
                if overwrite != 'y':
                    return "repeat"

            # –í—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞ –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            print("\n–°–ø–æ—Å–æ–± —Å–æ–∑–¥–∞–Ω–∏—è —Å–ø–∏—Å–∫–∞:")
            print("  [1] –í–≤–µ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤—Ä—É—á–Ω—É—é")
            print("  [2] –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ —Ñ–∞–π–ª–∞")

            method_choice = input("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± [1]: ").strip() or "1"

            users = []
            if method_choice == "1":
                users = self._input_users_manually()
            elif method_choice == "2":
                users = self._load_users_from_file(list_name)
            else:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞!")
                return "repeat"

            if not users:
                print("‚ÑπÔ∏è  –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç")
                return "repeat"

            # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            if not self._validate_users_list(users):
                return "repeat"

            # –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–≤—å—é –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º
            self._show_creation_preview(list_name, users)

            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è
            confirm = input(f"–°–æ–∑–¥–∞—Ç—å —Å–ø–∏—Å–æ–∫ '{list_name}' —Å {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏? (y/N): ").strip().lower()
            if confirm != 'y':
                print("‚ÑπÔ∏è  –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
                return "repeat"

            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞
            if self._save_users_list(list_name, users):
                self._show_import_success_message(list_name, users)
                self.logger.info(f"–°–æ–∑–¥–∞–Ω —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π '{list_name}' —Å {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏")
                return "success"
            else:
                print("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
                return "error"

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            return "error"

    def _input_users_manually(self) -> List[str]:
        """–í–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤—Ä—É—á–Ω—É—é —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é"""
        users_input = input("–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (user1@pve,user2@pve): ").strip()
        if not users_input:
            return []

        users = [user.strip() for user in users_input.split(',') if user.strip()]
        return users

    def _load_users_from_file(self, list_name: str) -> List[str]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞"""
        file_path = input("–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å–æ —Å–ø–∏—Å–∫–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ").strip()
        if not file_path:
            return []

        try:
            users = []
            with open(file_path, 'r', encoding='utf-8') as f:
                for line in f:
                    line = line.strip()
                    if line and not line.startswith('#'):
                        # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –¥–æ–º–µ–Ω–∞, –¥–æ–±–∞–≤–∏—Ç—å @pve
                        if '@' not in line:
                            line += '@pve'
                        users.append(line)

            if users:
                print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞")
            else:
                print("‚ÑπÔ∏è  –§–∞–π–ª –ø—É—Å—Ç –∏–ª–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")

            return users

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
            print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
            return []

    def _show_users_lists(self) -> str:
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        print("\nüìã –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:")
        print("-" * 50)

        try:
            lists = self._get_users_lists()
            if not lists:
                print("‚ÑπÔ∏è  –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Å–ø–∏—Å–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            else:
                for i, list_name in enumerate(lists, 1):
                    users = self._load_users_list(list_name)
                    num_users = len(users)
                    print(f"{i}. {list_name} ({num_users} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)")

                    # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–≤—å—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                    if num_users > 0:
                        preview_users = users[:3]  # –ü–æ–∫–∞–∑–∞—Ç—å –ø–µ—Ä–≤—ã—Ö 3
                        preview = ", ".join(preview_users)
                        if num_users > 3:
                            preview += f" ... –∏ –µ—â–µ {num_users - 3}"
                        print(f"   üë§ {preview}")

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Å–ø–∏—Å–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
        return "repeat"

    def _delete_users_list(self) -> str:
        """–£–¥–∞–ª–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        print("\nüóëÔ∏è  –£–¥–∞–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        print("-" * 40)

        try:
            lists = self._get_users_lists()
            if not lists:
                print("‚ÑπÔ∏è  –ù–µ—Ç —Å–ø–∏—Å–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
                return "repeat"

            print("–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ø–∏—Å–∫–∏:")
            for i, list_name in enumerate(lists, 1):
                users = self._load_users_list(list_name)
                print(f"  [{i}] {list_name} ({len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)")

            while True:
                choice_input = input(f"–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (1-{len(lists)}) –∏–ª–∏ 0 –¥–ª—è –æ—Ç–º–µ–Ω—ã: ").strip()
                if choice_input == "0":
                    return "repeat"
                try:
                    choice = int(choice_input) - 1
                    if 0 <= choice < len(lists):
                        break
                    else:
                        print(f"‚ùå –í—ã–±–µ—Ä–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ {len(lists)}")
                except ValueError:
                    print("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ!")

            list_name = lists[choice]
            confirm = input(f"–£–¥–∞–ª–∏—Ç—å —Å–ø–∏—Å–æ–∫ '{list_name}'? (y/N): ").strip().lower()

            if confirm == 'y':
                if self._delete_users_list_file(list_name):
                    print(f"‚úÖ –°–ø–∏—Å–æ–∫ '{list_name}' —É–¥–∞–ª–µ–Ω")
                    self.logger.info(f"–£–¥–∞–ª–µ–Ω —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π '{list_name}'")
                    return "success"
                else:
                    print("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
                    return "error"
            else:
                print("‚ÑπÔ∏è  –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
                return "repeat"

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            return "error"

    def _validate_users_list(self, users: List[str]) -> bool:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        if not users:
            print("‚ùå –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
            return False

        invalid_users = []
        seen_users = set()

        for user in users:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞
            if '@' not in user:
                invalid_users.append(user)
                continue

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
            if user.lower() in (u.lower() for u in seen_users):
                print(f"‚ö†Ô∏è  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{user}' —É–∂–µ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ")
                invalid_users.append(user)
                continue

            seen_users.add(user)

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –¥–æ–º–µ–Ω–∞
            username, domain = user.split('@', 1)
            if not username or not domain:
                invalid_users.append(user)
                continue

        if invalid_users:
            print(f"‚ùå –ù–∞–π–¥–µ–Ω—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {', '.join(invalid_users)}")
            return False

        return True

    def _save_users_list(self, list_name: str, users: List[str]) -> bool:
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        try:
            config = {'users': users}
            file_path = os.path.join(self.CONFIG_DIR, f"users_{list_name}.yml")
            return self._save_yaml_file(file_path, config)
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π {list_name}: {e}")
            return False

    def _load_users_list(self, list_name: str) -> List[str]:
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        try:
            file_path = os.path.join(self.CONFIG_DIR, f"users_{list_name}.yml")
            config = self._load_yaml_file(file_path)
            if config and 'users' in config:
                return config['users']
            return []
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π {list_name}: {e}")
            return []

    def _get_users_lists(self) -> List[str]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ø–∏—Å–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        try:
            if not os.path.exists(self.CONFIG_DIR):
                return []

            lists = []
            for file in os.listdir(self.CONFIG_DIR):
                if file.startswith('users_') and file.endswith('.yml'):
                    list_name = file[6:-4]  # –£–±—Ä–∞—Ç—å –ø—Ä–µ—Ñ–∏–∫—Å 'users_' –∏ —Å—É—Ñ—Ñ–∏–∫—Å '.yml'
                    lists.append(list_name)
            return sorted(lists)
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
            return []

    def _list_exists(self, list_name: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞"""
        file_path = os.path.join(self.CONFIG_DIR, f"users_{list_name}.yml")
        return os.path.exists(file_path)

    def _delete_users_list_file(self, list_name: str) -> bool:
        """–£–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        try:
            file_path = os.path.join(self.CONFIG_DIR, f"users_{list_name}.yml")
            if os.path.exists(file_path):
                os.remove(file_path)
                return True
            return False
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π {list_name}: {e}")
            return False

    def _load_yaml_file(self, file_path: str) -> Optional[Dict[str, Any]]:
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å YAML —Ñ–∞–π–ª"""
        try:
            if not os.path.exists(file_path):
                return None

            with open(file_path, 'r', encoding='utf-8') as file:
                content = file.read()
                if not content.strip():
                    return None

                data = yaml_module.safe_load(content)
                return data if data is not None else None

        except yaml_module.YAMLError as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ YAML —Ñ–∞–π–ª–∞ {file_path}: {e}")
            return None
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {file_path}: {e}")
            return None

    def _show_creation_preview(self, list_name: str, users: List[str]) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–≤—å—é –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        print(f"\nüìã –ü—Ä–µ–≤—å—é —Å–ø–∏—Å–∫–∞ '{list_name}' ({len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π):")
        print("-" * 50)

        # –ü–æ–∫–∞–∑–∞—Ç—å –ø–µ—Ä–≤—ã—Ö 5 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        max_preview = min(5, len(users))
        for i, user in enumerate(users[:max_preview], 1):
            print(f"  {i}. {user}")

        if len(users) > max_preview:
            print(f"  ... –∏ –µ—â–µ {len(users) - max_preview} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")

        print("-" * 50)

    def _show_import_success_message(self, list_name: str, users: List[str]) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –∏–º–ø–æ—Ä—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        print(f"\n‚úÖ –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π '{list_name}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")
        print("=" * 60)
        print(f"üìä –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}")
        print("\nüë• –°–ø–∏—Å–æ–∫ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:")
        print("-" * 40)

        # –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –Ω—É–º–µ—Ä–∞—Ü–∏–µ–π
        for i, user in enumerate(users, 1):
            print(f"  {i:2d}. {user}")

        print("-" * 40)
        input("\n–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ Enter...")

    def _save_yaml_file(self, file_path: str, data: Dict[str, Any]) -> bool:
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ YAML —Ñ–∞–π–ª"""
        try:
            os.makedirs(os.path.dirname(file_path), exist_ok=True)

            with open(file_path, 'w', encoding='utf-8') as file:
                yaml_module.dump(
                    data,
                    file,
                    default_flow_style=False,
                    allow_unicode=True
                )

            return True

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {file_path}: {e}")
            return False
