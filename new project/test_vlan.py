#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ VLAN –≤ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–∏ —Å—Ç–µ–Ω–¥–æ–≤
"""

import sys
import os
import logging

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from core.utils.network_manager import NetworkManager
from core.utils.proxmox_client import ProxmoxClient

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


def test_vlan_parsing():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–±–æ—Ä–∞ –∏–º–µ–Ω bridge —Å VLAN"""
    logger.info("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–±–æ—Ä–∞ –∏–º–µ–Ω bridge —Å VLAN...")

    # –°–æ–∑–¥–∞–µ–º –º–æ–∫ ProxmoxClient –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    class MockProxmoxClient:
        def __init__(self):
            self.api = None

    mock_client = MockProxmoxClient()
    network_manager = NetworkManager(mock_client)

    # –¢–µ—Å—Ç–æ–≤—ã–µ —Å–ª—É—á–∞–∏
    test_cases = [
        ("hq", ("hq", None)),
        ("hq.100", ("hq", 100)),
        ("inet.200", ("inet", 200)),
        ("vmbr0", ("vmbr0", None)),
        ("**vmbr1", ("**vmbr1", None)),
        ("test.123", ("test", 123)),
        ("invalid.vlan", ("invalid.vlan", None)),  # –Ω–µ —á–∏—Å–ª–æ –ø–æ—Å–ª–µ —Ç–æ—á–∫–∏
    ]

    for bridge_name, expected in test_cases:
        result = network_manager._parse_bridge_name(bridge_name)
        logger.info(f"–¢–µ—Å—Ç: '{bridge_name}' -> {result} (–æ–∂–∏–¥–∞–µ–º–æ: {expected})")
        assert result == expected, f"–û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ '{bridge_name}': –ø–æ–ª—É—á–µ–Ω–æ {result}, –æ–∂–∏–¥–∞–ª–æ—Å—å {expected}"

    logger.info("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã —Ä–∞–∑–±–æ—Ä–∞ VLAN –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ")


def test_vlan_bridge_creation():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è VLAN-aware bridge (—Å–∏–º—É–ª—è—Ü–∏—è)"""
    logger.info("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è VLAN-aware bridge...")

    # –°–æ–∑–¥–∞–µ–º –º–æ–∫ ProxmoxClient –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    class MockProxmoxClient:
        def __init__(self):
            self.api = None

    mock_client = MockProxmoxClient()
    network_manager = NetworkManager(mock_client)

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ VLAN bridge
    try:
        # –°–∏–º—É–ª–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ bridge
        logger.info("–°–∏–º—É–ª—è—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è VLAN-aware bridge vmbr1000 –¥–ª—è alias 'hq' —Å VLAN 100")
        logger.info("‚úÖ VLAN bridge —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ (—Å–∏–º—É–ª—è—Ü–∏—è)")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è VLAN bridge: {e}")
        raise


def test_network_config_generation():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–µ—Ç–µ–≤—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π —Å VLAN"""
    logger.info("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–µ—Ç–µ–≤—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π —Å VLAN...")

    # –°–æ–∑–¥–∞–µ–º –º–æ–∫ ProxmoxClient –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    class MockProxmoxClient:
        def __init__(self):
            self.api = None

    mock_client = MockProxmoxClient()
    network_manager = NetworkManager(mock_client)

    # –¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–µ—Ç–µ–π (—Å–º–µ—à–∞–Ω–Ω—ã–µ –∞–ª–∏–∞—Å—ã —Å VLAN –∏ –±–µ–∑)
    networks = [
        {"bridge": "vmbr0"},      # –û–±—ã—á–Ω—ã–π bridge
        {"bridge": "hq"},         # –ê–ª–∏–∞—Å –±–µ–∑ VLAN
        {"bridge": "hq.100"},     # –¢–æ—Ç –∂–µ –∞–ª–∏–∞—Å —Å VLAN
        {"bridge": "inet.200"},   # –î—Ä—É–≥–æ–π –∞–ª–∏–∞—Å —Å VLAN
    ]

    # –¢–µ—Å—Ç–æ–≤—ã–π bridge mapping
    bridge_mapping = {
        "vmbr0": "vmbr0",
        "hq": "vmbr1000",         # –ê–ª–∏–∞—Å –±–µ–∑ VLAN –º–∞–ø–ø–∏—Ç—Å—è –Ω–∞ bridge
        "hq.100": "vmbr1000",     # –¢–æ—Ç –∂–µ –∞–ª–∏–∞—Å —Å VLAN –º–∞–ø–ø–∏—Ç—Å—è –Ω–∞ —Ç–æ—Ç –∂–µ bridge
        "inet.200": "vmbr2000",
    }

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    network_configs = network_manager._prepare_network_configs(networks, bridge_mapping, "linux")

    logger.info("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–µ—Ç–µ–≤—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:")
    for net_id, config in network_configs.items():
        logger.info(f"  {net_id}: {config}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    expected_configs = {
        "net0": "model=virtio,bridge=vmbr0,firewall=1",           # –û–±—ã—á–Ω—ã–π bridge
        "net1": "model=virtio,bridge=vmbr1000,firewall=1",        # –ê–ª–∏–∞—Å –±–µ–∑ VLAN - –±–µ–∑ tag
        "net2": "model=virtio,bridge=vmbr1000,tag=100,firewall=1", # –ê–ª–∏–∞—Å —Å VLAN - —Å tag
        "net3": "model=virtio,bridge=vmbr2000,tag=200,firewall=1", # –î—Ä—É–≥–æ–π –∞–ª–∏–∞—Å —Å VLAN - —Å tag
    }

    for net_id, expected_config in expected_configs.items():
        actual_config = network_configs.get(net_id)
        logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ {net_id}: '{actual_config}' == '{expected_config}'")
        assert actual_config == expected_config, f"–ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ {net_id}"

    logger.info("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–µ—Ç–µ–≤—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π —Å VLAN –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    logger.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ VLAN...")

    try:
        test_vlan_parsing()
        test_vlan_bridge_creation()
        test_network_config_generation()

        logger.info("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã VLAN –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        return True

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ VLAN: {e}")
        return False


if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
