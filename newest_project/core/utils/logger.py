#!/usr/bin/env python3
"""
Logger - –º–æ–¥—É–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è newest_project

–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π
—Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö –º–∞—à–∏–Ω —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏.
"""

import logging
import logging.handlers
import sys
from typing import Optional
from pathlib import Path


class Logger:
    """
    –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è VM

    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç:
    - –†–∞–∑–ª–∏—á–Ω—ã–µ —É—Ä–æ–≤–Ω–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (DEBUG, INFO, WARNING, ERROR, CRITICAL)
    - –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ñ–∞–π–ª –∏ –∫–æ–Ω—Å–æ–ª—å –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
    - –†–æ—Ç–∞—Ü–∏—é –ª–æ–≥-—Ñ–∞–π–ª–æ–≤
    - –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
    """

    def __init__(self, name: str = "deploy-stand", log_level: str = "INFO"):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è

        Args:
            name: –ò–º—è –ª–æ–≥–≥–µ—Ä–∞ (–æ–±—ã—á–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è)
            log_level: –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (DEBUG, INFO, WARNING, ERROR, CRITICAL)
        """
        self.name = name
        self.log_level = getattr(logging, log_level.upper(), logging.INFO)
        self.logger = None
        self.log_file = None

        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        self._ensure_log_directory()

    def _ensure_log_directory(self) -> None:
        """–°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –ª–æ–≥-—Ñ–∞–π–ª–æ–≤"""
        log_dir = Path("logs")
        log_dir.mkdir(exist_ok=True)

    def setup_logging(self, log_to_file: bool = True, log_to_console: bool = True) -> logging.Logger:
        """
        –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è

        Args:
            log_to_file: –í–∫–ª—é—á–∏—Ç—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ñ–∞–π–ª
            log_to_console: –í–∫–ª—é—á–∏—Ç—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –∫–æ–Ω—Å–æ–ª—å

        Returns:
            –ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ª–æ–≥–≥–µ—Ä–∞
        """
        # –°–æ–∑–¥–∞–Ω–∏–µ –ª–æ–≥–≥–µ—Ä–∞
        self.logger = logging.getLogger(self.name)
        self.logger.setLevel(self.log_level)

        # –£–±–∏—Ä–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
        self.logger.handlers.clear()

        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
        formatter = logging.Formatter(
            fmt='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
            datefmt='%Y-%m-%d %H:%M:%S'
        )

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
        if log_to_console:
            console_handler = logging.StreamHandler(sys.stdout)
            console_handler.setLevel(self.log_level)
            console_handler.setFormatter(formatter)
            self.logger.addHandler(console_handler)

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ñ–∞–π–ª–∞ —Å —Ä–æ—Ç–∞—Ü–∏–µ–π
        if log_to_file:
            self.log_file = Path("logs") / f"{self.name}.log"
            file_handler = logging.handlers.RotatingFileHandler(
                self.log_file,
                maxBytes=10*1024*1024,  # 10 MB
                backupCount=5
            )
            file_handler.setLevel(self.log_level)
            file_handler.setFormatter(formatter)
            self.logger.addHandler(file_handler)

        return self.logger

    def get_logger(self) -> logging.Logger:
        """
        –ü–æ–ª—É—á–∏—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä –ª–æ–≥–≥–µ—Ä–∞

        Returns:
            –≠–∫–∑–µ–º–ø–ª—è—Ä –ª–æ–≥–≥–µ—Ä–∞ –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω
        """
        return self.logger

    def log_deployment_start(self, config_name: str, user_count: int) -> None:
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—á–∞–ª–∞ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è"""
        if self.logger:
            self.logger.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ —Å—Ç–µ–Ω–¥–æ–≤")
            self.logger.info(f"üìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {config_name}")
            self.logger.info(f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {user_count}")

    def log_deployment_success(self, created_vms: int, duration: float) -> None:
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è"""
        if self.logger:
            self.logger.info("‚úÖ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
            self.logger.info(f"üñ•Ô∏è  –°–æ–∑–¥–∞–Ω–æ VM: {created_vms}")
            self.logger.info(f"‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {duration:.2f} —Å–µ–∫")

    def log_deployment_error(self, error: str, details: Optional[str] = None) -> None:
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è"""
        if self.logger:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è: {error}")
            if details:
                self.logger.error(f"üìù –î–µ—Ç–∞–ª–∏: {details}")

    def log_connection_attempt(self, host: str, user: str) -> None:
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ø—ã—Ç–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        if self.logger:
            self.logger.info(f"üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ {host} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user}")

    def log_connection_success(self, host: str, version: str) -> None:
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        if self.logger:
            self.logger.info(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {host}")
            self.logger.info(f"üì¶ –í–µ—Ä—Å–∏—è Proxmox: {version}")

    def log_connection_error(self, host: str, error: str) -> None:
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        if self.logger:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ {host}: {error}")

    def log_vm_creation(self, vm_name: str, node: str, vmid: int) -> None:
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è VM"""
        if self.logger:
            self.logger.info(f"üñ•Ô∏è  –°–æ–∑–¥–∞–Ω–∏–µ VM: {vm_name} (ID: {vmid}) –Ω–∞ –Ω–æ–¥–µ {node}")

    def log_network_setup(self, vm_name: str, bridge: str, vlan: Optional[int] = None) -> None:
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ç–∏"""
        if self.logger:
            if vlan:
                self.logger.info(f"üåê –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Ç–∏: {vm_name} -> {bridge} (VLAN {vlan})")
            else:
                self.logger.info(f"üåê –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Ç–∏: {vm_name} -> {bridge}")

    def log_bridge_creation(self, bridge: str, alias: str, vlan_aware: bool = False) -> None:
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è bridge"""
        if self.logger:
            if vlan_aware:
                self.logger.info(f"üåâ –°–æ–∑–¥–∞–Ω VLAN-aware bridge: {bridge} –¥–ª—è –∞–ª–∏–∞—Å–∞ {alias}")
            else:
                self.logger.info(f"üåâ –°–æ–∑–¥–∞–Ω bridge: {bridge} –¥–ª—è –∞–ª–∏–∞—Å–∞ {alias}")

    def log_cache_operation(self, operation: str, key: str, success: bool = True) -> None:
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π —Å –∫–µ—à–µ–º"""
        if self.logger:
            if success:
                self.logger.debug(f"üíæ –ö–µ—à {operation}: {key}")
            else:
                self.logger.warning(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –∫–µ—à–∞ {operation}: {key}")

    def log_validation_error(self, field: str, value: str, expected: str) -> None:
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
        if self.logger:
            self.logger.error(f"üîç –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {field} = '{value}', –æ–∂–∏–¥–∞–ª–æ—Å—å: {expected}")

    def log_performance_metric(self, metric: str, value: float, unit: str = "") -> None:
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        if self.logger:
            self.logger.info(f"üìä –ú–µ—Ç—Ä–∏–∫–∞ {metric}: {value}{unit}")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ª–æ–≥–≥–µ—Ä–∞ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
_global_logger = None


def get_logger(name: str = "deploy-stand") -> Logger:
    """
    –ü–æ–ª—É—á–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ª–æ–≥–≥–µ—Ä–∞

    Args:
        name: –ò–º—è –ª–æ–≥–≥–µ—Ä–∞

    Returns:
        –≠–∫–∑–µ–º–ø–ª—è—Ä Logger
    """
    global _global_logger
    if _global_logger is None:
        _global_logger = Logger(name)
    return _global_logger


def setup_global_logging(log_level: str = "INFO") -> logging.Logger:
    """
    –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è

    Args:
        log_level: –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è

    Returns:
        –ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –ª–æ–≥–≥–µ—Ä
    """
    global _global_logger
    if _global_logger is None:
        _global_logger = Logger(log_level=log_level)
    return _global_logger.setup_logging()


# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–≥–µ—Ä–∞
    logger = Logger("test-app", "DEBUG")
    logger.setup_logging()

    # –¢–µ—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    logger.log_deployment_start("test-config", 5)
    logger.log_connection_attempt("192.168.1.100:8006", "root@pam")
    logger.log_vm_creation("test-vm", "pve1", 100)
    logger.log_network_setup("test-vm", "vmbr0", 100)
    logger.log_deployment_success(3, 45.2)

    print("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–≥–µ—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª logs/test-app.log")
