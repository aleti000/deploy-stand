#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

–†—É—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ConfigManager –∏ UserManager –¥–ª—è newest_project
"""

import sys
import os
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from core.utils.logger import Logger
from core.utils.validator import Validator
from core.utils.cache import Cache
from core.modules.config_manager import ConfigManager
from core.modules.user_manager import UserManager


def test_config_manager():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ConfigManager"""
    print("üìã –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ConfigManager...")

    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        logger = Logger("test-config-manager")
        validator = Validator()
        cache = Cache()

        config_manager = ConfigManager(
            config_dir="data/test_configs",
            logger=logger,
            validator=validator,
            cache=cache
        )

        print("  ‚úÖ ConfigManager —Å–æ–∑–¥–∞–Ω")

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–∞—Ö
        config_info = config_manager.get_config_info()
        print(f"  üìä –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã: {len(config_info)}")

        for config_type, info in config_info.items():
            status = "—Å—É—â–µ—Å—Ç–≤—É–µ—Ç" if info['exists'] else "–Ω–µ –Ω–∞–π–¥–µ–Ω"
            print(f"    - {config_type}: {status}")

        # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
        print("\n  üìÑ –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è...")
        deployment_config = config_manager.load_deployment_config()

        if deployment_config:
            machines_count = len(deployment_config.get('machines', []))
            print(f"  ‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞: {machines_count} –º–∞—à–∏–Ω")
        else:
            print("  ‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è")

        # –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        print("\n  üë• –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
        users = config_manager.load_users_config()

        if users:
            print(f"  ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            print(f"    –ü–µ—Ä–≤—ã–µ 3: {users[:3]}")
        else:
            print("  ‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")

        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        print("\n  üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
        if deployment_config:
            validation_result = config_manager.validate_config_file("data/test_configs/deployment_config.yml")
            print(f"  –í–∞–ª–∏–¥–∞—Ü–∏—è: {'—É—Å–ø–µ—à–Ω–∞' if validation_result['valid'] else '–æ—à–∏–±–∫–∏'}")

        # –û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        cleared = config_manager.clear_config_cache()
        print(f"  üíæ –û—á–∏—â–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∫–µ—à–∞: {cleared}")

        return True

    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ConfigManager: {e}")
        return False


def test_user_manager():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ UserManager"""
    print("\nüë• –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ UserManager...")

    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        logger = Logger("test-user-manager")
        validator = Validator()
        cache = Cache()

        user_manager = UserManager(
            logger=logger,
            validator=validator,
            cache=cache
        )

        print("  ‚úÖ UserManager —Å–æ–∑–¥–∞–Ω")

        # –¢–µ—Å—Ç–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
        test_users = [
            'student1@pve',
            'student2@pve',
            'admin@pam',
            'user@realm$subuser',
            'test@domain'
        ]

        print(f"\n  üìã –¢–µ—Å—Ç–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {len(test_users)}")
        for user in test_users:
            print(f"    - {user}")

        # –ü–∞—Ä—Å–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        print("\n  üîç –ü–∞—Ä—Å–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:")
        for user in test_users:
            parsed = user_manager.parse_user(user)
            if parsed:
                print(f"    {user} -> realm: {parsed['realm']}, username: {parsed['username']}")
            else:
                print(f"    {user} -> –æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞")

        # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –ø—É–ª–∞–º
        print("\n  üìä –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –ø—É–ª–∞–º:")
        pools = user_manager.group_users_by_pool(test_users)

        for pool, pool_users in pools.items():
            print(f"    –ü—É–ª '{pool}': {len(pool_users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            for user in pool_users:
                print(f"      - {user}")

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        print("\n  ‚ö° –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:")
        base_user = "student@pve"
        variants = user_manager.generate_user_variants(base_user, 3)

        print(f"    –ë–∞–∑–æ–≤—ã–π: {base_user}")
        for variant in variants:
            print(f"    –í–∞—Ä–∏–∞–Ω—Ç: {variant}")

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        print("\n  üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:")
        stats = user_manager.get_user_statistics(test_users)

        print(f"    –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total']}")
        print(f"    –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø—É–ª–æ–≤: {stats['unique_pools']}")
        print(f"    –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö realm'–æ–≤: {stats['unique_realms']}")

        for realm, count in stats['realms'].items():
            print(f"    Realm '{realm}': {count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")

        # –ü–æ–∏—Å–∫ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
        print("\n  üîç –ü–æ–∏—Å–∫ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤:")
        users_with_duplicates = test_users + ['student1@pve', 'admin@pam']
        duplicates = user_manager.find_duplicate_users(users_with_duplicates)

        if duplicates:
            print(f"    –ù–∞–π–¥–µ–Ω–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: {len(duplicates)}")
            for duplicate in duplicates:
                print(f"      - {duplicate}")
        else:
            print("    –î—É–±–ª–∏–∫–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        print("\n  ‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:")
        validation_result = user_manager.validate_user_list(test_users)

        print(f"    –í–∞–ª–∏–¥–µ–Ω: {validation_result['valid']}")
        print(f"    –î—É–±–ª–∏–∫–∞—Ç–æ–≤: {validation_result['duplicates_count']}")

        return True

    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è UserManager: {e}")
        return False


def test_yaml_config_operations():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π —Å YAML –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π"""
    print("\nüìÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π —Å YAML...")

    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
        test_config = {
            'machines': [
                {
                    'name': 'test-pc',
                    'device_type': 'linux',
                    'template_node': 'pve1',
                    'template_vmid': 100,
                    'networks': [
                        {'bridge': 'vmbr0'},
                        {'bridge': 'hq.100'}
                    ]
                }
            ]
        }

        test_users = [
            'user1@pve',
            'user2@pve',
            'admin@pam'
        ]

        # –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        config_dir = Path("data/test_yaml")
        config_dir.mkdir(parents=True, exist_ok=True)

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        config_file = config_dir / "test_deployment.yml"
        users_file = config_dir / "test_users.yml"

        import yaml
        with open(config_file, 'w', encoding='utf-8') as f:
            yaml.dump(test_config, f, default_flow_style=False, allow_unicode=True, indent=2)

        with open(users_file, 'w', encoding='utf-8') as f:
            yaml.dump({'users': test_users}, f, default_flow_style=False, allow_unicode=True, indent=2)

        print(f"  ‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {config_file}")
        print(f"  ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {users_file}")

        # –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞
        with open(config_file, 'r', encoding='utf-8') as f:
            loaded_config = yaml.safe_load(f)

        with open(users_file, 'r', encoding='utf-8') as f:
            loaded_users_data = yaml.safe_load(f)

        loaded_users = loaded_users_data.get('users', []) if loaded_users_data else []

        print(f"  ‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞: {len(loaded_config.get('machines', []))} –º–∞—à–∏–Ω")
        print(f"  ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: {len(loaded_users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–¥–µ–Ω—Ç–∏—á–Ω–æ—Å—Ç–∏
        config_match = loaded_config == test_config
        users_match = loaded_users == test_users

        print(f"  üîç –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ–≤–ø–∞–¥–∞–µ—Ç: {config_match}")
        print(f"  üîç –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–æ–≤–ø–∞–¥–∞—é—Ç: {users_match}")

        return True

    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è YAML: {e}")
        return False


def test_integration_config_users():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ ConfigManager –∏ UserManager"""
    print("\nüîó –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ ConfigManager –∏ UserManager...")

    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
        logger = Logger("test-integration")
        validator = Validator()
        cache = Cache()

        config_manager = ConfigManager(
            config_dir="data/test_integration",
            logger=logger,
            validator=validator,
            cache=cache
        )

        user_manager = UserManager(
            logger=logger,
            validator=validator,
            cache=cache
        )

        print("  ‚úÖ –ú–µ–Ω–µ–¥–∂–µ—Ä—ã —Å–æ–∑–¥–∞–Ω—ã")

        # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        config = config_manager.load_deployment_config()
        users = config_manager.load_users_config()

        if config and users:
            print(f"  ‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ: {len(config.get('machines', []))} –º–∞—à–∏–Ω, {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")

            # –ê–Ω–∞–ª–∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            stats = user_manager.get_user_statistics(users)
            print(f"  üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total']} –≤—Å–µ–≥–æ, {stats['unique_pools']} –ø—É–ª–æ–≤")

            # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            pools = user_manager.group_users_by_pool(users)
            print(f"  üìã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ –ø—É–ª–∞–º: {list(pools.keys())}")

            # –í–∞–ª–∏–¥–∞—Ü–∏—è —á–µ—Ä–µ–∑ UserManager
            validation = user_manager.validate_user_list(users)
            print(f"  ‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {'—É—Å–ø–µ—à–Ω–∞' if validation['valid'] else '–æ—à–∏–±–∫–∏'}")

        else:
            print("  ‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")

        return True

    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {e}")
        return False


def test_cache_integration_config():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –∫–µ—à–µ–º"""
    print("\nüíæ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –∫–µ—à–µ–º...")

    try:
        cache = Cache()

        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        config_key = "test_deployment_config"
        test_config = {'machines': [{'name': 'test', 'device_type': 'linux'}]}

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –∫–µ—à
        cache.set(config_key, test_config, ttl=60)
        print("  ‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –∫–µ—à")

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∑ –∫–µ—à–∞
        cached_config = cache.get(config_key)
        if cached_config:
            print(f"  ‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞ –∏–∑ –∫–µ—à–∞: {len(cached_config.get('machines', []))} –º–∞—à–∏–Ω")
        else:
            print("  ‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –∫–µ—à–µ")

        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users_key = "test_users"
        test_users = ['user1@pve', 'user2@pve']

        cache.set(users_key, test_users, ttl=60)
        cached_users = cache.get(users_key)

        if cached_users:
            print(f"  ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ–ª—É—á–µ–Ω—ã –∏–∑ –∫–µ—à–∞: {len(cached_users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        else:
            print("  ‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –∫–µ—à–µ")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–µ—à–∞
        stats = cache.get_stats()
        print(f"  üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–µ—à–∞: {stats['hits']} hits, {stats['misses']} misses")

        return True

    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–µ—à–∞: {e}")
        return False


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    print("=" * 70)

    try:
        # –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        Path("data").mkdir(exist_ok=True)
        Path("logs").mkdir(exist_ok=True)

        # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
        success = True

        success &= test_config_manager()
        success &= test_user_manager()
        success &= test_yaml_config_operations()
        success &= test_integration_config_users()
        success &= test_cache_integration_config()

        print("\n" + "=" * 70)
        if success:
            print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        else:
            print("‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏")

        print("üìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
        print("  - ConfigManager: —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ")
        print("  - UserManager: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Ä–∞–±–æ—Ç–∞–µ—Ç")
        print("  - YAML –æ–ø–µ—Ä–∞—Ü–∏–∏: —á—Ç–µ–Ω–∏–µ/–∑–∞–ø–∏—Å—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π")
        print("  - –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è: –º–æ–¥—É–ª–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –≤–º–µ—Å—Ç–µ")
        print("  - –ö–µ—à: –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –∞–∫—Ç–∏–≤–Ω–æ–µ")

        # –ü–∞—É–∑–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        input("\n‚è∏Ô∏è  –ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...")

    except KeyboardInterrupt:
        print("\n\nüëã –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        raise


if __name__ == "__main__":
    main()
