#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª–µ–π —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è

–†—É—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ TemplateManager, VMManager –∏ DeploymentManager –¥–ª—è newest_project
"""

import sys
import os
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from core.utils.logger import Logger
from core.utils.validator import Validator
from core.utils.cache import Cache
from core.modules.template_manager import TemplateManager, TemplateInfo
from core.modules.vm_manager import VMManager, VMConfig, VMOperationResult
from core.modules.deployment_manager import DeploymentManager, DeploymentConfig, DeploymentResult


def test_template_manager():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ TemplateManager"""
    print("üìã –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ TemplateManager...")

    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —à–∞–±–ª–æ–Ω–æ–≤ (–±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ Proxmox)
        logger = Logger("test-template-manager")
        validator = Validator()
        cache = Cache()

        # –°–æ–∑–¥–∞–µ–º –º–æ–∫-–∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        class MockProxmoxClient:
            def get_nodes(self):
                return ['pve1', 'pve2']

            def api_call(self, *args, **kwargs):
                # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è API –≤—ã–∑–æ–≤–æ–≤
                if args and 'qemu' in args and 'get' in args:
                    return [
                        {'vmid': 100, 'name': 'linux-template', 'template': 1, 'status': 'stopped'},
                        {'vmid': 101, 'name': 'router-template', 'template': 1, 'status': 'stopped'},
                        {'vmid': 200, 'name': 'user-vm', 'template': 0, 'status': 'running'}
                    ]
                return {}

        mock_client = MockProxmoxClient()

        template_manager = TemplateManager(
            proxmox_client=mock_client,
            logger=logger,
            validator=validator,
            cache=cache
        )

        print("  ‚úÖ TemplateManager —Å–æ–∑–¥–∞–Ω")

        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–æ–≤
        print("\n  üìÑ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤:")
        templates = template_manager.get_templates()

        print(f"    –ù–∞–π–¥–µ–Ω–æ —à–∞–±–ª–æ–Ω–æ–≤: {len(templates)}")
        for template in templates:
            print(f"    - {template}")

        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤ –ø–æ –∏–º–µ–Ω–∏
        print("\n  üîç –ü–æ–∏—Å–∫ —à–∞–±–ª–æ–Ω–æ–≤ –ø–æ –∏–º–µ–Ω–∏:")
        linux_templates = template_manager.find_templates_by_name("linux")

        print(f"    –®–∞–±–ª–æ–Ω—ã —Å 'linux' –≤ –∏–º–µ–Ω–∏: {len(linux_templates)}")
        for template in linux_templates:
            print(f"      - {template.name}")

        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞
        print("\n  üéØ –ü–æ–∏—Å–∫ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞:")
        requirements = {
            'min_memory': 1024,
            'min_cpus': 1,
            'memory': 2048,
            'cpus': 2
        }

        optimal_template = template_manager.find_optimal_template(requirements)

        if optimal_template:
            print(f"    –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —à–∞–±–ª–æ–Ω: {optimal_template.name}")
            print(f"      –ü–∞–º—è—Ç—å: {optimal_template.memory}MB, CPU: {optimal_template.cpus}")
        else:
            print("    –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —à–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")

        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —à–∞–±–ª–æ–Ω–æ–≤
        print("\n  üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤:")
        stats = template_manager.get_template_statistics()

        print(f"    –í—Å–µ–≥–æ —à–∞–±–ª–æ–Ω–æ–≤: {stats['total_templates']}")
        print(f"    –û–±—â–∞—è –ø–∞–º—è—Ç—å: {stats['total_memory']}MB")
        print(f"    –û–±—â–µ–µ CPU: {stats['total_cpus']}")
        print(f"    –ù–æ–¥—ã: {list(stats['nodes'].keys())}")

        return True

    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è TemplateManager: {e}")
        return False


def test_vm_manager():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ VMManager"""
    print("\nüñ•Ô∏è  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ VMManager...")

    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ VM (–±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ Proxmox)
        logger = Logger("test-vm-manager")
        validator = Validator()
        cache = Cache()

        # –°–æ–∑–¥–∞–µ–º –º–æ–∫-–∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        class MockProxmoxClient:
            def clone_vm(self, *args, **kwargs):
                return 1001  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π VMID

            def delete_vm(self, *args, **kwargs):
                return True

            def start_vm(self, *args, **kwargs):
                return True

            def stop_vm(self, *args, **kwargs):
                return True

            def api_call(self, *args, **kwargs):
                # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è API –≤—ã–∑–æ–≤–æ–≤
                return {'vmid': 1001, 'name': 'test-vm', 'status': 'stopped'}

        mock_client = MockProxmoxClient()

        vm_manager = VMManager(
            proxmox_client=mock_client,
            logger=logger,
            validator=validator,
            cache=cache
        )

        print("  ‚úÖ VMManager —Å–æ–∑–¥–∞–Ω")

        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ VM
        print("\n  ‚öôÔ∏è  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ VM:")

        vm_config = VMConfig(
            name="test-user-pc",
            memory=2048,
            cpus=2,
            disk_size=20,
            template_vmid=100,
            template_node="pve1",
            target_node="pve1",
            description="–¢–µ—Å—Ç–æ–≤–∞—è VM"
        )

        print(f"    –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {vm_config.name}")
        print(f"      –ü–∞–º—è—Ç—å: {vm_config.memory}MB, CPU: {vm_config.cpus}")
        print(f"      –®–∞–±–ª–æ–Ω: {vm_config.template_vmid} –Ω–∞ {vm_config.template_node}")

        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        print("\n  ‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:")

        is_valid = vm_manager._validate_vm_config(vm_config)
        print(f"    –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–∞–ª–∏–¥–Ω–∞: {is_valid}")

        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ VM
        print("\n  üìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ VM:")

        # –ú–æ–∫-–¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        mock_vms = [
            {'vmid': 1001, 'name': 'user1-pc', 'status': 'running', 'memory': 2048, 'cpus': 2},
            {'vmid': 1002, 'name': 'user2-pc', 'status': 'stopped', 'memory': 1024, 'cpus': 1}
        ]

        # –ü–æ–¥–º–µ–Ω—è–µ–º –º–µ—Ç–æ–¥ list_vms –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        original_list_vms = vm_manager.list_vms
        vm_manager.list_vms = lambda node=None, include_templates=False: mock_vms

        stats = vm_manager.get_vm_statistics()
        print(f"    –í—Å–µ–≥–æ VM: {stats['total_vms']}")
        print(f"    –ó–∞–ø—É—â–µ–Ω–æ: {stats['running_vms']}")
        print(f"    –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {stats['stopped_vms']}")
        print(f"    –û–±—â–∞—è –ø–∞–º—è—Ç—å: {stats['total_memory']}MB")

        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥
        vm_manager.list_vms = original_list_vms

        return True

    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è VMManager: {e}")
        return False


def test_deployment_manager():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ DeploymentManager"""
    print("\nüöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ DeploymentManager...")

    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è (–±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ Proxmox)
        logger = Logger("test-deployment-manager")
        validator = Validator()
        cache = Cache()

        # –°–æ–∑–¥–∞–µ–º –º–æ–∫-–∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        class MockProxmoxClient:
            def get_nodes(self):
                return ['pve1', 'pve2']

            def clone_vm(self, *args, **kwargs):
                return 1001

            def api_call(self, *args, **kwargs):
                return []

        mock_client = MockProxmoxClient()

        deployment_manager = DeploymentManager(
            proxmox_client=mock_client,
            logger=logger,
            validator=validator,
            cache=cache
        )

        print("  ‚úÖ DeploymentManager —Å–æ–∑–¥–∞–Ω")

        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
        print("\n  ‚öôÔ∏è  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è:")

        deployment_config = DeploymentConfig(
            machines=[
                {
                    'name': 'student-pc',
                    'device_type': 'linux',
                    'template_node': 'pve1',
                    'template_vmid': 100,
                    'memory': 2048,
                    'cpus': 2
                }
            ],
            users=['student1@pve', 'student2@pve'],
            deployment_name='test-deployment',
            description='–¢–µ—Å—Ç–æ–≤–æ–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ'
        )

        print(f"    –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ: {deployment_config.deployment_name}")
        print(f"    –ú–∞—à–∏–Ω: {len(deployment_config.machines)}")
        print(f"    –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(deployment_config.users)}")

        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        print("\n  ‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:")

        is_valid = deployment_manager._validate_deployment_config(deployment_config)
        print(f"    –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–∞–ª–∏–¥–Ω–∞: {is_valid}")

        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è VM –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        print("\n  üñ•Ô∏è  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è VM –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")

        machine_config = deployment_config.machines[0]
        vm_config = deployment_manager._create_vm_config_for_user('student1@pve', machine_config)

        print(f"    VM –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {vm_config.name}")
        print(f"      –¶–µ–ª–µ–≤–∞—è –Ω–æ–¥–∞: {vm_config.target_node}")
        print(f"      –ü—É–ª: {vm_config.pool}")

        return True

    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è DeploymentManager: {e}")
        return False


def test_integration_deployment():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –º–æ–¥—É–ª–µ–π —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è"""
    print("\nüîó –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –º–æ–¥—É–ª–µ–π —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è...")

    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ –≤—Å–µ—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
        logger = Logger("test-integration")
        validator = Validator()
        cache = Cache()

        # –°–æ–∑–¥–∞–µ–º –º–æ–∫-–∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        class MockProxmoxClient:
            def get_nodes(self):
                return ['pve1', 'pve2']

            def clone_vm(self, *args, **kwargs):
                return 1001

            def api_call(self, *args, **kwargs):
                return []

        mock_client = MockProxmoxClient()

        # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä—ã
        template_manager = TemplateManager(mock_client, logger, validator, cache)
        vm_manager = VMManager(mock_client, logger, validator, cache)
        deployment_manager = DeploymentManager(mock_client, logger=logger, validator=validator, cache=cache)

        print("  ‚úÖ –í—Å–µ –º–µ–Ω–µ–¥–∂–µ—Ä—ã —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è —Å–æ–∑–¥–∞–Ω—ã")

        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–≤–º–µ—Å—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã
        print("\n  üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–≤–º–µ—Å—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã:")

        # –ü–æ–ª—É—á–∞–µ–º —à–∞–±–ª–æ–Ω—ã
        templates = template_manager.get_templates()
        print(f"    –î–æ—Å—Ç—É–ø–Ω–æ —à–∞–±–ª–æ–Ω–æ–≤: {len(templates)}")

        # –ü–æ–ª—É—á–∞–µ–º VM
        vms = vm_manager.list_vms()
        print(f"    –°—É—â–µ—Å—Ç–≤—É–µ—Ç VM: {len(vms)}")

        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
        test_config = DeploymentConfig(
            machines=[
                {
                    'name': 'test-pc',
                    'device_type': 'linux',
                    'template_node': 'pve1',
                    'template_vmid': 100
                }
            ],
            users=['testuser@pve'],
            deployment_name='integration-test'
        )

        # –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        is_valid = deployment_manager._validate_deployment_config(test_config)
        print(f"    –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–∞–ª–∏–¥–Ω–∞: {is_valid}")

        return True

    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {e}")
        return False


def test_cache_integration_deployment():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –∫–µ—à–µ–º"""
    print("\nüíæ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –∫–µ—à–µ–º...")

    try:
        cache = Cache()

        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–æ–≤
        templates_key = "test_templates"
        test_templates = [
            {'vmid': 100, 'name': 'linux-template', 'node': 'pve1'},
            {'vmid': 101, 'name': 'router-template', 'node': 'pve1'}
        ]

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –∫–µ—à
        cache.set(templates_key, test_templates, ttl=60)
        print("  ‚úÖ –®–∞–±–ª–æ–Ω—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –∫–µ—à")

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∑ –∫–µ—à–∞
        cached_templates = cache.get(templates_key)
        if cached_templates:
            print(f"  ‚úÖ –®–∞–±–ª–æ–Ω—ã –ø–æ–ª—É—á–µ–Ω—ã –∏–∑ –∫–µ—à–∞: {len(cached_templates)} —à–∞–±–ª–æ–Ω–æ–≤")
        else:
            print("  ‚ùå –®–∞–±–ª–æ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –∫–µ—à–µ")

        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è VM
        vm_key = "test_vm_info"
        test_vm = {
            'vmid': 1001,
            'name': 'test-vm',
            'status': 'running',
            'memory': 2048
        }

        cache.set(vm_key, test_vm, ttl=60)
        cached_vm = cache.get(vm_key)

        if cached_vm:
            print(f"  ‚úÖ VM –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞ –∏–∑ –∫–µ—à–∞: {cached_vm['name']}")
        else:
            print("  ‚ùå VM –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –∫–µ—à–µ")

        return True

    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–µ—à–∞: {e}")
        return False


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª–µ–π —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è")
    print("=" * 55)

    try:
        # –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        Path("data").mkdir(exist_ok=True)
        Path("logs").mkdir(exist_ok=True)

        # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
        success = True

        success &= test_template_manager()
        success &= test_vm_manager()
        success &= test_deployment_manager()
        success &= test_integration_deployment()
        success &= test_cache_integration_deployment()

        print("\n" + "=" * 55)
        if success:
            print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        else:
            print("‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏")

        print("üìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
        print("  - TemplateManager: —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞–º–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ")
        print("  - VMManager: —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ VM —Ä–∞–±–æ—Ç–∞–µ—Ç")
        print("  - DeploymentManager: –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è")
        print("  - –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è: –º–æ–¥—É–ª–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –≤–º–µ—Å—Ç–µ")
        print("  - –ö–µ—à: –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–µ")

        # –ü–∞—É–∑–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        input("\n‚è∏Ô∏è  –ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...")

    except KeyboardInterrupt:
        print("\n\nüëã –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        raise


if __name__ == "__main__":
    main()
