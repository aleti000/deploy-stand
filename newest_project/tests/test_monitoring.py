#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª–µ–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏

–†—É—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ LoadBalancer –∏ MetricsCollector –¥–ª—è newest_project
"""

import sys
import os
import time
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from core.utils.logger import Logger
from core.utils.validator import Validator
from core.utils.cache import Cache
from core.modules.load_balancer import LoadBalancer, BalancingStrategy, NodeLoad, BalancingResult
from core.modules.metrics_collector import MetricsCollector, SystemMetrics, ClusterMetrics, DeploymentMetrics


def test_load_balancer():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ LoadBalancer"""
    print("‚öñÔ∏è  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ LoadBalancer...")

    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤—â–∏–∫–∞ –Ω–∞–≥—Ä—É–∑–∫–∏ (–±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ Proxmox)
        logger = Logger("test-load-balancer")
        validator = Validator()
        cache = Cache()

        # –°–æ–∑–¥–∞–µ–º –º–æ–∫-–∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        class MockProxmoxClient:
            def get_nodes(self):
                return ['pve1', 'pve2', 'pve3']

            def get_node_info(self, node):
                # –ú–æ–∫-–¥–∞–Ω–Ω—ã–µ –æ –Ω–∞–≥—Ä—É–∑–∫–µ –Ω–æ–¥
                mock_data = {
                    'pve1': {'cpu': 30, 'memory': {'used': 4*1024**3, 'total': 8*1024**3}, 'uptime': 3600},
                    'pve2': {'cpu': 70, 'memory': {'used': 6*1024**3, 'total': 8*1024**3}, 'uptime': 7200},
                    'pve3': {'cpu': 45, 'memory': {'used': 2*1024**3, 'total': 8*1024**3}, 'uptime': 1800}
                }

                if node in mock_data:
                    data = mock_data[node]
                    return type('NodeInfo', (), {
                        'node': node,
                        'cpu_usage': data['cpu'],
                        'memory_usage': (data['memory']['used'] / data['memory']['total']) * 100,
                        'memory_total': data['memory']['total'],
                        'uptime': data['uptime']
                    })()
                return None

            def api_call(self, *args, **kwargs):
                # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è API –≤—ã–∑–æ–≤–æ–≤
                return []

        mock_client = MockProxmoxClient()

        load_balancer = LoadBalancer(
            proxmox_client=mock_client,
            logger=logger,
            validator=validator,
            cache=cache
        )

        print("  ‚úÖ LoadBalancer —Å–æ–∑–¥–∞–Ω")

        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏ –Ω–æ–¥
        print("\n  üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–≥—Ä—É–∑–∫–∏ –Ω–æ–¥:")
        node_loads = load_balancer.get_node_loads()

        print(f"    –ù–∞–π–¥–µ–Ω–æ –Ω–æ–¥: {len(node_loads)}")
        for load in node_loads:
            print(f"    {load.node}: CPU {load.cpu_usage}%, –ü–∞–º—è—Ç—å {load.memory_usage:.1f}%")

        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π –Ω–æ–¥—ã
        print("\n  üéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π –Ω–æ–¥—ã:")

        strategies = [
            BalancingStrategy.LEAST_LOADED,
            BalancingStrategy.MEMORY_OPTIMIZED,
            BalancingStrategy.CPU_OPTIMIZED
        ]

        for strategy in strategies:
            selected_node = load_balancer.select_optimal_node(strategy)
            if selected_node:
                print(f"    –°—Ç—Ä–∞—Ç–µ–≥–∏—è {strategy.value}: {selected_node}")
            else:
                print(f"    –°—Ç—Ä–∞—Ç–µ–≥–∏—è {strategy.value}: –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ–¥—Ö–æ–¥—è—â–∞—è –Ω–æ–¥–∞")

        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–µ
        print("\n  üí° –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–µ:")

        vm_requirements = {
            'memory': 2048,
            'cpus': 2,
            'memory_priority': True
        }

        recommendation = load_balancer.get_balancing_recommendation(vm_requirements)

        print(f"    –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: {recommendation.selected_node}")
        print(f"    –°—Ç—Ä–∞—Ç–µ–≥–∏—è: {recommendation.strategy.value}")
        print(f"    –ü—Ä–∏—á–∏–Ω–∞: {recommendation.reason}")

        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏ –∫–ª–∞—Å—Ç–µ—Ä–∞
        print("\n  ‚öñÔ∏è  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏ –∫–ª–∞—Å—Ç–µ—Ä–∞:")

        balance_status = load_balancer.get_cluster_balance_status()

        print(f"    –°—Ç–∞—Ç—É—Å: {balance_status['status']}")
        print(f"    –°—Ä–µ–¥–Ω—è—è –Ω–∞–≥—Ä—É–∑–∫–∞ CPU: {balance_status['cpu_average']}%")
        print(f"    –°—Ä–µ–¥–Ω—è—è –Ω–∞–≥—Ä—É–∑–∫–∞ –ø–∞–º—è—Ç–∏: {balance_status['memory_average']}%")

        if balance_status['overloaded_nodes']:
            print(f"    –ü–µ—Ä–µ–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –Ω–æ–¥—ã: {balance_status['overloaded_nodes']}")

        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –ø–æ –ø–µ—Ä–µ–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–µ
        print("\n  üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –ø–æ –ø–µ—Ä–µ–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–µ:")

        rebalancing = load_balancer.suggest_rebalancing()

        if rebalancing['possible']:
            print(f"    –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: {rebalancing['suggestions_count']}")
            print(f"    –ü–µ—Ä–µ–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –Ω–æ–¥—ã: {rebalancing['overloaded_nodes']}")
            print(f"    –ù–µ–¥–æ–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –Ω–æ–¥—ã: {rebalancing['underloaded_nodes']}")
        else:
            print(f"    –ü–µ—Ä–µ–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è: {rebalancing['reason']}")

        return True

    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è LoadBalancer: {e}")
        return False


def test_metrics_collector():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ MetricsCollector"""
    print("\nüìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ MetricsCollector...")

    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ —Å–±–æ—Ä—â–∏–∫–∞ –º–µ—Ç—Ä–∏–∫ (–±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ Proxmox)
        logger = Logger("test-metrics-collector")
        validator = Validator()
        cache = Cache()

        metrics_collector = MetricsCollector(
            proxmox_client=None,  # –ë–µ–∑ Proxmox –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫
            logger=logger,
            validator=validator,
            cache=cache,
            history_size=10
        )

        print("  ‚úÖ MetricsCollector —Å–æ–∑–¥–∞–Ω")

        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–±–æ—Ä–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫
        print("\n  üíª –°–±–æ—Ä —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫:")

        for i in range(3):
            system_metrics = metrics_collector.collect_system_metrics()
            print(f"    –ò–∑–º–µ—Ä–µ–Ω–∏–µ {i+1}: CPU {system_metrics.cpu_percent:.1f}%, –ü–∞–º—è—Ç—å {system_metrics.memory_percent:.1f}%")
            time.sleep(1)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∏–∑–º–µ—Ä–µ–Ω–∏—è–º–∏

        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –º–µ—Ç—Ä–∏–∫ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
        print("\n  üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –º–µ—Ç—Ä–∏–∫ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è:")

        test_deployments = [
            ("test-deployment-1", 10, 8, 2, 45.5),
            ("test-deployment-2", 5, 5, 0, 23.2),
            ("test-deployment-3", 15, 12, 3, 67.8)
        ]

        for deployment_name, total, created, failed, duration in test_deployments:
            metrics_collector.record_deployment_metrics(deployment_name, total, created, failed, duration)
            print(f"    –ó–∞–ø–∏—Å–∞–Ω–æ: {deployment_name} ({created}/{total} VM –∑–∞ {duration:.1f}—Å)")

        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –º–µ—Ç—Ä–∏–∫
        print("\n  üìà –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –º–µ—Ç—Ä–∏–∫:")

        system_history = metrics_collector.get_system_metrics_history()
        deployment_history = metrics_collector.get_deployment_metrics_history()

        print(f"    –°–∏—Å—Ç–µ–º–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫: {len(system_history)}")
        print(f"    –ú–µ—Ç—Ä–∏–∫ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è: {len(deployment_history)}")

        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–æ–≤
        print("\n  üìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–æ–≤:")

        trends = metrics_collector.analyze_performance_trends()

        if 'error' not in trends:
            print(f"    –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–∞ —Å–∏—Å—Ç–µ–º—ã: {trends['system_trends']['trend_direction']}")
            print(f"    –¢–æ—á–µ–∫ –¥–∞–Ω–Ω—ã—Ö: {trends['data_points']}")
        else:
            print(f"    –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {trends['error']}")

        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–π
        print("\n  üìã –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–π:")

        deployment_stats = metrics_collector.get_deployment_statistics()

        print(f"    –í—Å–µ–≥–æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–π: {deployment_stats['total_deployments']}")
        print(f"    –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {deployment_stats['success_rate_percent']:.1f}%")
        print(f"    –°—Ä–µ–¥–Ω—è—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {deployment_stats['average_duration_seconds']:.1f}—Å")

        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–∫—Å–ø–æ—Ä—Ç–∞ –º–µ—Ç—Ä–∏–∫
        print("\n  üì§ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–∫—Å–ø–æ—Ä—Ç–∞ –º–µ—Ç—Ä–∏–∫:")

        json_export = metrics_collector.export_metrics("json")
        csv_export = metrics_collector.export_metrics("csv")

        print(f"    JSON —ç–∫—Å–ø–æ—Ä—Ç: {len(json_export)} —Å–∏–º–≤–æ–ª–æ–≤")
        print(f"    CSV —ç–∫—Å–ø–æ—Ä—Ç: {len(csv_export)} —Å–∏–º–≤–æ–ª–æ–≤")

        return True

    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è MetricsCollector: {e}")
        return False


def test_balancing_strategies():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏"""
    print("\nüéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏...")

    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ –Ω–∞–≥—Ä—É–∑–∫–µ –Ω–æ–¥
        test_nodes = [
            NodeLoad(node="pve1", cpu_usage=20, memory_usage=30, memory_total=8*1024**3, vm_count=5, uptime=3600),
            NodeLoad(node="pve2", cpu_usage=80, memory_usage=70, memory_total=8*1024**3, vm_count=15, uptime=7200),
            NodeLoad(node="pve3", cpu_usage=50, memory_usage=40, memory_total=8*1024**3, vm_count=8, uptime=1800)
        ]

        print("  ‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –Ω–∞–≥—Ä—É–∑–∫–µ —Å–æ–∑–¥–∞–Ω—ã")

        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
        strategies = [
            BalancingStrategy.LEAST_LOADED,
            BalancingStrategy.MEMORY_OPTIMIZED,
            BalancingStrategy.CPU_OPTIMIZED
        ]

        print("\n  üìä –†–∞—Å—á–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ –¥–ª—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–π:")

        for strategy in strategies:
            print(f"\n    –°—Ç—Ä–∞—Ç–µ–≥–∏—è: {strategy.value}")

            for node in test_nodes:
                score = node.calculate_score(strategy)
                node.score = score
                print(f"      {node.node}: {score:.1f} –±–∞–ª–ª–æ–≤")

            # –í—ã–±–æ—Ä –ª—É—á—à–µ–π –Ω–æ–¥—ã
            best_node = max(test_nodes, key=lambda x: x.score)
            print(f"      –õ—É—á—à–∞—è –Ω–æ–¥–∞: {best_node.node} ({best_node.score:.1f} –±–∞–ª–ª–æ–≤)")

        return True

    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏: {e}")
        return False


def test_metrics_data_structures():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä –¥–∞–Ω–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫"""
    print("\nüìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä –¥–∞–Ω–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫...")

    try:
        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ SystemMetrics
        print("  üíª –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ SystemMetrics:")

        system_metrics = SystemMetrics(
            timestamp=time.time(),
            cpu_percent=45.5,
            memory_percent=67.2,
            memory_used_gb=5.4,
            memory_total_gb=8.0,
            disk_usage_percent=23.1,
            network_io={'bytes_sent': 1000, 'bytes_recv': 2000}
        )

        print(f"    CPU: {system_metrics.cpu_percent}%")
        print(f"    –ü–∞–º—è—Ç—å: {system_metrics.memory_used_gb:.1f}GB / {system_metrics.memory_total_gb:.1f}GB")
        print(f"    –î–∏—Å–∫: {system_metrics.disk_usage_percent}%")
        print(f"    –°–µ—Ç—å: {system_metrics.network_io['bytes_sent']} –±–∞–π—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")

        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ClusterMetrics
        print("\n  ‚òÅÔ∏è  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ClusterMetrics:")

        cluster_metrics = ClusterMetrics(
            timestamp=time.time(),
            total_nodes=3,
            active_nodes=3,
            total_vms=25,
            running_vms=20,
            total_memory_gb=24.0,
            used_memory_gb=16.5,
            total_cpu_cores=12,
            used_cpu_percent=55.0
        )

        print(f"    –ù–æ–¥—ã: {cluster_metrics.active_nodes}/{cluster_metrics.total_nodes}")
        print(f"    VM: {cluster_metrics.running_vms}/{cluster_metrics.total_vms}")
        print(f"    –ü–∞–º—è—Ç—å: {cluster_metrics.used_memory_gb:.1f}GB / {cluster_metrics.total_memory_gb:.1f}GB")
        print(f"    CPU: {cluster_metrics.used_cpu_percent}%")

        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ DeploymentMetrics
        print("\n  üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ DeploymentMetrics:")

        deployment_metrics = DeploymentMetrics(
            timestamp=time.time(),
            deployment_name="test-deployment",
            total_vms_planned=10,
            vms_created=8,
            vms_failed=2,
            duration_seconds=45.5,
            average_creation_time=5.7
        )

        print(f"    –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ: {deployment_metrics.deployment_name}")
        print(f"    –†–µ–∑—É–ª—å—Ç–∞—Ç: {deployment_metrics.vms_created}/{deployment_metrics.total_vms_planned} VM")
        print(f"    –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {deployment_metrics.duration_seconds:.1f}—Å")
        print(f"    –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è: {deployment_metrics.average_creation_time:.1f}—Å")

        return True

    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False


def test_integration_monitoring():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –º–æ–¥—É–ª–µ–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    print("\nüîó –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –º–æ–¥—É–ª–µ–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...")

    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ –≤—Å–µ—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        logger = Logger("test-monitoring-integration")
        validator = Validator()
        cache = Cache()

        # –°–æ–∑–¥–∞–µ–º –º–æ–∫-–∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        class MockProxmoxClient:
            def get_nodes(self):
                return ['pve1', 'pve2']

            def get_node_info(self, node):
                return type('NodeInfo', (), {
                    'node': node,
                    'cpu_usage': 40 if node == 'pve1' else 60,
                    'memory_usage': 50 if node == 'pve1' else 70,
                    'memory_total': 8*1024**3,
                    'uptime': 3600
                })()

            def api_call(self, *args, **kwargs):
                return []

        mock_client = MockProxmoxClient()

        # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä—ã
        load_balancer = LoadBalancer(mock_client, logger, validator, cache)
        metrics_collector = MetricsCollector(mock_client, logger, validator, cache)

        print("  ‚úÖ –í—Å–µ –º–µ–Ω–µ–¥–∂–µ—Ä—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–æ–∑–¥–∞–Ω—ã")

        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–≤–º–µ—Å—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã
        print("\n  üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–≤–º–µ—Å—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã:")

        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–≥—Ä—É–∑–∫—É –Ω–æ–¥
        node_loads = load_balancer.get_node_loads()
        print(f"    –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–æ–¥ –ø–æ–ª—É—á–µ–Ω–∞: {len(node_loads)} –Ω–æ–¥")

        # –°–æ–±–∏—Ä–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –∫–ª–∞—Å—Ç–µ—Ä–∞
        cluster_metrics = metrics_collector.collect_cluster_metrics()
        if cluster_metrics:
            print(f"    –ú–µ—Ç—Ä–∏–∫–∏ –∫–ª–∞—Å—Ç–µ—Ä–∞ —Å–æ–±—Ä–∞–Ω—ã: {cluster_metrics.total_nodes} –Ω–æ–¥, {cluster_metrics.total_vms} VM")

        # –°–æ–±–∏—Ä–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        system_metrics = metrics_collector.collect_system_metrics()
        print(f"    –°–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ —Å–æ–±—Ä–∞–Ω—ã: CPU {system_metrics.cpu_percent:.1f}%, –ü–∞–º—è—Ç—å {system_metrics.memory_percent:.1f}%")

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏
        current_metrics = metrics_collector.get_current_metrics()
        print(f"    –¢–µ–∫—É—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏ –ø–æ–ª—É—á–µ–Ω—ã: {len(current_metrics)} –∫–∞—Ç–µ–≥–æ—Ä–∏–π")

        return True

    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {e}")
        return False


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª–µ–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏")
    print("=" * 65)

    try:
        # –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        Path("data").mkdir(exist_ok=True)
        Path("logs").mkdir(exist_ok=True)

        # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
        success = True

        success &= test_load_balancer()
        success &= test_metrics_collector()
        success &= test_balancing_strategies()
        success &= test_metrics_data_structures()
        success &= test_integration_monitoring()

        print("\n" + "=" * 65)
        if success:
            print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        else:
            print("‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏")

        print("üìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
        print("  - LoadBalancer: –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞ –Ω–∞–≥—Ä—É–∑–∫–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞")
        print("  - MetricsCollector: —Å–±–æ—Ä –º–µ—Ç—Ä–∏–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        print("  - –°—Ç—Ä–∞—Ç–µ–≥–∏–∏ –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏: —Ä–∞—Å—á–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω")
        print("  - –°—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö: –º–µ—Ç—Ä–∏–∫–∏ —Ñ–æ—Ä–º–∏—Ä—É—é—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
        print("  - –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è: –º–æ–¥—É–ª–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –≤–º–µ—Å—Ç–µ")

        # –ü–∞—É–∑–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        input("\n‚è∏Ô∏è  –ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...")

    except KeyboardInterrupt:
        print("\n\nüëã –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        raise


if __name__ == "__main__":
    main()
