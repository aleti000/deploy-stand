#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª–µ–π —Å–µ—Ç–∏

–†—É—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ NetworkManager –∏ BridgeManager –¥–ª—è newest_project
"""

import sys
import os
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from core.utils.logger import Logger
from core.utils.validator import Validator
from core.utils.cache import Cache
from core.modules.network_manager import NetworkManager, BridgeAlias, NetworkConfig
from core.modules.bridge_manager import BridgeManager, BridgeConfig, BridgeInfo


def test_network_manager():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ NetworkManager"""
    print("üåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ NetworkManager...")

    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å–µ—Ç–∏
        logger = Logger("test-network-manager")
        validator = Validator()
        cache = Cache()

        network_manager = NetworkManager(
            logger=logger,
            validator=validator,
            cache=cache
        )

        print("  ‚úÖ NetworkManager —Å–æ–∑–¥–∞–Ω")

        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–±–æ—Ä–∞ –∞–ª–∏–∞—Å–æ–≤
        print("\n  üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–±–æ—Ä–∞ –∞–ª–∏–∞—Å–æ–≤:")

        test_aliases = [
            'vmbr0',
            'hq.100',
            'inet.200',
            'dmz',
            'vlan-bridge.4094'
        ]

        for alias in test_aliases:
            bridge_alias = network_manager.parse_bridge_alias(alias)
            if bridge_alias:
                print(f"    {alias} -> bridge: {bridge_alias.bridge_name}, VLAN: {bridge_alias.vlan_id}")
            else:
                print(f"    {alias} -> –æ—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞")

        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–º–µ–Ω bridge'–µ–π
        print("\n  üèóÔ∏è  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–º–µ–Ω bridge'–µ–π:")

        base_aliases = ['hq', 'inet', 'dmz', 'test']
        for base_alias in base_aliases:
            bridge_name = network_manager.generate_bridge_name(base_alias)
            print(f"    {base_alias} -> {bridge_name}")

        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∞–ª–∏–∞—Å–æ–≤
        print("\n  üîÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∞–ª–∏–∞—Å–æ–≤:")

        networks = ['vmbr0', 'hq.100', 'inet.200', 'dmz']
        user = 'testuser'
        node = 'pve1'

        resolved_bridges = network_manager.resolve_bridge_aliases(networks, user, node)

        print(f"    –ò—Å—Ö–æ–¥–Ω—ã–µ –∞–ª–∏–∞—Å—ã: {networks}")
        print("    –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –∞–ª–∏–∞—Å—ã:")
        for bridge in resolved_bridges:
            if bridge.vlan_id:
                print(f"      {bridge.bridge_name} -> {bridge.alias} (VLAN {bridge.vlan_id})")
            else:
                print(f"      {bridge.bridge_name} -> {bridge.alias}")

        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–µ—Ç–∏
        print("\n  ‚öôÔ∏è  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–µ—Ç–∏:")

        for bridge in resolved_bridges:
            network_config = network_manager.generate_network_config(bridge)
            qemu_string = network_manager.generate_qemu_network_string(network_config)
            print(f"    {bridge} -> {qemu_string}")

        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å–µ—Ç–∏
        print("\n  ‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å–µ—Ç–∏:")

        valid_networks = ['vmbr0', 'hq.100', 'inet.200']
        invalid_networks = ['invalid@bridge', 'hq.99999', '']

        for networks_list in [valid_networks, invalid_networks]:
            validation = network_manager.validate_network_config(networks_list)
            status = "–≤–∞–ª–∏–¥–Ω–∞" if validation['valid'] else "–æ—à–∏–±–∫–∏"
            print(f"    {networks_list} -> {status}")

        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–µ—Ç–∏
        print("\n  üìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–µ—Ç–∏:")

        stats = network_manager.get_network_statistics(networks)
        print(f"    –í—Å–µ–≥–æ —Å–µ—Ç–µ–π: {stats['total_networks']}")
        print(f"    VLAN —Å–µ—Ç–µ–π: {stats['vlan_networks']}")
        print(f"    –û–±—ã—á–Ω—ã—Ö —Å–µ—Ç–µ–π: {stats['regular_networks']}")
        print(f"    –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö bridge'–µ–π: {stats['unique_bridges']}")

        return True

    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è NetworkManager: {e}")
        return False


def test_bridge_manager():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ BridgeManager"""
    print("\nüåâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ BridgeManager...")

    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ bridge'–µ–π (–±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ Proxmox)
        logger = Logger("test-bridge-manager")
        validator = Validator()
        cache = Cache()

        # –°–æ–∑–¥–∞–µ–º –º–æ–∫-–∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        class MockProxmoxClient:
            def api_call(self, *args, **kwargs):
                # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è API –≤—ã–∑–æ–≤–æ–≤
                return []

        mock_client = MockProxmoxClient()

        bridge_manager = BridgeManager(
            proxmox_client=mock_client,
            logger=logger,
            validator=validator,
            cache=cache
        )

        print("  ‚úÖ BridgeManager —Å–æ–∑–¥–∞–Ω")

        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ bridge
        print("\n  ‚öôÔ∏è  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ bridge:")

        bridge_config = BridgeConfig(
            name="test-bridge",
            type="bridge",
            vlan_aware=True,
            autostart=True
        )

        print(f"    –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {bridge_config.name}, VLAN-aware: {bridge_config.vlan_aware}")

        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏–º–µ–Ω–∏ bridge
        print("\n  ‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏–º–µ–Ω bridge:")

        valid_names = ['vmbr1000', 'test-bridge', 'hq-net']
        invalid_names = ['123invalid', 'invalid@name', 'a' * 51]

        for name in valid_names + invalid_names:
            is_valid = bridge_manager._validate_bridge_name(name)
            status = "–≤–∞–ª–∏–¥–Ω–æ" if is_valid else "–Ω–µ–≤–∞–ª–∏–¥–Ω–æ"
            print(f"    {name} -> {status}")

        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ bridge'–µ–π
        print("\n  üìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ bridge'–µ–π:")

        # –ú–æ–∫-–¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        mock_bridges = [
            BridgeInfo("vmbr0", "bridge", True, False, [], True),
            BridgeInfo("vmbr1000", "bridge", True, True, ["eth0"], True),
            BridgeInfo("vmbr1001", "bridge", True, False, ["eth1"], True)
        ]

        # –ü–æ–¥–º–µ–Ω—è–µ–º –º–µ—Ç–æ–¥ list_bridges –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        original_list_bridges = bridge_manager.list_bridges
        bridge_manager.list_bridges = lambda node: mock_bridges

        stats = bridge_manager.get_bridge_statistics("pve1")
        print(f"    –í—Å–µ–≥–æ bridge'–µ–π: {stats['total_bridges']}")
        print(f"    VLAN-aware: {stats['vlan_aware_bridges']}")
        print(f"    –û–±—ã—á–Ω—ã—Ö: {stats['regular_bridges']}")
        print(f"    –í—Å–µ–≥–æ –ø–æ—Ä—Ç–æ–≤: {stats['total_ports']}")

        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥
        bridge_manager.list_bridges = original_list_bridges

        return True

    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è BridgeManager: {e}")
        return False


def test_bridge_alias_operations():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π —Å BridgeAlias"""
    print("\nüè∑Ô∏è  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π —Å BridgeAlias...")

    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ BridgeAlias –æ–±—ä–µ–∫—Ç–æ–≤
        bridge1 = BridgeAlias(alias="vmbr0", bridge_name="vmbr0")
        bridge2 = BridgeAlias(alias="hq.100", bridge_name="vmbr1000", vlan_id=100)
        bridge3 = BridgeAlias(alias="inet.200", bridge_name="vmbr1001", vlan_id=200)

        bridges = [bridge1, bridge2, bridge3]

        print("  ‚úÖ BridgeAlias –æ–±—ä–µ–∫—Ç—ã —Å–æ–∑–¥–∞–Ω—ã")

        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–æ–≤–æ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è
        print("\n  üìù –°—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ:")

        for bridge in bridges:
            print(f"    {bridge}")

        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        print("\n  ‚öñÔ∏è  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è:")

        bridge_copy = BridgeAlias(alias="vmbr0", bridge_name="vmbr0")
        print(f"    bridge1 == bridge_copy: {bridge1 == bridge_copy}")

        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è (–¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –º–Ω–æ–∂–µ—Å—Ç–≤–∞—Ö)
        print("\n  üî¢ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è:")

        bridge_set = set(bridges)
        print(f"    –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö bridge'–µ–π: {len(bridge_set)}")

        return True

    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è BridgeAlias: {e}")
        return False


def test_network_config_operations():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π —Å NetworkConfig"""
    print("\n‚öôÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π —Å NetworkConfig...")

    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ NetworkConfig –æ–±—ä–µ–∫—Ç–æ–≤
        config1 = NetworkConfig(bridge="vmbr0")
        config2 = NetworkConfig(bridge="vmbr1000", vlan_id=100, mac_address="52:54:00:12:34:56")
        config3 = NetworkConfig(bridge="vmbr1001", vlan_id=200, model="e1000")

        configs = [config1, config2, config3]

        print("  ‚úÖ NetworkConfig –æ–±—ä–µ–∫—Ç—ã —Å–æ–∑–¥–∞–Ω—ã")

        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QEMU —Å—Ç—Ä–æ–∫
        print("\n  üñ•Ô∏è  –ì–µ–Ω–µ—Ä–∞—Ü–∏—è QEMU —Å—Ç—Ä–æ–∫:")

        for config in configs:
            qemu_string = f"model={config.model},bridge={config.bridge},firewall={1 if config.firewall else 0}"
            if config.vlan_id:
                qemu_string += f",tag={config.vlan_id}"
            if config.mac_address:
                qemu_string += f",macaddr={config.mac_address}"

            print(f"    {config.bridge} -> {qemu_string}")

        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
        print("\n  ‚öñÔ∏è  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è:")

        config_copy = NetworkConfig(bridge="vmbr0")
        print(f"    config1 == config_copy: {config1 == config_copy}")

        return True

    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è NetworkConfig: {e}")
        return False


def test_cache_integration_network():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –∫–µ—à–µ–º"""
    print("\nüíæ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –∫–µ—à–µ–º...")

    try:
        cache = Cache()

        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è bridge mapping
        bridge_key = "test_bridge_mapping"
        test_mapping = {
            "hq": "vmbr1000",
            "inet": "vmbr1001",
            "dmz": "vmbr1002"
        }

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –∫–µ—à
        cache.set(bridge_key, test_mapping, ttl=60)
        print("  ‚úÖ Bridge mapping —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –∫–µ—à")

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∑ –∫–µ—à–∞
        cached_mapping = cache.get(bridge_key)
        if cached_mapping:
            print(f"  ‚úÖ Bridge mapping –ø–æ–ª—É—á–µ–Ω: {len(cached_mapping)} —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π")
            for alias, bridge in cached_mapping.items():
                print(f"    {alias} -> {bridge}")
        else:
            print("  ‚ùå Bridge mapping –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–µ—à–µ")

        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–µ—à–∞ bridge mapping
        from core.utils.cache import BridgeMappingCache

        bridge_cache = BridgeMappingCache(cache)

        user = "testuser"
        node = "pve1"

        bridge_cache.set_bridge_mapping(user, node, test_mapping)
        retrieved_mapping = bridge_cache.get_bridge_mapping(user, node)

        if retrieved_mapping:
            print(f"  ‚úÖ –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–µ—à —Ä–∞–±–æ—Ç–∞–µ—Ç: {len(retrieved_mapping)} —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π")
        else:
            print("  ‚ùå –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–µ—à –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")

        return True

    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–µ—à–∞: {e}")
        return False


def test_logger_integration_network():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –ª–æ–≥–≥–µ—Ä–æ–º"""
    print("\nüìù –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –ª–æ–≥–≥–µ—Ä–æ–º...")

    try:
        logger = Logger("test-network-logger", "DEBUG")
        logger.setup_logging(log_to_file=False, log_to_console=True)

        # –¢–µ—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Å–µ—Ç–∏
        logger.log_bridge_creation("vmbr1000", "hq", vlan_aware=True)
        logger.log_network_setup("test-vm", "vmbr1000", 100)
        logger.log_performance_metric("network_bandwidth", 1000, "Mbps")

        print("  ‚úÖ –õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ç–µ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –≤—ã–ø–æ–ª–Ω–µ–Ω–æ")
        print("  üìÑ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—ã–≤–æ–¥ –≤—ã—à–µ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –ª–æ–≥–≥–µ—Ä–∞")

        return True

    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ª–æ–≥–≥–µ—Ä–∞: {e}")
        return False


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª–µ–π —Å–µ—Ç–∏")
    print("=" * 50)

    try:
        # –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        Path("data").mkdir(exist_ok=True)
        Path("logs").mkdir(exist_ok=True)

        # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
        success = True

        success &= test_network_manager()
        success &= test_bridge_manager()
        success &= test_bridge_alias_operations()
        success &= test_network_config_operations()
        success &= test_cache_integration_network()
        success &= test_logger_integration_network()

        print("\n" + "=" * 50)
        if success:
            print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã —Å–µ—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        else:
            print("‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏")

        print("üìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
        print("  - NetworkManager: —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ç—å—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ")
        print("  - BridgeManager: —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ bridge'–∞–º–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        print("  - BridgeAlias: –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –∞–ª–∏–∞—Å–∞–º–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã")
        print("  - NetworkConfig: –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–µ—Ç–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è")
        print("  - –ö–µ—à: –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ç–µ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∞–∫—Ç–∏–≤–Ω–æ–µ")
        print("  - Logger: –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ç–µ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç")

        # –ü–∞—É–∑–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        input("\n‚è∏Ô∏è  –ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...")

    except KeyboardInterrupt:
        print("\n\nüëã –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        raise


if __name__ == "__main__":
    main()
