#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è Validator

–†—É—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–ª—è newest_project
"""

import sys
import os
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from core.utils.validator import Validator


def test_connection_validation():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
    print("üîó –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Proxmox...")

    validator = Validator()

    # –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    valid_connections = [
        {
            'host': '192.168.1.100:8006',
            'user': 'root@pam',
            'password': 'secret'
        },
        {
            'host': 'proxmox.example.com',
            'user': 'admin@pve',
            'token_name': 'deploy-token',
            'token_value': 'secret-token'
        },
        {
            'host': '10.0.0.1:8006',
            'user': 'user@realm',
            'password': 'password123'
        }
    ]

    for i, conn_data in enumerate(valid_connections, 1):
        if validator.validate_proxmox_connection(conn_data):
            print(f"  ‚úÖ –¢–µ—Å—Ç {i}: –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
        else:
            print(f"  ‚ùå –¢–µ—Å—Ç {i}: –û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:")
            for error in validator.get_errors():
                print(f"    - {error}")

    # –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    print("\n  üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:")

    invalid_connections = [
        {
            'host': 'invalid-host',
            'user': 'root@pam',
            'password': 'secret'
        },
        {
            'host': '192.168.1.100:8006',
            'user': 'invalid@user',
            'password': 'secret'
        },
        {
            'host': '192.168.1.100:99999',
            'user': 'root@pam',
            'password': 'secret'
        },
        {
            'host': '192.168.1.100:8006',
            'user': 'root@pam'
            # –ù–µ—Ç –ø–∞—Ä–æ–ª—è –∏–ª–∏ —Ç–æ–∫–µ–Ω–∞
        }
    ]

    for i, conn_data in enumerate(invalid_connections, 1):
        if not validator.validate_proxmox_connection(conn_data):
            print(f"  ‚úÖ –¢–µ—Å—Ç {i}: –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤—ã—è–≤–ª–µ–Ω—ã –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏")
            for error in validator.get_errors():
                print(f"    - {error}")
        else:
            print(f"  ‚ùå –¢–µ—Å—Ç {i}: –î–∞–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏")


def test_config_validation():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è"""
    print("\nüìã –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è...")

    validator = Validator()

    # –ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    valid_config = {
        'machines': [
            {
                'name': 'student-pc',
                'device_type': 'linux',
                'template_node': 'pve1',
                'template_vmid': 100,
                'networks': [
                    {'bridge': 'vmbr0'},
                    {'bridge': 'hq.100'},
                    {'bridge': 'inet.200'}
                ]
            },
            {
                'name': 'router',
                'device_type': 'ecorouter',
                'template_node': 'pve2',
                'template_vmid': 200,
                'networks': [
                    {'bridge': 'dmz'}
                ]
            }
        ]
    }

    if validator.validate_deployment_config(valid_config):
        print("  ‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ –≤–∞–ª–∏–¥–∞—Ü–∏—é")
    else:
        print("  ‚ùå –û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:")
        for error in validator.get_errors():
            print(f"    - {error}")

    # –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    print("\n  üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:")

    invalid_config = {
        'machines': [
            {
                'name': '',  # –ü—É—Å—Ç–æ–µ –∏–º—è
                'device_type': 'linux',
                'template_node': 'pve1',
                'template_vmid': 100
            },
            {
                'name': 'invalid@name',  # –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è
                'device_type': 'windows',  # –ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ç–∏–ø
                'template_node': 'pve1',
                'template_vmid': 50  # –°–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–π VMID
            },
            {
                'name': 'test-vm',
                'device_type': 'linux',
                'template_node': 'pve1',
                'template_vmid': 100,
                'networks': [
                    {'bridge': 'invalid@bridge'},  # –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π bridge
                    {'bridge': 'hq.99999'}  # –°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π VLAN ID
                ]
            }
        ]
    }

    if not validator.validate_deployment_config(invalid_config):
        print("  ‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤—ã—è–≤–ª–µ–Ω—ã –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏")
        for error in validator.get_errors():
            print(f"    - {error}")
    else:
        print("  ‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—à–∏–±–∫–∏")


def test_users_validation():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    print("\nüë• –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")

    validator = Validator()

    # –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    valid_users = [
        'student1@pve',
        'student2@pve',
        'admin@pam',
        'user@realm$subuser'
    ]

    if validator.validate_users_list(valid_users):
        print("  ‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–æ—à–µ–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é")
    else:
        print("  ‚ùå –û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞:")
        for error in validator.get_errors():
            print(f"    - {error}")

    # –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    print("\n  üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞:")

    invalid_users = [
        'student1@pve',
        '',  # –ü—É—Å—Ç–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        'invalid@user@domain',  # –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ @
        'user with spaces@pve'  # –ü—Ä–æ–±–µ–ª—ã –≤ –∏–º–µ–Ω–∏
    ]

    if not validator.validate_users_list(invalid_users):
        print("  ‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤—ã—è–≤–ª–µ–Ω—ã –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        for error in validator.get_errors():
            print(f"    - {error}")
    else:
        print("  ‚ùå –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—à–∏–±–∫–∏")


def test_bridge_validation():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ bridge –∞–ª–∏–∞—Å–æ–≤"""
    print("\nüåâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ bridge –∞–ª–∏–∞—Å–æ–≤...")

    validator = Validator()

    # –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ bridge –∞–ª–∏–∞—Å—ã
    valid_bridges = [
        'vmbr0',
        'hq',
        'inet',
        'dmz',
        'hq.100',
        'inet.200',
        'vlan-bridge.4094'
    ]

    print("  ‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∞–ª–∏–∞—Å—ã:")
    for bridge in valid_bridges:
        if validator._validate_bridge_alias(bridge):
            print(f"    - {bridge}")
        else:
            print(f"    ‚ùå {bridge} –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º")

    # –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ bridge –∞–ª–∏–∞—Å—ã
    invalid_bridges = [
        '',
        'invalid@bridge',
        'hq.vlan',
        'hq.100.200',
        'hq.0',  # VLAN ID —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–π
        'hq.4095',  # VLAN ID —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π
        'bridge with spaces',
        'hq.-100',  # –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π VLAN
        'hq.abc'  # VLAN –Ω–µ —á–∏—Å–ª–æ
    ]

    print("\n  ‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∞–ª–∏–∞—Å—ã:")
    for bridge in invalid_bridges:
        if not validator._validate_bridge_alias(bridge):
            print(f"    - {bridge}")
        else:
            print(f"    ‚ùå {bridge} –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º")


def test_file_validation():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ñ–∞–π–ª–æ–≤ –∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π"""
    print("\nüìÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ñ–∞–π–ª–æ–≤...")

    validator = Validator()

    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∞–π–ª–æ–≤
    existing_files = [
        'README.md',
        'requirements.txt',
        'core/utils/validator.py'
    ]

    for file_path in existing_files:
        if validator.validate_file_exists(file_path):
            print(f"  ‚úÖ –§–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {file_path}")
        else:
            print(f"  ‚ùå –û—à–∏–±–∫–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–∞–π–ª–∞ {file_path}:")
            for error in validator.get_errors():
                print(f"    - {error}")

    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∞–π–ª–æ–≤
    non_existing_files = [
        'nonexistent.txt',
        'path/to/nonexistent/file.yml'
    ]

    for file_path in non_existing_files:
        if not validator.validate_file_exists(file_path):
            print(f"  ‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤—ã—è–≤–ª–µ–Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Ñ–∞–π–ª–∞: {file_path}")
        else:
            print(f"  ‚ùå –§–∞–π–ª {file_path} –Ω–µ –¥–æ–ª–∂–µ–Ω —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è Validator")
    print("=" * 50)

    try:
        # –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
        test_connection_validation()
        test_config_validation()
        test_users_validation()
        test_bridge_validation()
        test_file_validation()

        print("\n" + "=" * 50)
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")

        # –ü–∞—É–∑–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        input("\n‚è∏Ô∏è  –ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...")

    except KeyboardInterrupt:
        print("\n\nüëã –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        raise


if __name__ == "__main__":
    main()
