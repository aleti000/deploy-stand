"""
–õ–æ–∫–∞–ª—å–Ω—ã–π –º–æ–¥—É–ª—å —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö –º–∞—à–∏–Ω

–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–µ—Ç –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ –º–∞—à–∏–Ω—ã –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ –Ω–∞ –Ω–æ–¥–µ,
–≥–¥–µ —Ö—Ä–∞–Ω—è—Ç—Å—è –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã.

–†–ï–§–ê–ö–¢–û–†–ò–ù–ì: –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –±–∞–∑–æ–≤—ã—Ö –º–æ–¥—É–ª–µ–π
"""

import logging
from typing import Dict, List, Any
from core.modules.deployment.basic_deployer import BasicDeployer
from core.proxmox.proxmox_client import ProxmoxClient
from core.modules.common.config_validator import ConfigValidator
from core.modules.common.deployment_utils import DeploymentUtils
from core.modules.users.user_manager import UserManager
from core.modules.deployment.vm_factory import VMFactory

logger = logging.getLogger(__name__)


class LocalDeployer(BasicDeployer):
    """–õ–æ–∫–∞–ª—å–Ω—ã–π —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞—Ç–µ–ª—å –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö –º–∞—à–∏–Ω"""

    def __init__(self, proxmox_client: ProxmoxClient):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞—Ç–µ–ª—è

        Args:
            proxmox_client: –ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Proxmox API
        """
        self.proxmox = proxmox_client
        self.utils = DeploymentUtils()
        self.validator = ConfigValidator()
        self.user_manager = UserManager(proxmox_client)
        self.vm_factory = VMFactory(proxmox_client)

    def deploy_configuration(self, users: List[str], config: Dict[str, Any],
                           node_selection: str = "auto", target_node: str = None) -> Dict[str, str]:
        """
        –†–∞–∑–≤–µ—Ä–Ω—É—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö –º–∞—à–∏–Ω –Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ–π –Ω–æ–¥–µ

        Args:
            users: –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
            config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
            node_selection: –°—Ç—Ä–∞—Ç–µ–≥–∏—è –≤—ã–±–æ—Ä–∞ –Ω–æ–¥—ã (–∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è, –≤—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–æ–¥—É —Å —à–∞–±–ª–æ–Ω–∞–º–∏)
            target_node: –¶–µ–ª–µ–≤–∞—è –Ω–æ–¥–∞ (–∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–æ–¥–∞ —à–∞–±–ª–æ–Ω–∞)

        Returns:
            –°–ª–æ–≤–∞—Ä—å {–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: –ø–∞—Ä–æ–ª—å}
        """
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        validation_result = self.validator.validate_deployment_config(config)
        if not validation_result.is_valid:
            error_msg = "–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:\n" + str(validation_result)
            logger.error(error_msg)
            raise ValueError(error_msg)

        results = {}
        nodes_with_users = set()

        try:
            # –†–∞–∑–≤–µ—Ä–Ω—É—Ç—å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            for user in users:
                user_result = self._deploy_for_user(user, config)
                results.update(user_result)
                # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∑–∞–¥–µ–π—Å—Ç–≤–æ–≤–∞–Ω–Ω—ã–µ –Ω–æ–¥—ã
                nodes_with_users.update(self._get_user_nodes(user, config))

            # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–µ—Ç–µ–≤—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–∞ –∑–∞–¥–µ–π—Å—Ç–≤–æ–≤–∞–Ω–Ω—ã—Ö –Ω–æ–¥–∞—Ö
            self._reload_affected_nodes_network(nodes_with_users)

            logger.info(f"–õ–æ–∫–∞–ª—å–Ω–æ–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –¥–ª—è {len(results)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            return results

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è: {e}")
            raise

    def _deploy_for_user(self, user: str, config: Dict[str, Any]) -> Dict[str, str]:
        """
        –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –¥–ª—è –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ–π –Ω–æ–¥–µ

        Args:
            user: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è

        Returns:
            –°–ª–æ–≤–∞—Ä—å {–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: –ø–∞—Ä–æ–ª—å}
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            if self.user_manager.check_user_exists(user):
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ")
                # –ü–æ–ª—É—á–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–∞—Ä–æ–ª—å –∏–ª–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π
                password = self.utils.generate_password()
            else:
                # –°–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—É–ª —á–µ—Ä–µ–∑ UserManager
                success, password = self.user_manager.create_user_and_pool(user)
                if not success:
                    raise Exception(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user}")

            # –°–æ–∑–¥–∞—Ç—å –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ –º–∞—à–∏–Ω—ã —á–µ—Ä–µ–∑ VMFactory
            pool_name = self.utils.extract_pool_name(user)
            for machine_config in config.get('machines', []):
                self.vm_factory.create_machine_local(machine_config, pool_name)

            logger.info(f"–õ–æ–∫–∞–ª—å–Ω–æ–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user} –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
            return {user: password}

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user}: {e}")
            raise

    def validate_config(self, config: Dict[str, Any]) -> bool:
        """
        –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è

        Args:
            config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏

        Returns:
            True –µ—Å–ª–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–∞–ª–∏–¥–Ω–∞
        """
        validation_result = self.validator.validate_deployment_config(config)
        return validation_result.is_valid

    def _get_user_nodes(self, user: str, config: Dict[str, Any]) -> set:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –Ω–æ–¥, –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º

        Args:
            user: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è

        Returns:
            –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –∏–º–µ–Ω –Ω–æ–¥
        """
        nodes = set()
        for machine_config in config.get('machines', []):
            nodes.add(machine_config.get('template_node'))
        return nodes

    def _reload_affected_nodes_network(self, nodes: set):
        """
        –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–µ—Ç—å –Ω–∞ –∑–∞–¥–µ–π—Å—Ç–≤–æ–≤–∞–Ω–Ω—ã—Ö –Ω–æ–¥–∞—Ö

        Args:
            nodes: –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –∏–º–µ–Ω –Ω–æ–¥ –¥–ª—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏
        """
        if not nodes:
            return

        print("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Ç–µ–≤—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –Ω–∞ –∑–∞–¥–µ–π—Å—Ç–≤–æ–≤–∞–Ω–Ω—ã—Ö –Ω–æ–¥–∞—Ö...")
        for node in nodes:
            try:
                if self.proxmox.reload_node_network(node):
                    print(f"  ‚úÖ –°–µ—Ç—å –Ω–æ–¥—ã {node} –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
                else:
                    print(f"  ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–µ—Ç—å –Ω–æ–¥—ã {node}")
            except Exception as e:
                print(f"  ‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Ç–∏ –Ω–æ–¥—ã {node}: {e}")

    def get_deployment_status(self, deployment_id: str) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è

        Args:
            deployment_id: ID —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è

        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
        """
        return {
            'deployment_id': deployment_id,
            'status': 'completed',
            'strategy': 'local',
            'message': '–õ–æ–∫–∞–ª—å–Ω–æ–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –Ω–∞ –Ω–æ–¥–µ —Å —à–∞–±–ª–æ–Ω–∞–º–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ'
        }
