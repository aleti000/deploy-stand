"""
–°–∏—Å—Ç–µ–º–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞

–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö –º–∞—à–∏–Ω
—Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à –∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π.
"""

import logging
import sys
import os
from typing import Dict, List, Any
from core.module_factory import ModuleFactory
from core.config.config_manager import ConfigManager

logger = logging.getLogger(__name__)


class MainMenu:
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å–∏—Å—Ç–µ–º—ã Deploy-Stand"""

    def __init__(self, module_factory: ModuleFactory, config_manager: ConfigManager,
                 logger_instance: logging.Logger, cache, metrics):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é

        Args:
            module_factory: –§–∞–±—Ä–∏–∫–∞ –º–æ–¥—É–ª–µ–π
            config_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            logger_instance: –≠–∫–∑–µ–º–ø–ª—è—Ä –ª–æ–≥–≥–µ—Ä–∞
            cache: –ö–µ—à –º–µ–Ω–µ–¥–∂–µ—Ä
            metrics: –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        """
        self.module_factory = module_factory
        self.config_manager = config_manager
        self.logger = logger_instance
        self.cache = cache
        self.metrics = metrics

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä—ã
        self.proxmox_manager = None
        self.vm_deployer = None
        self.user_manager = None

    def show(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π"""
        # –ü–ï–†–í–´–ú –î–ï–õ–û–ú - –ù–ê–°–¢–†–û–ô–ö–ê –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø
        if not self._ensure_proxmox_connection():
            print("‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Proxmox")
            return

        # –ë—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø –∫ —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–º —Ñ—É–Ω–∫—Ü–∏—è–º
        quick_actions = {
            'd': '4',  # d = deploy (—Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—å)
            'c': '1',  # c = create config (—Å–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é)
            'u': '3',  # u = users (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏)
            'x': '5',  # x = cleanup (–æ—á–∏—Å—Ç–∫–∞)
            's': '7',  # s = settings (–Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è)
        }

        while True:
            try:
                # –û—á–∏—Å—Ç–∫–∞ —ç–∫—Ä–∞–Ω–∞ –ø–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º –º–µ–Ω—é
                os.system('clear')

                # –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–µ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
                current_connection = self._get_current_connection_info()

                # –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–µ–Ω—é —Å –≥–æ—Ä—è—á–∏–º–∏ –∫–ª–∞–≤–∏—à–∞–º–∏
                print("üöÄ Deploy-Stand - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
                print("=" * 50)
                print(f"üîå –¢–µ–∫—É—â–µ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: {current_connection}")
                print("=" * 50)
                print("üìã –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:")
                print("  [1] –°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è")
                print("  [2] –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è–º–∏")
                print("  [3] –£–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
                print("  [4] üöÄ –†–∞–∑–≤–µ—Ä–Ω—É—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é")
                print("  [5] üóëÔ∏è  –£–¥–∞–ª–∏—Ç—å –º–∞—à–∏–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
                print("  [6] –£–¥–∞–ª–∏—Ç—å –º–∞—à–∏–Ω—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                print("  [7] ‚öôÔ∏è  –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º")
                print("  [0] –í—ã—Ö–æ–¥")
                print("\n‚ö° –ë—ã—Å—Ç—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã:")
                print("  d = –†–∞–∑–≤–µ—Ä–Ω—É—Ç—å | c = –°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥ | u = –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ | x = –û—á–∏—Å—Ç–∫–∞ | s = –ù–∞—Å—Ç—Ä–æ–π–∫–∏")

                # –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤–≤–æ–¥ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –±—ã—Å—Ç—Ä—ã—Ö –∫–æ–º–∞–Ω–¥
                choice = input("\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ").strip().lower()

                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –±—ã—Å—Ç—Ä—ã—Ö –∫–æ–º–∞–Ω–¥
                if choice in quick_actions:
                    choice = quick_actions[choice]

                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π
                action_result = self._handle_menu_choice(choice)
                if action_result == "exit":
                    break
                elif action_result == "repeat":
                    continue

            except KeyboardInterrupt:
                print("\n\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                break
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é: {e}")
                print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
                input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")

    def _handle_menu_choice(self, choice: str) -> str:
        """–¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–µ–Ω—é —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π"""
        menu_actions = {
            "1": lambda: self._create_deployment_config(),
            "2": lambda: self._manage_configs_menu(),
            "3": lambda: self._manage_users_menu(),
            "4": lambda: self._deploy_menu(),
            "5": lambda: self._delete_all_users_resources(),
            "6": lambda: self._delete_single_user_resources(),
            "7": lambda: self._manage_connection_config_menu(),
            "0": lambda: "exit"
        }

        action = menu_actions.get(choice)
        if action:
            try:
                return action() if callable(action) else action
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è {choice}: {e}")
                print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
                return "repeat"
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ü–∏—Ñ—Ä—ã 0-7 –∏–ª–∏ –±—ã—Å—Ç—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã (d, c, u, x)")
            return "repeat"

    def _setup_proxmox_connection(self):
        """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å –∞–≤—Ç–æ–¥–µ—Ç–µ–∫—Ç–æ–º"""
        print("\nüîå –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Proxmox")
        print("=" * 50)

        # –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        connections = self.config_manager.load_connections_config()

        if connections:
            print("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:")
            for i, (name, config) in enumerate(connections.items(), 1):
                print(f"  [{i}] {name} - {config.get('host', '–Ω–µ —É–∫–∞–∑–∞–Ω')}")
            print(f"  [{len(connections) + 1}] –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ")

            try:
                choice = input(f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é (1-{len(connections) + 1}): ").strip()
                config_index = int(choice) - 1

                if 0 <= config_index < len(connections):
                    config_names = list(connections.keys())
                    selected_config = connections[config_names[config_index]]
                    connection_name = config_names[config_index]
                else:
                    return self._create_new_connection()
            except ValueError:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!")
                return False
        else:
            print("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return self._create_new_connection()

        # –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        try:
            from core.proxmox.proxmox_client import ProxmoxClient

            self.proxmox_manager = ProxmoxClient(
                host=selected_config['host'],
                user=selected_config['user'],
                password=None if selected_config.get('use_token') else selected_config.get('password'),
                token_name=selected_config['token_name'] if selected_config.get('use_token') else None,
                token_value=selected_config['token_value'] if selected_config.get('use_token') else None
            )

            # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            nodes = self.proxmox_manager.get_nodes()
            print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ! –î–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–æ–¥—ã: {', '.join(nodes)}")

            # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            save_config = input("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —ç—Ç—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö —Å–µ—Å—Å–∏–π? (y/n): ").lower()
            if save_config == 'y':
                # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
                pass

            return True

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            return False

    def _create_new_connection(self):
        """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Proxmox"""
        print("\nüîå –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
        print("=" * 50)

        host = input("–ê–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞ Proxmox (host:port): ").strip()
        if not host:
            print("‚ùå –ê–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω!")
            return False

        user = input("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, root@pam): ").strip()
        if not user:
            print("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω!")
            return False

        print("\n–°–ø–æ—Å–æ–±—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:")
        print("  [1] –ü–æ –ø–∞—Ä–æ–ª—é")
        print("  [2] –ü–æ —Ç–æ–∫–µ–Ω—É")

        auth_choice = input("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ (1-2): ").strip()

        try:
            from core.proxmox.proxmox_client import ProxmoxClient

            if auth_choice == "1":
                password = input("–ü–∞—Ä–æ–ª—å: ").strip()
                if not password:
                    print("‚ùå –ü–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω!")
                    return False

                self.proxmox_manager = ProxmoxClient(
                    host=host,
                    user=user,
                    password=password
                )

            elif auth_choice == "2":
                token_name = input("–ò–º—è —Ç–æ–∫–µ–Ω–∞: ").strip()
                token_value = input("–ó–Ω–∞—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞: ").strip()

                if not token_name or not token_value:
                    print("‚ùå –ò–º—è —Ç–æ–∫–µ–Ω–∞ –∏ –∑–Ω–∞—á–µ–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã!")
                    return False

                self.proxmox_manager = ProxmoxClient(
                    host=host,
                    user=user,
                    token_name=token_name,
                    token_value=token_value
                )

            else:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏!")
                return False

            # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            nodes = self.proxmox_manager.get_nodes()
            print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ! –î–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–æ–¥—ã: {', '.join(nodes)}")
            return True

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            return False

    def _create_deployment_config(self):
        """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ–º"""
        print("\nüöÄ –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è")
        print("=" * 50)

        # –ë—ã—Å—Ç—Ä—ã–π –≤—ã–±–æ—Ä –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
        print("–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã:")
        print("  [1] –°—Ç—É–¥–µ–Ω—á–µ—Å–∫–∏–π —Å—Ç–µ–Ω–¥ (Linux VM + —Å–µ—Ç—å)")
        print("  [2] –°–µ—Ç–µ–≤–æ–π —Å—Ç–µ–Ω–¥ (Router + –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ—Ç–µ–π)")
        print("  [3] –ö–∞—Å—Ç–æ–º–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è")
        print("  [0] –ù–∞–∑–∞–¥")

        template_choice = input("–í—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω (1-3) –∏–ª–∏ 0 –¥–ª—è –Ω–∞–∑–∞–¥: ").strip()

        if template_choice == "0":
            return "repeat"
        elif template_choice in ["1", "2"]:
            # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã
            return self._create_config_from_template(template_choice)
        elif template_choice == "3":
            # –ö–∞—Å—Ç–æ–º–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
            return self._create_custom_config()
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!")
            return "repeat"

    def _deploy_menu(self):
        """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –º–µ–Ω—é —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è —Å –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–∫–∞–º–∏"""
        print("\nüöÄ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
        print("=" * 50)

        # –ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        configs = self.config_manager.list_configs()
        if not configs:
            print("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π!")
            print("üí° –°–æ–∑–¥–∞–π—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ –º–µ–Ω—é 1 –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ deployment_config.yml")
            return "repeat"

        print("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:")
        for i, config_name in enumerate(configs, 1):
            print(f"  [{i}] {config_name}")

        print("\n–ë—ã—Å—Ç—Ä—ã–π –≤—ã–±–æ—Ä:")
        print("  [default] - –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å deployment_config.yml")
        print("  [last] - –ø–æ—Å–ª–µ–¥–Ω—è—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è")
        print("  [–Ω–æ–º–µ—Ä] - –≤—ã–±—Ä–∞—Ç—å –ø–æ –Ω–æ–º–µ—Ä—É")

        choice = input("\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é: ").strip().lower()

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –±—ã—Å—Ç—Ä—ã—Ö –≤—ã–±–æ—Ä–æ–≤
        if choice == "default":
            config = self.config_manager.load_deployment_config()
            config_name = "deployment_config.yml"
        elif choice == "last":
            # –ó–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            config = self._load_last_used_config()
            config_name = "–ø–æ—Å–ª–µ–¥–Ω—è—è"
        else:
            try:
                config_index = int(choice) - 1
                if 0 <= config_index < len(configs):
                    config = self.config_manager.load_config(configs[config_index])
                    config_name = configs[config_index]
                else:
                    print(f"‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –æ—Ç 1 –¥–æ {len(configs)}")
                    return "repeat"
            except ValueError:
                print("‚ùå –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∏–ª–∏ 'default'/'last'")
                return "repeat"

        if not config:
            print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏!")
            return "repeat"

        # –í—ã–±–æ—Ä —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
        user_lists = self.config_manager.list_user_lists()
        selected_users = []

        if not user_lists:
            print("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ø–∏—Å–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!")
            print("üí° –°–æ–∑–¥–∞–π—Ç–µ —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –º–µ–Ω—é 3")
            return "repeat"

        print("\nüë• –í—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è:")
        print("–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:")
        for i, list_name in enumerate(user_lists, 1):
            users = self.config_manager.load_users(list_name)
            print(f"  [{i}] {list_name} ({len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)")

        try:
            user_choice = input(f"–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (1-{len(user_lists)}) [1]: ").strip()
            if not user_choice:
                user_choice = "1"

            list_index = int(user_choice) - 1
            if 0 <= list_index < len(user_lists):
                selected_list = user_lists[list_index]
                selected_users = self.config_manager.load_users(selected_list)

                if not selected_users:
                    print(f"‚ùå –°–ø–∏—Å–æ–∫ '{selected_list}' –ø—É—Å—Ç!")
                    return "repeat"

                print(f"üë§ –í—ã–±—Ä–∞–Ω —Å–ø–∏—Å–æ–∫: {selected_list} ({len(selected_users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)")
            else:
                print(f"‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –æ—Ç 1 –¥–æ {len(user_lists)}")
                return "repeat"
        except ValueError:
            print("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä")
            return "repeat"

        # –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º–∏ –º–æ–¥—É–ª—è–º–∏
        print("\n–°—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è:")
        print("  [1] üöÄ –õ–æ–∫–∞–ª—å–Ω–æ–µ - —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –Ω–∞ –Ω–æ–¥–µ —Å —à–∞–±–ª–æ–Ω–∞–º–∏")
        print("  [2] üåê –£–¥–∞–ª–µ–Ω–Ω–æ–µ - –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤ –¥–ª—è —Ü–µ–ª–µ–≤–æ–π –Ω–æ–¥—ã")
        print("  [3] ‚öñÔ∏è  –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ - –ø–æ –≤—Å–µ–º –Ω–æ–¥–∞–º (–ø—Ä–æ—Å—Ç–∞—è –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞)")
        print("  [4] üéØ –£–º–Ω–æ–µ - –ø–æ –≤—Å–µ–º –Ω–æ–¥–∞–º —Å —É—á–µ—Ç–æ–º –Ω–∞–≥—Ä—É–∑–∫–∏")

        strategy_choice = input("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏—é (1-4) [1]: ").strip() or "1"

        # –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –º–æ–¥—É–ª—å —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        deployment_module_name = None
        deployment_params = {}
        target_node = None
        node_selection = None

        if strategy_choice == "1":
            # –õ–æ–∫–∞–ª—å–Ω–æ–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ
            deployment_module_name = "local"
            print("üìç –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω—ã–π –º–æ–¥—É–ª—å —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è")
            node_selection = "auto"
        elif strategy_choice == "2":
            # –£–¥–∞–ª–µ–Ω–Ω–æ–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ
            deployment_module_name = "remote"
            print("üì° –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —É–¥–∞–ª–µ–Ω–Ω—ã–π –º–æ–¥—É–ª—å —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è")
            # –ü–æ–ª—É—á–∏—Ç—å —Ü–µ–ª–µ–≤—É—é –Ω–æ–¥—É –¥–ª—è —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
            nodes = self.proxmox_manager.get_nodes()
            if not nodes:
                print("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–æ–¥!")
                return "repeat"

            print("–î–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–æ–¥—ã:")
            for i, node in enumerate(nodes, 1):
                print(f"  {i}. {node}")

            while True:
                choice = input("–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª–µ–≤—É—é –Ω–æ–¥—É [1]: ").strip()
                if not choice:
                    choice = "1"

                try:
                    node_index = int(choice) - 1
                    if 0 <= node_index < len(nodes):
                        target_node = nodes[node_index]
                        break
                    else:
                        print(f"‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –æ—Ç 1 –¥–æ {len(nodes)}")
                except ValueError:
                    # Allow direct node name input as fallback
                    if choice in nodes:
                        target_node = choice
                        break
                    else:
                        print(f"‚ùå –ù–æ–¥–∞ '{choice}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–ø–∏—Å–∫–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö")
            node_selection = "specific"
        elif strategy_choice == "3":
            # –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ
            deployment_module_name = "balanced"
            print("‚öñÔ∏è  –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–æ–¥—É–ª—å —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è")
            node_selection = "balanced"
        elif strategy_choice == "4":
            # –£–º–Ω–æ–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ
            deployment_module_name = "smart"
            print("ü§ñ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —É–º–Ω—ã–π –º–æ–¥—É–ª—å —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è")
            node_selection = "smart"
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏!")
            return "repeat"

        # –ü–†–û–í–ï–†–ö–ê –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø –ü–ï–†–ï–î –†–ê–ó–í–ï–†–¢–´–í–ê–ù–ò–ï–ú
        if not hasattr(self, 'proxmox_manager') or self.proxmox_manager is None:
            print("‚ùå –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Proxmox! –ü–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å —Å–Ω–∞—á–∞–ª–∞ –≤ –º–µ–Ω—é 7.")
            return "repeat"

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        try:
            nodes = self.proxmox_manager.get_nodes()
            if not nodes:
                print("‚ùå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Proxmox –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
                return "repeat"
            print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ: {len(nodes)} –Ω–æ–¥ –¥–æ—Å—Ç—É–ø–Ω–æ")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Proxmox: {e}")
            return "repeat"

        # –ó–∞–ø—É—Å–∫ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –º–æ–¥—É–ª–µ–º
        print(f"\nüöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ '{config_name}'...")
        print(f"–ú–æ–¥—É–ª—å: {deployment_module_name}")

        try:
            # –°–æ–∑–¥–∞—Ç—å –º–æ–¥—É–ª—å —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ —Ç–∏–ø–∞
            if deployment_module_name in ["balanced", "smart"]:
                # –≠—Ç–∏ –º–æ–¥—É–ª–∏ —Ç—Ä–µ–±—É—é—Ç –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–æ—á–Ω–æ–≥–æ –º–æ–¥—É–ª—è
                balancer_name = "simple" if deployment_module_name == "balanced" else "smart"
                balancer = self.module_factory.create_balancing_module(balancer_name, proxmox_client=self.proxmox_manager)
                deployment_module = self.module_factory.create_deployment_module(
                    deployment_module_name,
                    proxmox_client=self.proxmox_manager,
                    balancing_module=balancer
                )
            else:
                # –ü—Ä–æ—Å—Ç—ã–µ –º–æ–¥—É–ª–∏
                deployment_module = self.module_factory.create_deployment_module(
                    deployment_module_name,
                    proxmox_client=self.proxmox_manager
                )

            results = deployment_module.deploy_configuration(
                selected_users,
                config,
                node_selection,
                target_node
            )

            # –ö—Ä–∞—Å–∏–≤—ã–π –≤—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            print(f"\n‚úÖ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
            print(f"–°–æ–∑–¥–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(results)}")

            if results:
                print("\nüìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
                print("-" * 60)
                print(f"{'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'"<20"} {'–ü–∞—Ä–æ–ª—å'"<20"}")
                print("-" * 60)
                for user, password in results.items():
                    print(f"{user:<20} {password:<20}")
            else:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è: {e}")

        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
        return "repeat"

    def _manage_users_menu(self):
        """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–ø–∏—Å–∫–æ–≤"""
        print("\nüë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏")
        print("=" * 50)

        # –ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        user_lists = self.config_manager.list_user_lists()
        if user_lists:
            print(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ({len(user_lists)}):")
            for i, list_name in enumerate(user_lists, 1):
                users = self.config_manager.load_users(list_name)
                print(f"  [{i}] {list_name} ({len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)")
            print(f"  [{len(user_lists) + 1}] –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫")
        else:
            print("–°–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            print("  [1] –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫")

        print("\n–ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:")
        print("  [1] –°–æ–∑–¥–∞—Ç—å/–≤—ã–±—Ä–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        print("  [2] –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Å–ø–∏—Å–∫–∏")
        print("  [3] –£–¥–∞–ª–∏—Ç—å —Å–ø–∏—Å–æ–∫")
        print("  [0] –ù–∞–∑–∞–¥")

        choice = input("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ").strip()

        if choice == "1":
            self._manage_user_lists_menu()
        elif choice == "2":
            self._show_all_user_lists()
        elif choice == "3":
            self._delete_user_list_interactive()
        elif choice == "0":
            return "repeat"
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!")

        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
        return "repeat"

    def _delete_all_users_resources(self):
        """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø–∞–∫–µ—Ç–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å –≤—ã–±–æ—Ä–æ–º —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        # –í—ã–±—Ä–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        user_lists = self.config_manager.list_user_lists()

        if not user_lists:
            print("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ø–∏—Å–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!")
            return "repeat"

        print("üóëÔ∏è  –ü–∞–∫–µ—Ç–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤")
        print("=" * 50)
        print("–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:")
        for i, list_name in enumerate(user_lists, 1):
            users = self.config_manager.load_users(list_name)
            print(f"  [{i}] {list_name} ({len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)")

        try:
            choice = input(f"–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (1-{len(user_lists)}) [1]: ").strip()
            if not choice:
                choice = "1"

            list_index = int(choice) - 1
            if 0 <= list_index < len(user_lists):
                selected_list = user_lists[list_index]
                users = self.config_manager.load_users(selected_list)

                if not users:
                    print(f"‚ùå –°–ø–∏—Å–æ–∫ '{selected_list}' –ø—É—Å—Ç!")
                    return "repeat"

                print(f"\nüìã –°–ø–∏—Å–æ–∫ '{selected_list}' ({len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π):")
                for i, user in enumerate(users, 1):
                    print(f"  {i}. {user}")

                print("\n–ë—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã:")
                print("  ‚Ä¢ –í—Å–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ –º–∞—à–∏–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
                print("  ‚Ä¢ –ü—É–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
                print("  ‚Ä¢ –£—á–µ—Ç–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
                print("  ‚Ä¢ –ù–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Å–µ—Ç–µ–≤—ã–µ bridge'—ã")

                # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
                confirm = input(f"\n–í—ã —É–≤–µ—Ä–µ–Ω—ã? –í–≤–µ–¥–∏—Ç–µ 'DELETE_{selected_list.upper()}' –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: ").strip()

                if confirm == f"DELETE_{selected_list.upper()}":
                    # –ü–†–û–í–ï–†–ö–ê –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø –ü–ï–†–ï–î –ó–ê–ü–£–°–ö–û–ú –£–î–ê–õ–ï–ù–ò–Ø
                    if not hasattr(self, 'proxmox_manager') or self.proxmox_manager is None:
                        print("‚ùå –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Proxmox! –ü–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å —Å–Ω–∞—á–∞–ª–∞ –≤ –º–µ–Ω—é 7.")
                        return "repeat"

                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
                    try:
                        nodes = self.proxmox_manager.get_nodes()
                        if not nodes:
                            print("‚ùå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Proxmox –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
                            return "repeat"
                        print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ: {len(nodes)} –Ω–æ–¥ –¥–æ—Å—Ç—É–ø–Ω–æ")
                    except Exception as e:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Proxmox: {e}")
                        return "repeat"

                    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º user_manager –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                    if not hasattr(self, 'user_manager') or self.user_manager is None:
                        from core.users.user_manager import UserManager
                        self.user_manager = UserManager(self.proxmox_manager)

                    print("üóëÔ∏è  –ù–∞—á–∏–Ω–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ...")
                    results = self.user_manager.delete_user_resources_batch(users)

                    print("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —É–¥–∞–ª–µ–Ω–∏—è:")
                    print(f"  ‚úÖ –£—Å–ø–µ—à–Ω–æ: {len(results['successful'])}")
                    print(f"  ‚ùå –û—à–∏–±–æ–∫: {len(results['failed'])}")
                    print(f"  ‚è≠Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ: {len(results['skipped'])}")

                    if results['failed']:
                        print(f"\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å: {', '.join(results['failed'])}")
                    else:
                        print("üéâ –í—Å–µ —Ä–µ—Å—É—Ä—Å—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã!")
                else:
                    print("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
        except ValueError:
            print("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ä–µ—Å—É—Ä—Å–æ–≤: {e}")

        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
        return "repeat"

    def _manage_configs_menu(self):
        """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è–º–∏"""
        print("\n‚öôÔ∏è  –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è–º–∏")
        print("=" * 50)

        configs = self.config_manager.list_configs()

        if configs:
            print(f"–ù–∞–π–¥–µ–Ω–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π: {len(configs)}")
            for i, config_name in enumerate(configs, 1):
                print(f"  [{i}] {config_name}")

            print("\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:")
            print("  [1] –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            print("  [2] –£–¥–∞–ª–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é")
            print("  [3] –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é")
            print("  [0] –ù–∞–∑–∞–¥")

            choice = input("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ").strip()

            if choice == "1":
                # –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
                self._show_config_details(configs)
            elif choice == "3":
                # –£–¥–∞–ª–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
                self._delete_config_interactive(configs)
            elif choice == "4":
                # –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
                self._copy_config_interactive(configs)
            else:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!")
        else:
            print("‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
            print("üí° –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ –º–µ–Ω—é 1")

        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
        return "repeat"

    def _manage_connection_config_menu(self):
        """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        print("\n‚öôÔ∏è  –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º")
        print("=" * 50)

        print("–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:")
        print("  [1] –°–æ–∑–¥–∞—Ç—å –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ")
        print("  [2] –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
        print("  [3] –í—ã–±—Ä–∞—Ç—å –∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ")
        print("  [4] –£–¥–∞–ª–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ")
        print("  [0] –ù–∞–∑–∞–¥")

        choice = input("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ").strip()

        if choice == "1":
            if self._create_and_save_connection():
                print("‚úÖ –ù–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ")
            else:
                print("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
        elif choice == "2":
            connections = self.config_manager.load_connections_config()
            if connections:
                print("\nüìã –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:")
                for i, (name, config) in enumerate(connections.items(), 1):
                    host = config.get('host', '–Ω–µ —É–∫–∞–∑–∞–Ω')
                    user = config.get('user', '–Ω–µ —É–∫–∞–∑–∞–Ω')
                    use_token = config.get('use_token', False)
                    auth_type = "token" if use_token else "password"
                    print(f"  [{i}] {name}")
                    print(f"      –•–æ—Å—Ç: {host}")
                    print(f"      –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user}")
                    print(f"      –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è: {auth_type}")
                    print()
            else:
                print("‚ùå –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                print("üí° –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤ –ø—É–Ω–∫—Ç–µ 1")
        elif choice == "3":
            self._select_and_activate_connection()
        elif choice == "4":
            self._delete_saved_connection()
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!")

        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
        return "repeat"

    def _delete_single_user_resources(self):
        """–£–¥–∞–ª–∏—Ç—å —Ä–µ—Å—É—Ä—Å—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        print("\nüóëÔ∏è  –£–¥–∞–ª–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        print("=" * 50)

        users = self.config_manager.load_users()
        if not users:
            print("‚ùå –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç!")
            return "repeat"

        print("–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:")
        for i, user in enumerate(users, 1):
            print(f"  [{i}] {user}")

        try:
            choice = input(f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (1-{len(users)}): ").strip()
            user_index = int(choice) - 1

            if 0 <= user_index < len(users):
                selected_user = users[user_index]
                confirm = input(f"–£–¥–∞–ª–∏—Ç—å —Ä–µ—Å—É—Ä—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è '{selected_user}'? (y/n): ")

                if confirm.lower() == 'y':
                    # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    print(f"‚úÖ –†–µ—Å—É—Ä—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è '{selected_user}' —É–¥–∞–ª–µ–Ω—ã")
                else:
                    print("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
            else:
                print(f"‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –æ—Ç 1 –¥–æ {len(users)}")
        except ValueError:
            print("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä")

        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
        return "repeat"

    def _create_config_from_template(self, template_type):
        """–°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ —à–∞–±–ª–æ–Ω–∞"""
        print(f"\nüìã –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ —à–∞–±–ª–æ–Ω–∞ {template_type}")
        print("=" * 50)

        if template_type == "1":
            # –®–∞–±–ª–æ–Ω —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–æ–≥–æ —Å—Ç–µ–Ω–¥–∞
            config_name = input("–ò–º—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ [student-lab]: ").strip() or "student-lab"
            num_students = input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ [10]: ").strip() or "10"

            print("‚úÖ –°–æ–∑–¥–∞–Ω —à–∞–±–ª–æ–Ω —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–æ–≥–æ —Å—Ç–µ–Ω–¥–∞")
            print(f"   –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {config_name}")
            print(f"   –°—Ç—É–¥–µ–Ω—Ç–æ–≤: {num_students}")
            print("   –í–∫–ª—é—á–∞–µ—Ç: Linux VM, —Å–µ—Ç—å, –±–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")

        elif template_type == "2":
            # –®–∞–±–ª–æ–Ω —Å–µ—Ç–µ–≤–æ–≥–æ —Å—Ç–µ–Ω–¥–∞
            config_name = input("–ò–º—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ [router-lab]: ").strip() or "router-lab"
            num_routers = input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–æ—É—Ç–µ—Ä–æ–≤ [3]: ").strip() or "3"

            print("‚úÖ –°–æ–∑–¥–∞–Ω —à–∞–±–ª–æ–Ω —Å–µ—Ç–µ–≤–æ–≥–æ —Å—Ç–µ–Ω–¥–∞")
            print(f"   –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {config_name}")
            print(f"   –†–æ—É—Ç–µ—Ä–æ–≤: {num_routers}")
            print("   –í–∫–ª—é—á–∞–µ—Ç: Ecorouter —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞, –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ—Ç–µ–π")

        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
        return "repeat"

    def _create_custom_config(self):
        """–°–æ–∑–¥–∞—Ç—å –∫–∞—Å—Ç–æ–º–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"""
        print("\nüîß –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Å—Ç–æ–º–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
        print("=" * 50)

        config_name = input("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: ").strip()
        if not config_name:
            print("‚ùå –ò–º—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!")
            input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
            return "repeat"

        if self.config_manager.load_config(config_name):
            print(f"‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è '{config_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
            input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
            return "repeat"

        machines = []
        print("\n–¢–µ–ø–µ—Ä—å –¥–æ–±–∞–≤–∏–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ –º–∞—à–∏–Ω—ã...")
        print("–ö–∞–∂–¥–∞—è –º–∞—à–∏–Ω–∞ –¥–æ–ª–∂–Ω–∞ –∏–º–µ—Ç—å:")
        print("  - –¢–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ (linux/ecorouter)")
        print("  - –ò–º—è –º–∞—à–∏–Ω—ã")
        print("  - –ù–æ–¥—É –∏ VMID —à–∞–±–ª–æ–Ω–∞")
        print("  - –°–µ—Ç–µ–≤—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã (bridge'—ã)")
        print("  - –¢–∏–ø –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (linked/full)")

        while True:
            print(f"\nüìã –ú–∞—à–∏–Ω—ã –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {len(machines)}")
            print("  [1] –î–æ–±–∞–≤–∏—Ç—å –º–∞—à–∏–Ω—É")
            print("  [2] –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –º–∞—à–∏–Ω—ã")
            print("  [3] –£–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –º–∞—à–∏–Ω—É")
            print("  [4] –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é")
            print("  [0] –û—Ç–º–µ–Ω–∞")

            choice = input("\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ").strip()

            if choice == "1":
                machine = self._create_machine_interactive()
                if machine:
                    machines.append(machine)
                    print(f"‚úÖ –ú–∞—à–∏–Ω–∞ '{machine['name']}' –¥–æ–±–∞–≤–ª–µ–Ω–∞")
                else:
                    print("‚ùå –ú–∞—à–∏–Ω–∞ –Ω–µ –±—ã–ª–∞ —Å–æ–∑–¥–∞–Ω–∞")
            elif choice == "2":
                self._show_machines_in_config(machines)
            elif choice == "3":
                if machines:
                    removed = machines.pop()
                    print(f"‚úÖ –ú–∞—à–∏–Ω–∞ '{removed['name']}' —É–¥–∞–ª–µ–Ω–∞")
                else:
                    print("‚ùå –ù–µ—Ç –º–∞—à–∏–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            elif choice == "4":
                if not machines:
                    print("‚ùå –î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –º–∞—à–∏–Ω—É!")
                    continue

                config = {"machines": machines}
                if self.config_manager.save_config(config_name, config):
                    print(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è '{config_name}' —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")
                    print(f"   –í—Å–µ–≥–æ –º–∞—à–∏–Ω: {len(machines)}")
                else:
                    print("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
                break
            elif choice == "0":
                print("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ")
                break
            else:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!")

        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
        return "repeat"

    def _show_config_details(self, configs):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        try:
            config_num = int(input("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: ")) - 1
            if 0 <= config_num < len(configs):
                config = self.config_manager.load_config(configs[config_num])
                if config:
                    print(f"\n–î–µ—Ç–∞–ª–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ '{configs[config_num]}':")
                    print(f"  –ú–∞—à–∏–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {len(config.get('machines', []))}")
                    for i, machine in enumerate(config.get('machines', []), 1):
                        print(f"\n  –ú–∞—à–∏–Ω–∞ {i}:")
                        print(f"    –¢–∏–ø: {machine.get('device_type', 'linux')}")
                        print(f"    –ò–º—è: {machine.get('name', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}")
                        print(f"    –®–∞–±–ª–æ–Ω: VMID {machine.get('template_vmid')} –Ω–∞ –Ω–æ–¥–µ {machine.get('template_node')}")
                        print(f"    –°–µ—Ç–µ–π: {len(machine.get('networks', []))}")
                        print(f"    –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ: {'–ø–æ–ª–Ω–æ–µ' if machine.get('full_clone') else '—Å–≤—è–∑–∞–Ω–Ω–æ–µ'}")
                else:
                    print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            else:
                print(f"‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –æ—Ç 1 –¥–æ {len(configs)}")
        except ValueError:
            print("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä")

    def _delete_config_interactive(self, configs):
        """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        try:
            config_num = int(input("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: ")) - 1
            if 0 <= config_num < len(configs):
                config_name = configs[config_num]
                confirm = input(f"–£–¥–∞–ª–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é '{config_name}'? (y/n): ")
                if confirm.lower() == 'y':
                    self.config_manager.delete_config(config_name)
                    print(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è '{config_name}' —É–¥–∞–ª–µ–Ω–∞")
                else:
                    print("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
            else:
                print(f"‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –æ—Ç 1 –¥–æ {len(configs)}")
        except ValueError:
            print("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä")

    def _create_and_save_connection(self) -> bool:
        """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –µ–≥–æ"""
        print("\nüîå –°–æ–∑–¥–∞–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Proxmox")
        print("=" * 60)

        # –ó–∞–ø—Ä–æ—Å –∏–º–µ–Ω–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        connection_name = input("–ò–º—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'prod-cluster'): ").strip()
        if not connection_name:
            print("‚ùå –ò–º—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ!")
            return False

        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º
        existing_connections = self.config_manager.load_connections_config() or {}
        if connection_name in existing_connections:
            confirm = input(f"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ '{connection_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å? (y/n): ").lower()
            if confirm != 'y':
                print("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
                return False

        # –°–æ–∑–¥–∞—Ç—å –±–∞–∑–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
        success = self._create_new_connection()
        if not success:
            return False

        # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        connection_config = {
            'host': self.proxmox_manager.host,
            'user': self.proxmox_manager.user,
        }

        # –î–æ–±–∞–≤–∏—Ç—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
        if hasattr(self.proxmox_manager, 'password') and self.proxmox_manager.password:
            connection_config['password'] = self.proxmox_manager.password
            connection_config['use_token'] = False
        elif hasattr(self.proxmox_manager, 'token_name') and self.proxmox_manager.token_name:
            connection_config['token_name'] = self.proxmox_manager.token_name
            connection_config['token_value'] = self.proxmox_manager.token_value
            connection_config['use_token'] = True

        # –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ
        connections = existing_connections
        connections[connection_name] = connection_config

        # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        if self.config_manager.save_connections_config(connections):
            print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ '{connection_name}' —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!")
            return True
        else:
            print("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
            return False

    def _select_and_activate_connection(self) -> bool:
        """–í—ã–±—Ä–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ"""
        print("\nüîÑ –í—ã–±–æ—Ä –∏ –∞–∫—Ç–∏–≤–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
        print("=" * 60)

        # –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        connections = self.config_manager.load_connections_config()
        if not connections:
            print("‚ùå –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            print("üí° –°–æ–∑–¥–∞–π—Ç–µ –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤ –ø—É–Ω–∫—Ç–µ 1")
            return False

        # –ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        print("–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:")
        connection_names = list(connections.keys())
        for i, name in enumerate(connection_names, 1):
            config = connections[name]
            host = config.get('host', '–Ω–µ —É–∫–∞–∑–∞–Ω')
            user = config.get('user', '–Ω–µ —É–∫–∞–∑–∞–Ω')
            use_token = config.get('use_token', False)
            auth_type = "token" if use_token else "password"
            print(f"  [{i}] {name} (—Ö–æ—Å—Ç: {host}, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user}, auth: {auth_type})")

        while True:
            choice = input("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ [1]: ").strip()
            if not choice:
                choice = "1"

            try:
                choice_index = int(choice) - 1
                if 0 <= choice_index < len(connection_names):
                    selected_name = connection_names[choice_index]
                    selected_config = connections[selected_name]

                    print(f"üîÑ –ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è '{selected_name}'...")

                    # –ü–æ–ø—ã—Ç–∞—Ç—å—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
                    try:
                        from core.proxmox.proxmox_client import ProxmoxClient

                        self.proxmox_manager = ProxmoxClient(
                            host=selected_config['host'],
                            user=selected_config['user'],
                            password=None if selected_config.get('use_token') else selected_config.get('password'),
                            token_name=selected_config.get('token_name') if selected_config.get('use_token') else None,
                            token_value=selected_config.get('token_value') if selected_config.get('use_token') else None
                        )

                        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
                        nodes = self.proxmox_manager.get_nodes()
                        print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ '{selected_name}' –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ!")
                        print(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–æ–¥—ã: {', '.join(nodes)}")
                        return True

                    except Exception as e:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
                        return False
                else:
                    print(f"‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –æ—Ç 1 –¥–æ {len(connection_names)}")
            except ValueError:
                print("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä")

    def _delete_saved_connection(self) -> bool:
        """–£–¥–∞–ª–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ"""
        print("\nüóëÔ∏è  –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
        print("=" * 60)

        # –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        connections = self.config_manager.load_connections_config()
        if not connections:
            print("‚ùå –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return False

        # –ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        print("–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
        connection_names = list(connections.keys())
        for i, name in enumerate(connection_names, 1):
            config = connections[name]
            host = config.get('host', '–Ω–µ —É–∫–∞–∑–∞–Ω')
            print(f"  [{i}] {name} (—Ö–æ—Å—Ç: {host})")

        while True:
            choice = input("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: ").strip()

            try:
                choice_index = int(choice) - 1
                if 0 <= choice_index < len(connection_names):
                    selected_name = connection_names[choice_index]

                    confirm = input(f"–£–¥–∞–ª–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ '{selected_name}'? (y/n): ").lower()
                    if confirm != 'y':
                        print("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
                        return False

                    # –£–¥–∞–ª–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏–∑ —Å–ª–æ–≤–∞—Ä—è
                    del connections[selected_name]

                    # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
                    if self.config_manager.save_connections_config(connections):
                        print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ '{selected_name}' —É–¥–∞–ª–µ–Ω–æ!")
                        return True
                    else:
                        print("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è")
                        return False
                else:
                    print(f"‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –æ—Ç 1 –¥–æ {len(connection_names)}")
            except ValueError:
                print("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä")

    def _ensure_proxmox_connection(self) -> bool:
        """–û–±–µ—Å–ø–µ—á–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Proxmox –≤ –Ω–∞—á–∞–ª–µ —Ä–∞–±–æ—Ç—ã"""
        if hasattr(self, 'proxmox_manager') and self.proxmox_manager is not None:
            # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –µ—â–µ –∞–∫—Ç–∏–≤–Ω–æ
            try:
                nodes = self.proxmox_manager.get_nodes()
                if nodes:
                    return True
            except:
                pass

        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ - –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ
        print("üîå –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Proxmox –∫–ª–∞—Å—Ç–µ—Ä—É")
        print("=" * 50)

        # –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        connections = self.config_manager.load_connections_config()

        if connections:
            print("–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:")
            for i, (name, config) in enumerate(connections.items(), 1):
                print(f"  [{i}] {name} - {config.get('host', '–Ω–µ —É–∫–∞–∑–∞–Ω')}")
            print(f"  [{len(connections) + 1}] –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ")

            try:
                choice = input(f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ (1-{len(connections) + 1}) [1]: ").strip()
                if not choice:
                    choice = "1"

                config_index = int(choice) - 1

                if 0 <= config_index < len(connections):
                    # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
                    config_names = list(connections.keys())
                    selected_config = connections[config_names[config_index]]
                    connection_name = config_names[config_index]

                    try:
                        from core.proxmox.proxmox_client import ProxmoxClient

                        self.proxmox_manager = ProxmoxClient(
                            host=selected_config['host'],
                            user=selected_config['user'],
                            password=None if selected_config.get('use_token') else selected_config.get('password'),
                            token_name=selected_config.get('token_name') if selected_config.get('use_token') else None,
                            token_value=selected_config.get('token_value') if selected_config.get('use_token') else None
                        )

                        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
                        nodes = self.proxmox_manager.get_nodes()
                        print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ '{connection_name}' —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!")
                        print(f"   –î–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–æ–¥—ã: {', '.join(nodes)}")
                        return True

                    except Exception as e:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è '{connection_name}': {e}")
                        print("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ")
                        return self._create_new_connection()
                else:
                    # –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
                    return self._create_new_connection()
            except ValueError:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!")
                return self._create_new_connection()
        else:
            print("–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return self._create_new_connection()

    def _get_current_connection_info(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏"""
        if hasattr(self, 'proxmox_manager') and self.proxmox_manager is not None:
            try:
                nodes = self.proxmox_manager.get_nodes()
                if nodes:
                    return f"{self.proxmox_manager.host} ({len(nodes)} –Ω–æ–¥)"
            except:
                return "‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"

        return "‚ùå –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω"

    def _copy_config_interactive(self, configs):
        """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        try:
            source_num = int(input("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è: ")) - 1
            if 0 <= source_num < len(configs):
                new_name = input("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –¥–ª—è –∫–æ–ø–∏–∏: ").strip()
                if new_name:
                    # –õ–æ–≥–∏–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
                    print(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è '{configs[source_num]}' —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –∫–∞–∫ '{new_name}'")
                else:
                    print("‚ùå –ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!")
            else:
                print(f"‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –æ—Ç 1 –¥–æ {len(configs)}")
        except ValueError:
            print("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä")

    def _load_last_used_config(self):
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"""
        # –õ–æ–≥–∏–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
        return self.config_manager.load_deployment_config()

    def _load_users_from_file(self, file_path):
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞
            print(f"üí° –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–∑–∂–µ")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: {e}")
            return False

    def _create_machine_interactive(self) -> Dict[str, Any]:
        """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –º–∞—à–∏–Ω—ã —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º"""
        print("\nüñ•Ô∏è  –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π –º–∞—à–∏–Ω—ã")

        # –¢–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ - –≤—ã–±–æ—Ä –∏–∑ —Å–ø–∏—Å–∫–∞
        print("–¢–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:")
        print("  [1] Linux (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è VM)")
        print("  [2] EcoRouter (–º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä)")
        while True:
            device_choice = input("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ [1]: ").strip()
            if not device_choice:
                device_choice = "1"

            if device_choice == "1":
                device_type = "linux"
                break
            elif device_choice == "2":
                device_type = "ecorouter"
                break
            else:
                print("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ 1 –∏–ª–∏ 2")

        # –ò–º—è –º–∞—à–∏–Ω—ã
        while True:
            name = input("–ò–º—è –º–∞—à–∏–Ω—ã: ").strip()
            if name:
                break
            print("‚ùå –ò–º—è –º–∞—à–∏–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ")

        # –ù–æ–¥–∞ —à–∞–±–ª–æ–Ω–∞
        # –ü–æ–ø—ã—Ç–∞—Ç—å—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–æ–¥—ã –∏–∑ Proxmox
        available_nodes = []
        if hasattr(self, 'proxmox_manager') and self.proxmox_manager:
            try:
                available_nodes = self.proxmox_manager.get_nodes()
            except Exception as e:
                print("‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –Ω–æ–¥ –∏–∑ Proxmox")
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –Ω–æ–¥: {e}")

        if available_nodes:
            print("–î–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–æ–¥—ã:")
            for i, node in enumerate(available_nodes, 1):
                print(f"  {i}. {node}")

            while True:
                node_choice = input("–ù–æ–¥–∞ —à–∞–±–ª–æ–Ω–∞ [1]: ").strip()
                if not node_choice:
                    node_choice = "1"

                try:
                    node_index = int(node_choice) - 1
                    if 0 <= node_index < len(available_nodes):
                        template_node = available_nodes[node_index]
                        break
                    else:
                        print(f"‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –æ—Ç 1 –¥–æ {len(available_nodes)}")
                except ValueError:
                    print("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä")
        else:
            # Manual input if no nodes available
            while True:
                template_node = input("–ù–æ–¥–∞ —à–∞–±–ª–æ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, pve1): ").strip()
                if template_node:
                    break
                print("‚ùå –ù–æ–¥–∞ —à–∞–±–ª–æ–Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞")

        # –®–∞–±–ª–æ–Ω VM
        # –ü–æ–ø—ã—Ç–∞—Ç—å—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –Ω–æ–¥–µ
        available_templates = []
        if hasattr(self, 'proxmox_manager') and self.proxmox_manager:
            try:
                vms = self.proxmox_manager.get_vms_on_node(template_node)
                # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —à–∞–±–ª–æ–Ω—ã (VM –∫–æ—Ç–æ—Ä—ã–µ —è–≤–ª—è—é—Ç—Å—è —à–∞–±–ª–æ–Ω–∞–º–∏)
                available_templates = [
                    vm for vm in vms
                    if vm.get('template', 0) == 1  # –¢–æ–ª—å–∫–æ —à–∞–±–ª–æ–Ω—ã
                ]
                if not available_templates:
                    # –ï—Å–ª–∏ –Ω–µ—Ç —à–∞–±–ª–æ–Ω–æ–≤, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ VM –∫–∞–∫ –≤–æ–∑–º–æ–∂–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã
                    available_templates = vms[:10]  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 VM
            except Exception as e:
                print("‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω–æ–≤")
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ VM –Ω–∞ –Ω–æ–¥–µ {template_node}: {e}")

        if available_templates:
            print("–î–æ—Å—Ç—É–ø–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã –Ω–∞ –Ω–æ–¥–µ:")
            for i, vm in enumerate(available_templates, 1):
                vm_name = vm.get('name', f'VM {vm.get("vmid", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")}')
                vm_status = vm.get('status', 'unknown')
                print(f"  {i}. {vm_name} (VMID: {vm.get('vmid', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}, —Å—Ç–∞—Ç—É—Å: {vm_status})")

            while True:
                template_choice = input("–í—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω [1]: ").strip()
                if not template_choice:
                    template_choice = "1"

                try:
                    template_index = int(template_choice) - 1
                    if 0 <= template_index < len(available_templates):
                        selected_template = available_templates[template_index]
                        template_vmid = selected_template.get('vmid')
                        if template_vmid:
                            template_vmid = int(template_vmid)
                            print(f"‚úÖ –í—ã–±—Ä–∞–Ω —à–∞–±–ª–æ–Ω: {selected_template.get('name', f'VM {template_vmid}')}")
                            break
                        else:
                            print("‚ùå –í—ã–±—Ä–∞–Ω–Ω—ã–π —à–∞–±–ª–æ–Ω –Ω–µ –∏–º–µ–µ—Ç VMID")
                    else:
                        print(f"‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –æ—Ç 1 –¥–æ {len(available_templates)}")
                except ValueError:
                    print("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä")
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —à–∞–±–ª–æ–Ω–∞: {e}")
        else:
            # Manual input if no templates available
            while True:
                template_vmid_str = input("VMID —à–∞–±–ª–æ–Ω–∞ (—á–∏—Å–ª–æ): ").strip()
                try:
                    template_vmid = int(template_vmid_str)
                    break
                except ValueError:
                    print("‚ùå VMID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")

        # –°–µ—Ç–µ–≤—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã
        networks = []
        print("\n–î–æ–±–∞–≤–∏–º —Å–µ—Ç–µ–≤—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã:")
        print("–û—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –∏–º—è bridge –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è")
        while True:
            bridge = input(f"Bridge {len(networks) + 1} (–Ω–∞–ø—Ä–∏–º–µ—Ä, vmbr0): ").strip()
            if not bridge:
                break
            networks.append({"bridge": bridge})

        if not networks:
            print("‚ö†Ô∏è  –î–æ–±–∞–≤–ª–µ–Ω —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å vmbr0")
            networks.append({"bridge": "vmbr0"})

        # –¢–∏–ø –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è - –≤—ã–±–æ—Ä –∏–∑ —Å–ø–∏—Å–∫–∞
        print("–¢–∏–ø –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:")
        print("  [1] –°–≤—è–∑–∞–Ω–Ω–æ–µ (linked clone) - –±—ã—Å—Ç—Ä–æ–µ, —ç–∫–æ–Ω–æ–º–∏—Ç –º–µ—Å—Ç–æ")
        print("  [2] –ü–æ–ª–Ω–æ–µ (full clone) - –º–µ–¥–ª–µ–Ω–Ω–æ–µ, –Ω–µ–∑–∞–≤–∏—Å–∏–º–∞—è –∫–æ–ø–∏—è")
        while True:
            clone_choice = input("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è [1]: ").strip()
            if not clone_choice:
                clone_choice = "1"

            if clone_choice == "1":
                full_clone = False
                break
            elif clone_choice == "2":
                full_clone = True
                break
            else:
                print("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ 1 –∏–ª–∏ 2")

        machine = {
            "device_type": device_type,
            "name": name,
            "template_node": template_node,
            "template_vmid": template_vmid,
            "networks": networks,
            "full_clone": full_clone
        }

        print(f"\n‚úÖ –ú–∞—à–∏–Ω–∞ '{name}' –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞:")
        print(f"   –¢–∏–ø: {device_type}")
        print(f"   –®–∞–±–ª–æ–Ω: VMID {template_vmid} –Ω–∞ {template_node}")
        print(f"   –°–µ—Ç–µ–π: {len(networks)} ({', '.join([n['bridge'] for n in networks])})")
        print(f"   –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ: {'–ø–æ–ª–Ω–æ–µ' if full_clone else '—Å–≤—è–∑–∞–Ω–Ω–æ–µ'}")

        return machine

    def _show_machines_in_config(self, machines: List[Dict[str, Any]]):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–∞—à–∏–Ω—ã –≤ —Ç–µ–∫—É—â–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        if not machines:
            print("‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—É—Å—Ç–∞")
            return

        print(f"\nüìã –ú–∞—à–∏–Ω—ã –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ({len(machines)}):")
        print("-" * 80)

        for i, machine in enumerate(machines, 1):
            print(f"{i}. {machine['name']} ({machine['device_type']})")
            print(f"   –®–∞–±–ª–æ–Ω: VMID {machine['template_vmid']} –Ω–∞ {machine['template_node']}")
            print(f"   –°–µ—Ç–µ–π: {len(machine['networks'])} ({', '.join([n['bridge'] for n in machine['networks']])})")
            print(f"   –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ: {'–ø–æ–ª–Ω–æ–µ' if machine['full_clone'] else '—Å–≤—è–∑–∞–Ω–Ω–æ–µ'}")
            print()

        print("-" * 80)

    def _manage_user_lists_menu(self):
        """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        print("\nüìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        print("=" * 50)

        user_lists = self.config_manager.list_user_lists()

        if user_lists:
            print("–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:")
            for i, list_name in enumerate(user_lists, 1):
                users = self.config_manager.load_users(list_name)
                print(f"  [{i}] {list_name} ({len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)")
            print(f"  [{len(user_lists) + 1}] –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫")
        else:
            print("–°–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            print("  [1] –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫")

        try:
            choice = input("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –∏–ª–∏ 'c' –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ: ").strip().lower()

            if choice == 'c' or (user_lists and choice == str(len(user_lists) + 1)):
                # –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫
                return self._create_user_list_interactive()
            else:
                # –í—ã–±—Ä–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å–ø–∏—Å–æ–∫
                try:
                    list_index = int(choice) - 1
                    if 0 <= list_index < len(user_lists):
                        selected_list = user_lists[list_index]
                        return self._edit_user_list_interactive(selected_list)
                    else:
                        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!")
                        return "repeat"
                except ValueError:
                    print("‚ùå –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∏–ª–∏ 'c' –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ")
                    return "repeat"
        except KeyboardInterrupt:
            return "repeat"

    def _create_user_list_interactive(self):
        """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        print("\nüë• –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        print("=" * 50)

        list_name = input("–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ").strip()
        if not list_name:
            print("‚ùå –ò–º—è —Å–ø–∏—Å–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!")
            return "repeat"

        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Å–ø–∏—Å–æ–∫ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º
        if list_name in self.config_manager.list_user_lists():
            print(f"‚ùå –°–ø–∏—Å–æ–∫ '{list_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
            return "repeat"

        print("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± —Å–æ–∑–¥–∞–Ω–∏—è —Å–ø–∏—Å–∫–∞:")
        print("  [1] –í–≤–µ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤—Ä—É—á–Ω—É—é")
        print("  [2] –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ —Ñ–∞–π–ª–∞")
        print("  [0] –û—Ç–º–µ–Ω–∞")

        choice = input("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–±: ").strip()

        if choice == "1":
            users_input = input("–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (user1@pve,user2@pve): ")
            users = [user.strip() for user in users_input.split(',') if user.strip()]

            if self.config_manager.save_users(users, list_name):
                print(f"‚úÖ –°–ø–∏—Å–æ–∫ '{list_name}' —Å–æ–∑–¥–∞–Ω —Å {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏")
            else:
                print("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞")
        elif choice == "2":
            file_path = input("–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å–æ —Å–ø–∏—Å–∫–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ").strip()
            if self._load_users_from_file(file_path, list_name):
                print(f"‚úÖ –°–ø–∏—Å–æ–∫ '{list_name}' —Å–æ–∑–¥–∞–Ω –∏–∑ —Ñ–∞–π–ª–∞")
            else:
                print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞")
        else:
            print("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")

        return "repeat"

    def _edit_user_list_interactive(self, list_name: str):
        """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        print(f"\nüìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ '{list_name}'")
        print("=" * 50)

        users = self.config_manager.load_users(list_name)
        print(f"–¢–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ ({len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π):")
        for i, user in enumerate(users, 1):
            print(f"  {i}. {user}")

        print("\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:")
        print("  [1] –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        print("  [2] –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        print("  [3] –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫")
        print("  [4] –û—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫")
        print("  [0] –ù–∞–∑–∞–¥")

        choice = input("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ").strip()

        if choice == "1":
            # –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            users_input = input("–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é): ")
            new_users = [user.strip() for user in users_input.split(',') if user.strip()]
            users.extend(new_users)

            if self.config_manager.save_users(users, list_name):
                print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {len(new_users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            else:
                print("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
        elif choice == "2":
            # –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            if users:
                print("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
                for i, user in enumerate(users, 1):
                    print(f"  [{i}] {user}")

                try:
                    indices_input = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é): ")
                    indices_to_remove = [int(idx.strip()) - 1 for idx in indices_input.split(',') if idx.strip().isdigit()]

                    removed_count = 0
                    for idx in sorted(indices_to_remove, reverse=True):
                        if 0 <= idx < len(users):
                            removed_user = users.pop(idx)
                            removed_count += 1
                            print(f"‚úÖ –£–¥–∞–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {removed_user}")

                    if removed_count > 0:
                        if self.config_manager.save_users(users, list_name):
                            print(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {removed_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
                        else:
                            print("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
                    else:
                        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
                except ValueError:
                    print("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –Ω–æ–º–µ—Ä–∞")
            else:
                print("‚ùå –°–ø–∏—Å–æ–∫ –ø—É—Å—Ç")
        elif choice == "3":
            # –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫
            if users:
                print(f"\n–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π '{list_name}':")
                for i, user in enumerate(users, 1):
                    print(f"  {i}. {user}")
            else:
                print("‚ùå –°–ø–∏—Å–æ–∫ –ø—É—Å—Ç")
        elif choice == "4":
            # –û—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫
            confirm = input("–û—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π? (y/n): ")
            if confirm.lower() == 'y':
                if self.config_manager.save_users([], list_name):
                    print("‚úÖ –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ—á–∏—â–µ–Ω")
                else:
                    print("‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏")
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!")

        return "repeat"

    def _show_all_user_lists(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Å–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        print("\nüìã –í—Å–µ —Å–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        print("=" * 50)

        user_lists = self.config_manager.list_user_lists()

        if not user_lists:
            print("‚ùå –°–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return "repeat"

        for list_name in user_lists:
            users = self.config_manager.load_users(list_name)
            print(f"\nüìù {list_name} ({len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π):")
            if users:
                for i, user in enumerate(users, 1):
                    print(f"  {i}. {user}")
            else:
                print("  (–ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫)")

        return "repeat"

    def _delete_user_list_interactive(self):
        """–£–¥–∞–ª–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        print("\nüóëÔ∏è  –£–¥–∞–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        print("=" * 50)

        user_lists = self.config_manager.list_user_lists()

        if not user_lists:
            print("‚ùå –ù–µ—Ç —Å–ø–∏—Å–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            return "repeat"

        print("–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ø–∏—Å–∫–∏:")
        for i, list_name in enumerate(user_lists, 1):
            users = self.config_manager.load_users(list_name)
            print(f"  [{i}] {list_name} ({len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)")

        try:
            choice = input(f"–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (1-{len(user_lists)}): ").strip()
            list_index = int(choice) - 1

            if 0 <= list_index < len(user_lists):
                selected_list = user_lists[list_index]
                users = self.config_manager.load_users(selected_list)

                confirm = input(f"–£–¥–∞–ª–∏—Ç—å —Å–ø–∏—Å–æ–∫ '{selected_list}' ({len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)? (y/n): ")
                if confirm.lower() == 'y':
                    if self.config_manager.delete_user_list(selected_list):
                        print(f"‚úÖ –°–ø–∏—Å–æ–∫ '{selected_list}' —É–¥–∞–ª–µ–Ω")
                    else:
                        print("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞")
                else:
                    print("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
            else:
                print(f"‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –æ—Ç 1 –¥–æ {len(user_lists)}")
        except ValueError:
            print("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä")

        return "repeat"

    def _load_users_from_file(self, file_path: str, list_name: str = "default"):
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞ –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫"""
        try:
            import os
            if not os.path.exists(file_path):
                print(f"‚ùå –§–∞–π–ª '{file_path}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False

            users = []
            with open(file_path, 'r', encoding='utf-8') as f:
                for line_num, line in enumerate(f, 1):
                    user = line.strip()
                    if user and not user.startswith('#'):  # –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
                        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–∏—Ç—å @pve –∫ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        if '@' not in user:
                            user += '@pve'
                        users.append(user)

            if users:
                if self.config_manager.save_users(users, list_name):
                    print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞ –≤ —Å–ø–∏—Å–æ–∫ '{list_name}'")
                    return True
                else:
                    print("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
                    return False
            else:
                print("‚ùå –í —Ñ–∞–π–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
                return False

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: {e}")
            return False
