"""
–ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã Deploy-Stand

–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –¥–ª—è —Å–±–æ—Ä–∞ –∏ –∞–Ω–∞–ª–∏–∑–∞ –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
–æ–ø–µ—Ä–∞—Ü–∏–π —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö –º–∞—à–∏–Ω.
"""

import time
import statistics
import logging
from typing import Dict, List, Any, Optional

logger = logging.getLogger(__name__)


class PerformanceMetrics:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""

    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –º–µ—Ç—Ä–∏–∫"""
        self.metrics = {
            'deployment_time': [],
            'template_creation_time': [],
            'network_setup_time': [],
            'user_creation_time': [],
            'api_call_count': 0,
            'error_count': 0,
            'cache_hit_rate': 0.0,
            'cache_requests': 0,
            'cache_hits': 0
        }

        # –¢–µ–∫—É—â–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
        self.current_operations = {}

    def start_operation(self, operation_name: str) -> str:
        """
        –ù–∞—á–∞—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏

        Args:
            operation_name: –ù–∞–∑–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏

        Returns:
            ID –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        """
        operation_id = f"{operation_name}_{time.time()}"
        self.current_operations[operation_id] = {
            'name': operation_name,
            'start_time': time.time()
        }

        logger.debug(f"–ù–∞—á–∞—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏—è: {operation_name}")
        return operation_id

    def end_operation(self, operation_id: str) -> float:
        """
        –ó–∞–≤–µ—Ä—à–∏—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏

        Args:
            operation_id: ID –æ–ø–µ—Ä–∞—Ü–∏–∏

        Returns:
            –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        """
        if operation_id not in self.current_operations:
            logger.warning(f"–û–ø–µ—Ä–∞—Ü–∏—è {operation_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return 0.0

        operation = self.current_operations[operation_id]
        duration = time.time() - operation['start_time']

        # –ó–∞–ø–∏—Å–∞—Ç—å –º–µ—Ç—Ä–∏–∫—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏
        operation_name = operation['name']

        if operation_name == 'deployment':
            self.metrics['deployment_time'].append(duration)
        elif operation_name == 'template_creation':
            self.metrics['template_creation_time'].append(duration)
        elif operation_name == 'network_setup':
            self.metrics['network_setup_time'].append(duration)
        elif operation_name == 'user_creation':
            self.metrics['user_creation_time'].append(duration)

        # –û—á–∏—Å—Ç–∏—Ç—å —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é
        del self.current_operations[operation_id]

        logger.debug(f"–ó–∞–≤–µ—Ä—à–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏—è {operation_name} –∑–∞ {duration:.2f}—Å")
        return duration

    def record_api_call(self):
        """–ü–æ–¥—Å—á–∏—Ç–∞—Ç—å –≤—ã–∑–æ–≤ API"""
        self.metrics['api_call_count'] += 1

    def record_error(self):
        """–ü–æ–¥—Å—á–∏—Ç–∞—Ç—å –æ—à–∏–±–∫—É"""
        self.metrics['error_count'] += 1

    def record_cache_request(self, hit: bool = False):
        """–ó–∞–ø–∏—Å–∞—Ç—å –∑–∞–ø—Ä–æ—Å –∫ –∫–µ—à—É"""
        self.metrics['cache_requests'] += 1
        if hit:
            self.metrics['cache_hits'] += 1

    def update_cache_hit_rate(self):
        """–û–±–Ω–æ–≤–∏—Ç—å –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ø–æ–ø–∞–¥–∞–Ω–∏–π –≤ –∫–µ—à"""
        if self.metrics['cache_requests'] > 0:
            self.metrics['cache_hit_rate'] = (
                self.metrics['cache_hits'] / self.metrics['cache_requests']
            )

    def get_average_deployment_time(self) -> float:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è"""
        if not self.metrics['deployment_time']:
            return 0.0
        return statistics.mean(self.metrics['deployment_time'])

    def get_median_deployment_time(self) -> float:
        """–ü–æ–ª—É—á–∏—Ç—å –º–µ–¥–∏–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è"""
        if not self.metrics['deployment_time']:
            return 0.0
        return statistics.median(self.metrics['deployment_time'])

    def get_min_deployment_time(self) -> float:
        """–ü–æ–ª—É—á–∏—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è"""
        if not self.metrics['deployment_time']:
            return 0.0
        return min(self.metrics['deployment_time'])

    def get_max_deployment_time(self) -> float:
        """–ü–æ–ª—É—á–∏—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è"""
        if not self.metrics['deployment_time']:
            return 0.0
        return max(self.metrics['deployment_time'])

    def get_deployment_time_percentile(self, percentile: float) -> float:
        """–ü–æ–ª—É—á–∏—Ç—å –ø–µ—Ä—Ü–µ–Ω—Ç–∏–ª—å –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è"""
        if not self.metrics['deployment_time']:
            return 0.0
        return statistics.quantiles(self.metrics['deployment_time'], n=100)[int(percentile) - 1]

    def get_success_rate(self) -> float:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –æ–ø–µ—Ä–∞—Ü–∏–π"""
        total_operations = self.metrics['api_call_count']
        if total_operations == 0:
            return 1.0
        return 1.0 - (self.metrics['error_count'] / total_operations)

    def get_cache_hit_rate(self) -> float:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ø–æ–ø–∞–¥–∞–Ω–∏–π –≤ –∫–µ—à"""
        return self.metrics['cache_hit_rate']

    def get_summary_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–≤–æ–¥–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        return {
            'deployment': {
                'count': len(self.metrics['deployment_time']),
                'average_time': self.get_average_deployment_time(),
                'median_time': self.get_median_deployment_time(),
                'min_time': self.get_min_deployment_time(),
                'max_time': self.get_max_deployment_time(),
                'p95_time': self.get_deployment_time_percentile(95),
                'p99_time': self.get_deployment_time_percentile(99)
            },
            'performance': {
                'total_api_calls': self.metrics['api_call_count'],
                'total_errors': self.metrics['error_count'],
                'success_rate': self.get_success_rate(),
                'cache_hit_rate': self.get_cache_hit_rate(),
                'cache_requests': self.metrics['cache_requests'],
                'cache_hits': self.metrics['cache_hits']
            },
            'averages': {
                'template_creation': self._get_average_time('template_creation_time'),
                'network_setup': self._get_average_time('network_setup_time'),
                'user_creation': self._get_average_time('user_creation_time')
            }
        }

    def _get_average_time(self, metric_name: str) -> float:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –º–µ—Ç—Ä–∏–∫–∏"""
        times = self.metrics[metric_name]
        if not times:
            return 0.0
        return statistics.mean(times)

    def reset_metrics(self):
        """–°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –º–µ—Ç—Ä–∏–∫–∏"""
        for key in self.metrics:
            if isinstance(self.metrics[key], list):
                self.metrics[key].clear()
            elif isinstance(self.metrics[key], (int, float)):
                self.metrics[key] = 0 if isinstance(self.metrics[key], int) else 0.0

        self.current_operations.clear()
        logger.info("–ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–±—Ä–æ—à–µ–Ω—ã")

    def export_metrics(self) -> Dict[str, Any]:
        """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
        return {
            'timestamp': time.time(),
            'metrics': self.metrics.copy(),
            'summary': self.get_summary_stats()
        }

    def print_summary(self):
        """–í—ã–≤–µ—Å—Ç–∏ —Å–≤–æ–¥–∫—É –º–µ—Ç—Ä–∏–∫ –≤ –∫–æ–Ω—Å–æ–ª—å"""
        summary = self.get_summary_stats()

        print("\nüìä –°–≤–æ–¥–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
        print("=" * 50)

        deployment = summary['deployment']
        if deployment['count'] > 0:
            print("üöÄ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ:")
            print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø–µ—Ä–∞—Ü–∏–π: {deployment['count']}")
            print(f"   –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {deployment['average_time']:.2f}—Å")
            print(f"   –ú–µ–¥–∏–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è: {deployment['median_time']:.2f}—Å")
            print(f"   –ú–∏–Ω/–ú–∞–∫—Å: {deployment['min_time']:.2f}—Å / {deployment['max_time']:.2f}—Å")
            print(f"   95-–π –ø–µ—Ä—Ü–µ–Ω—Ç–∏–ª—å: {deployment['p95_time']:.2f}—Å")

        performance = summary['performance']
        print("\n‚ö° –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:")
        print(f"   API –≤—ã–∑–æ–≤–æ–≤: {performance['total_api_calls']}")
        print(f"   –û—à–∏–±–æ–∫: {performance['total_errors']}")
        print(f"   –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {performance['success_rate']:.1%}")
        print(f"   –ö–µ—à hit rate: {performance['cache_hit_rate']:.1%}")

        averages = summary['averages']
        print("\n‚è±Ô∏è  –°—Ä–µ–¥–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∞:")
        print(f"   –°–æ–∑–¥–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞: {averages['template_creation']:.2f}—Å")
        print(f"   –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Ç–∏: {averages['network_setup']:.2f}—Å")
        print(f"   –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {averages['user_creation']:.2f}—Å")

        print("=" * 50)


class MetricsCollector:
    """–ö–æ–ª–ª–µ–∫—Ç–æ—Ä –º–µ—Ç—Ä–∏–∫ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã Deploy-Stand"""

    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–±–æ—Ä—â–∏–∫–∞ –º–µ—Ç—Ä–∏–∫"""
        self.performance_metrics = PerformanceMetrics()

    def start_operation(self, operation_name: str) -> str:
        """–ù–∞—á–∞—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏"""
        return self.performance_metrics.start_operation(operation_name)

    def end_operation(self, operation_id: str) -> float:
        """–ó–∞–≤–µ—Ä—à–∏—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏"""
        return self.performance_metrics.end_operation(operation_id)

    def record_api_call(self):
        """–ü–æ–¥—Å—á–∏—Ç–∞—Ç—å –≤—ã–∑–æ–≤ API"""
        self.performance_metrics.record_api_call()

    def record_error(self):
        """–ü–æ–¥—Å—á–∏—Ç–∞—Ç—å –æ—à–∏–±–∫—É"""
        self.performance_metrics.record_error()

    def record_cache_request(self, hit: bool = False):
        """–ó–∞–ø–∏—Å–∞—Ç—å –∑–∞–ø—Ä–æ—Å –∫ –∫–µ—à—É"""
        self.performance_metrics.record_cache_request(hit)
        self.performance_metrics.update_cache_hit_rate()

    def get_summary_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–≤–æ–¥–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        return self.performance_metrics.get_summary_stats()

    def print_summary(self):
        """–í—ã–≤–µ—Å—Ç–∏ —Å–≤–æ–¥–∫—É –º–µ—Ç—Ä–∏–∫"""
        self.performance_metrics.print_summary()

    def reset_metrics(self):
        """–°–±—Ä–æ—Å–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏"""
        self.performance_metrics.reset_metrics()

    def export_metrics(self) -> Dict[str, Any]:
        """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –º–µ—Ç—Ä–∏–∫–∏"""
        return self.performance_metrics.export_metrics()
