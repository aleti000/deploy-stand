"""
–õ–æ–≥–≥–µ—Ä —Å–∏—Å—Ç–µ–º—ã Deploy-Stand

–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —É—Ä–æ–≤–Ω—è–º–∏ –≤–∞–∂–Ω–æ—Å—Ç–∏
–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –≤—ã–≤–æ–¥–æ–º –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏.
"""

import logging
import sys
from typing import Optional


class Logger:
    """–¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ª–æ–≥–≥–µ—Ä —Å–∏—Å—Ç–µ–º—ã Deploy-Stand"""

    def __init__(self, name: str = "deploy-stand", level: int = logging.INFO):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞

        Args:
            name: –ò–º—è –ª–æ–≥–≥–µ—Ä–∞
            level: –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        """
        self.logger = logging.getLogger(name)
        self.logger.setLevel(level)

        # –°–æ–∑–¥–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞
        formatter = logging.Formatter(
            '%(asctime)s - %(name)s - %(levelname)s - %(message)s',
            datefmt='%Y-%m-%d %H:%M:%S'
        )

        # –°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Å–æ–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –µ—Å–ª–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã
        if not self.logger.handlers:
            console_handler = logging.StreamHandler(sys.stdout)
            console_handler.setFormatter(formatter)
            self.logger.addHandler(console_handler)

    def info(self, message: str):
        """–õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        self.logger.info(message)

    def success(self, message: str):
        """–õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å —É—Å–ø–µ—à–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏"""
        self.logger.info(f"‚úÖ {message}")

    def error(self, message: str):
        """–õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å –æ—à–∏–±–∫–∏"""
        self.logger.error(f"‚ùå {message}")

    def warning(self, message: str):
        """–õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è"""
        self.logger.warning(f"‚ö†Ô∏è  {message}")

    def debug(self, message: str):
        """–õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é"""
        self.logger.debug(message)

    def critical(self, message: str):
        """–õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏"""
        self.logger.critical(f"üö® {message}")

    def deployment_start(self, config_name: str, user_count: int):
        """–õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å –Ω–∞—á–∞–ª–æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è"""
        self.success(f"–ù–∞—á–∏–Ω–∞–µ—Ç—Å—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ '{config_name}' –¥–ª—è {user_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")

    def deployment_complete(self, results: dict):
        """–õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è"""
        success_count = len([r for r in results.values() if r])
        self.success(f"–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {success_count}")

    def deployment_failed(self, error: str):
        """–õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å –Ω–µ—É–¥–∞—á–Ω–æ–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ"""
        self.error(f"–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –Ω–µ—É–¥–∞—á–Ω–æ: {error}")

    def user_created(self, username: str, pool: str):
        """–õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        self.success(f"–°–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} —Å –ø—É–ª–æ–º {pool}")

    def vm_created(self, vm_name: str, vmid: int, node: str):
        """–õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π –º–∞—à–∏–Ω—ã"""
        self.success(f"–°–æ–∑–¥–∞–Ω–∞ VM '{vm_name}' (ID: {vmid}) –Ω–∞ –Ω–æ–¥–µ {node}")

    def template_migrated(self, template_vmid: int, source_node: str, target_node: str):
        """–õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é —à–∞–±–ª–æ–Ω–∞"""
        self.info(f"–®–∞–±–ª–æ–Ω VM {template_vmid} –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω —Å {source_node} –Ω–∞ {target_node}")

    def connection_established(self, host: str, nodes: list):
        """–õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å —É—Å—Ç–∞–Ω–æ–≤–∫—É —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        self.success(f"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ {host} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –î–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–æ–¥—ã: {', '.join(nodes)}")

    def connection_failed(self, host: str, error: str):
        """–õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å –Ω–µ—É–¥–∞—á–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ"""
        self.error(f"–ù–µ—É–¥–∞—á–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ {host}: {error}")

    def config_loaded(self, config_name: str):
        """–õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å –∑–∞–≥—Ä—É–∑–∫—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        self.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {config_name}")

    def config_saved(self, config_name: str):
        """–õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        self.success(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {config_name}")

    def bridge_created(self, bridge_name: str, node: str):
        """–õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ bridge"""
        self.info(f"–°–æ–∑–¥–∞–Ω bridge {bridge_name} –Ω–∞ –Ω–æ–¥–µ {node}")

    def bridge_deleted(self, bridge_name: str, node: str):
        """–õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ bridge"""
        self.info(f"–£–¥–∞–ª–µ–Ω bridge {bridge_name} —Å –Ω–æ–¥—ã {node}")

    def cleanup_started(self, resource_type: str, count: int):
        """–õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å –Ω–∞—á–∞–ª–æ –æ—á–∏—Å—Ç–∫–∏ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        self.info(f"–ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –æ—á–∏—Å—Ç–∫–∞ {count} {resource_type}")

    def cleanup_completed(self, resource_type: str, cleaned_count: int):
        """–õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ—á–∏—Å—Ç–∫–∏ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        self.success(f"–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£–¥–∞–ª–µ–Ω–æ {cleaned_count} {resource_type}")

    def performance_metric(self, operation: str, duration: float, details: str = ""):
        """–õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        message = f"–û–ø–µ—Ä–∞—Ü–∏—è '{operation}' –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∑–∞ {duration:.2f}—Å"
        if details:
            message += f" ({details})"
        self.info(message)


def setup_logging(log_level: int = logging.INFO, log_file: Optional[str] = None) -> logging.Logger:
    """
    –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Å–∏—Å—Ç–µ–º—ã Deploy-Stand

    Args:
        log_level: –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        log_file: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –ª–æ–≥–æ–≤ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)

    Returns:
        logging.Logger: –ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –ª–æ–≥–≥–µ—Ä
    """
    logger = logging.getLogger("deploy-stand")
    logger.setLevel(log_level)

    # –û—á–∏—Å—Ç–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    logger.handlers.clear()

    # –§–æ—Ä–º–∞—Ç—Ç–µ—Ä –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞
    console_formatter = logging.Formatter(
        '%(asctime)s - %(levelname)s - %(message)s',
        datefmt='%Y-%m-%d %H:%M:%S'
    )

    # –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    console_handler = logging.StreamHandler(sys.stdout)
    console_handler.setFormatter(console_formatter)
    console_handler.setLevel(log_level)
    logger.addHandler(console_handler)

    # –§–∞–π–ª–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω –ª–æ–≥-—Ñ–∞–π–ª
    if log_file:
        file_formatter = logging.Formatter(
            '%(asctime)s - %(name)s - %(levelname)s - %(funcName)s:%(lineno)d - %(message)s'
        )
        file_handler = logging.FileHandler(log_file)
        file_handler.setFormatter(file_formatter)
        file_handler.setLevel(log_level)
        logger.addHandler(file_handler)

    return logger
